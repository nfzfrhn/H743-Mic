
H743-Mic3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da78  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800dd10  0800dd10  0001dd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800dd70  0800dd70  0001dd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800dd74  0800dd74  0001dd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000190  20000000  0800dd78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000014d4  20000190  0800df08  00020190  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001664  0800df08  00021664  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
  9 .debug_info   000306d5  00000000  00000000  000201be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000566e  00000000  00000000  00050893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001558  00000000  00000000  00055f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000013b8  00000000  00000000  00057460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003b302  00000000  00000000  00058818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001f6d1  00000000  00000000  00093b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015c9fb  00000000  00000000  000b31eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0020fbe6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000590c  00000000  00000000  0020fc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000190 	.word	0x20000190
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800dcf8 	.word	0x0800dcf8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000194 	.word	0x20000194
 80002d4:	0800dcf8 	.word	0x0800dcf8

080002d8 <AUDIO_DFSDM_MEMS_MicInit>:
  * @param  node_handle:        mic node handle must be allocated
  * @retval 0 if no error
  */
 int8_t  AUDIO_MicInit(AUDIO_Description_t* audio_description,  AUDIO_Session_t* session_handle,
                       uint32_t node_handle)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	607a      	str	r2, [r7, #4]
  AUDIO_MicNode_t* mic;

  mic   = (AUDIO_MicNode_t*)node_handle;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	617b      	str	r3, [r7, #20]
  memset(mic, 0, sizeof(AUDIO_MicNode_t));
 80002e8:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80002ec:	2100      	movs	r1, #0
 80002ee:	6978      	ldr	r0, [r7, #20]
 80002f0:	f00d fc32 	bl	800db58 <memset>
  mic->node.type                = AUDIO_INPUT;
 80002f4:	697b      	ldr	r3, [r7, #20]
 80002f6:	2200      	movs	r2, #0
 80002f8:	721a      	strb	r2, [r3, #8]
  mic->node.state               = AUDIO_NODE_INITIALIZED;
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	2201      	movs	r2, #1
 80002fe:	701a      	strb	r2, [r3, #0]
  mic->node.session_handle      = session_handle;
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	68ba      	ldr	r2, [r7, #8]
 8000304:	60da      	str	r2, [r3, #12]
  mic->node.audio_description   = audio_description;
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	68fa      	ldr	r2, [r7, #12]
 800030a:	605a      	str	r2, [r3, #4]
  mic->MicDeInit                = AUDIO_MicDeInit;
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	4a38      	ldr	r2, [pc, #224]	; (80003f0 <AUDIO_DFSDM_MEMS_MicInit+0x118>)
 8000310:	61da      	str	r2, [r3, #28]
  mic->MicStart                 = AUDIO_MicStart;
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	4a37      	ldr	r2, [pc, #220]	; (80003f4 <AUDIO_DFSDM_MEMS_MicInit+0x11c>)
 8000316:	621a      	str	r2, [r3, #32]
  mic->MicStop                  = AUDIO_MicStop;
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	4a37      	ldr	r2, [pc, #220]	; (80003f8 <AUDIO_DFSDM_MEMS_MicInit+0x120>)
 800031c:	625a      	str	r2, [r3, #36]	; 0x24
  mic->MicChangeFrequency       = AUDIO_MicChangeFrequency;
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	4a36      	ldr	r2, [pc, #216]	; (80003fc <AUDIO_DFSDM_MEMS_MicInit+0x124>)
 8000322:	629a      	str	r2, [r3, #40]	; 0x28
  mic->MicMute                  = AUDIO_MicMute;
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	4a36      	ldr	r2, [pc, #216]	; (8000400 <AUDIO_DFSDM_MEMS_MicInit+0x128>)
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  mic->MicSetVolume             = AUDIO_MicSetVolume;
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	4a35      	ldr	r2, [pc, #212]	; (8000404 <AUDIO_DFSDM_MEMS_MicInit+0x12c>)
 800032e:	631a      	str	r2, [r3, #48]	; 0x30
  mic->MicGetVolumeDefaultsValues = AUDIO_MicGetVolumeDefaultsValues;
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	4a35      	ldr	r2, [pc, #212]	; (8000408 <AUDIO_DFSDM_MEMS_MicInit+0x130>)
 8000334:	635a      	str	r2, [r3, #52]	; 0x34
#if USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO 
  mic->MicStartReadCount        = AUDIO_MicStartReadCount;
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	4a34      	ldr	r2, [pc, #208]	; (800040c <AUDIO_DFSDM_MEMS_MicInit+0x134>)
 800033a:	639a      	str	r2, [r3, #56]	; 0x38
  mic->MicGetReadCount          = AUDIO_MicGetLastReadCount;
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	4a34      	ldr	r2, [pc, #208]	; (8000410 <AUDIO_DFSDM_MEMS_MicInit+0x138>)
 8000340:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO*/
  mic->volume                           = VOLUME_DB_256_TO_PERCENT(audio_description->audio_volume_db_256); /* add here the volume in db_256 */
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	68db      	ldr	r3, [r3, #12]
 8000346:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800034a:	2264      	movs	r2, #100	; 0x64
 800034c:	fb02 f303 	mul.w	r3, r2, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	da03      	bge.n	800035c <AUDIO_DFSDM_MEMS_MicInit+0x84>
 8000354:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000358:	441a      	add	r2, r3
 800035a:	4613      	mov	r3, r2
 800035c:	139b      	asrs	r3, r3, #14
 800035e:	b2da      	uxtb	r2, r3
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	769a      	strb	r2, [r3, #26]
  mic->packet_length                    = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(audio_description);
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a2a      	ldr	r2, [pc, #168]	; (8000414 <AUDIO_DFSDM_MEMS_MicInit+0x13c>)
 800036a:	fba2 2303 	umull	r2, r3, r2, r3
 800036e:	099b      	lsrs	r3, r3, #6
 8000370:	b29a      	uxth	r2, r3
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	791b      	ldrb	r3, [r3, #4]
 8000376:	b29b      	uxth	r3, r3
 8000378:	fb12 f303 	smulbb	r3, r2, r3
 800037c:	b29a      	uxth	r2, r3
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	7c5b      	ldrb	r3, [r3, #17]
 8000382:	b29b      	uxth	r3, r3
 8000384:	fb12 f303 	smulbb	r3, r2, r3
 8000388:	b29a      	uxth	r2, r3
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	831a      	strh	r2, [r3, #24]
  /* add specific mic init operations here */
  BSP_AUDIO_IN_Init(audio_description->frequency, audio_description->resolution, audio_description->channels_count);
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	6818      	ldr	r0, [r3, #0]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	7c5b      	ldrb	r3, [r3, #17]
 8000396:	4619      	mov	r1, r3
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	461a      	mov	r2, r3
 800039e:	f000 fbbd 	bl	8000b1c <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_AllocScratch (mic->specific.scratch, (AUDIO_SAMPLE_COUNT_LENGTH(USB_AUDIO_CONFIG_RECORD_FREQ_MAX))<<2);
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	3340      	adds	r3, #64	; 0x40
 80003a6:	21c0      	movs	r1, #192	; 0xc0
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 fbf5 	bl	8000b98 <BSP_AUDIO_IN_AllocScratch>
  mic->specific.packet_sample_count = AUDIO_PACKET_SAMPLES_COUNT(audio_description->frequency);
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a18      	ldr	r2, [pc, #96]	; (8000414 <AUDIO_DFSDM_MEMS_MicInit+0x13c>)
 80003b4:	fba2 2303 	umull	r2, r3, r2, r3
 80003b8:	099b      	lsrs	r3, r3, #6
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	f8a3 2342 	strh.w	r2, [r3, #834]	; 0x342
  mic->specific.packet_sample_size = AUDIO_SAMPLE_LENGTH(audio_description);
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	791a      	ldrb	r2, [r3, #4]
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	7c5b      	ldrb	r3, [r3, #17]
 80003ca:	fb12 f303 	smulbb	r3, r2, r3
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
  AUDIO_MicHandler = mic;
 80003d6:	4a10      	ldr	r2, [pc, #64]	; (8000418 <AUDIO_DFSDM_MEMS_MicInit+0x140>)
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	6013      	str	r3, [r2, #0]
  BSP_AUDIO_IN_Record(0,0);
 80003dc:	2100      	movs	r1, #0
 80003de:	2000      	movs	r0, #0
 80003e0:	f000 fc0e 	bl	8000c00 <BSP_AUDIO_IN_Record>
  return 0;
 80003e4:	2300      	movs	r3, #0
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	0800041d 	.word	0x0800041d
 80003f4:	0800044f 	.word	0x0800044f
 80003f8:	0800047f 	.word	0x0800047f
 80003fc:	080004a7 	.word	0x080004a7
 8000400:	080004d7 	.word	0x080004d7
 8000404:	080004f5 	.word	0x080004f5
 8000408:	08000535 	.word	0x08000535
 800040c:	0800056d 	.word	0x0800056d
 8000410:	08000585 	.word	0x08000585
 8000414:	10624dd3 	.word	0x10624dd3
 8000418:	200001ac 	.word	0x200001ac

0800041c <AUDIO_MicDeInit>:
  *         De-Initializes the audio mic node 
  * @param  node_handle: mic node handle must be initialized
  * @retval  : 0 if no error
  */
static int8_t  AUDIO_MicDeInit(uint32_t node_handle)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  AUDIO_MicNode_t* mic;
  
  mic = (AUDIO_MicNode_t*)node_handle;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	60fb      	str	r3, [r7, #12]
  
  if(mic->node.state != AUDIO_NODE_OFF)
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d009      	beq.n	8000444 <AUDIO_MicDeInit+0x28>
  {
    if(mic->node.state == AUDIO_NODE_STARTED)
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b02      	cmp	r3, #2
 8000436:	d102      	bne.n	800043e <AUDIO_MicDeInit+0x22>
    {
      AUDIO_MicStop(node_handle);
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f000 f820 	bl	800047e <AUDIO_MicStop>
    }
/* add Mic denit operations here*/
    mic->node.state = AUDIO_NODE_OFF;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
  }
  
    return 0;
 8000444:	2300      	movs	r3, #0
}
 8000446:	4618      	mov	r0, r3
 8000448:	3710      	adds	r7, #16
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <AUDIO_MicStart>:
  * @param  buffer:      Audio data buffer       
  * @param  node_handle: mic node handle must be initialized
  * @retval 0 if no error
  */
static int8_t  AUDIO_MicStart(AUDIO_CircularBuffer_t* buffer ,  uint32_t node_handle)
{
 800044e:	b480      	push	{r7}
 8000450:	b085      	sub	sp, #20
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	6039      	str	r1, [r7, #0]
  AUDIO_MicNode_t* mic;
  mic=(AUDIO_MicNode_t*)node_handle;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	60fb      	str	r3, [r7, #12]

  if(mic->node.state != AUDIO_NODE_STARTED)
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b02      	cmp	r3, #2
 8000462:	d005      	beq.n	8000470 <AUDIO_MicStart+0x22>
  {
    mic->node.state = AUDIO_NODE_STARTED;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	2202      	movs	r2, #2
 8000468:	701a      	strb	r2, [r3, #0]
    mic->buf        = buffer;
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	615a      	str	r2, [r3, #20]
  }
  /* add  Mic start code here*/
    return 0;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <AUDIO_MicStop>:
  *         stop the audio mic node 
  * @param  node_handle: mic node handle must be initialized
  * @retval  : 0 if no error
  */
static int8_t  AUDIO_MicStop( uint32_t node_handle)
{
 800047e:	b480      	push	{r7}
 8000480:	b085      	sub	sp, #20
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
    
  AUDIO_MicNode_t* mic;
  mic = (AUDIO_MicNode_t*)node_handle;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	60fb      	str	r3, [r7, #12]

  if(mic->node.state == AUDIO_NODE_STARTED)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b02      	cmp	r3, #2
 8000490:	d102      	bne.n	8000498 <AUDIO_MicStop+0x1a>
  {
    mic->node.state = AUDIO_NODE_STOPPED;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
  }
    /* add  Mic stop code here*/
    return 0;
 8000498:	2300      	movs	r3, #0
}
 800049a:	4618      	mov	r0, r3
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <AUDIO_MicChangeFrequency>:
  *         change mic frequency 
  * @param  node_handle: mic node handle must be initialized
  * @retval  : 0 if no error
  */
static int8_t  AUDIO_MicChangeFrequency( uint32_t node_handle)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b084      	sub	sp, #16
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
	/* add Mic change frequency  code here*/
	AUDIO_MicNode_t* mic;
	mic=(AUDIO_MicNode_t*)node_handle;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	60fb      	str	r3, [r7, #12]

	if(mic->node.state == AUDIO_NODE_STARTED)
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d108      	bne.n	80004cc <AUDIO_MicChangeFrequency+0x26>
	{
		AUDIO_MicStop(node_handle);
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f7ff ffdf 	bl	800047e <AUDIO_MicStop>
		AUDIO_MicStart(mic->buf, node_handle);
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	6879      	ldr	r1, [r7, #4]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ffc1 	bl	800044e <AUDIO_MicStart>
	}
	return 0;
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <AUDIO_MicMute>:
  * @brief  AUDIO_MicMute
  *         mute  mic 
  * @retval  : 0 if no error
  */
static int8_t  AUDIO_MicMute(uint16_t channel_number,  uint8_t mute , uint32_t node_handle)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b083      	sub	sp, #12
 80004da:	af00      	add	r7, sp, #0
 80004dc:	4603      	mov	r3, r0
 80004de:	603a      	str	r2, [r7, #0]
 80004e0:	80fb      	strh	r3, [r7, #6]
 80004e2:	460b      	mov	r3, r1
 80004e4:	717b      	strb	r3, [r7, #5]
    /* add  Mic mute code here*/
  return 0;
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <AUDIO_MicSetVolume>:
  * @param  volume_db_256  : description is missing
  * @param  node_handle      mic  node handle
  * @retval 0 if no error
  */
static int8_t  AUDIO_MicSetVolume( uint16_t channel_number,  int volume_db_256 ,  uint32_t node_handle)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
 8000500:	81fb      	strh	r3, [r7, #14]
	/* add  Mic set volume code here*/
	((AUDIO_MicNode_t*)node_handle)->volume = VOLUME_DB_256_TO_PERCENT(volume_db_256);
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000508:	2264      	movs	r2, #100	; 0x64
 800050a:	fb02 f303 	mul.w	r3, r2, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	da03      	bge.n	800051a <AUDIO_MicSetVolume+0x26>
 8000512:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000516:	441a      	add	r2, r3
 8000518:	4613      	mov	r3, r2
 800051a:	139b      	asrs	r3, r3, #14
 800051c:	461a      	mov	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	769a      	strb	r2, [r3, #26]

	/* No action  currently not supported  call*/

	return 0;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <AUDIO_MicGetVolumeDefaultsValues>:
  * @param  vol_res             
  * @param  node_handle         
  * @retval 0 if no error
  */
static int8_t  AUDIO_MicGetVolumeDefaultsValues( int* vol_max, int* vol_min, int* vol_res, uint32_t node_handle)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
 8000540:	603b      	str	r3, [r7, #0]
	/* Change next values */
	*vol_max = MEMS_VOLUME_MIC_MAX_DB_256;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000548:	601a      	str	r2, [r3, #0]
	*vol_min = MEMS_VOLUME_MIC_MIN_DB_256;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <AUDIO_MicGetVolumeDefaultsValues+0x34>)
 800054e:	601a      	str	r2, [r3, #0]
	*vol_res = MEMS_VOLUME_MIC_RES_DB_256;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000556:	601a      	str	r2, [r3, #0]
	return 0;
 8000558:	2300      	movs	r3, #0
}
 800055a:	4618      	mov	r0, r3
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	ffffe000 	.word	0xffffe000

0800056c <AUDIO_MicStartReadCount>:
  *         Start a count to compute read bytes from mic each ms 
  * @param  node_handle: mic node handle must be started
  * @retval  : 0 if no error
  */
static int8_t  AUDIO_MicStartReadCount( uint32_t node_handle)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
//	{
//		/* read remained value in dma buffer */
//		mic->specific.dma_remaining =__HAL_DMA_GET_COUNTER(&hDmaTopRight);
//		return 0;
//	}
	return -1;
 8000574:	f04f 33ff 	mov.w	r3, #4294967295
} 
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <AUDIO_MicGetLastReadCount>:
  *         read the number of bytes that was read in the last 1ms 
  * @param  node_handle: mic node handle must be started
  * @retval number of read bytes, 0 if an error
  */    
static uint16_t  AUDIO_MicGetLastReadCount( uint32_t node_handle)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
//				((mic->specific.packet_sample_count<<1) - remaining_data_count) + mic->specific.dma_remaining;
//
//		mic->specific.dma_remaining = remaining_data_count;
//		return read_samples*AUDIO_MicHandler->specific.packet_sample_size;
//	}
	return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f001 fbcb 	bl	8001d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f805 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f885 	bl	80006b4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005aa:	f00c fd6f 	bl	800d08c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <main+0x14>

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09c      	sub	sp, #112	; 0x70
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ba:	224c      	movs	r2, #76	; 0x4c
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f00d faca 	bl	800db58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2220      	movs	r2, #32
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00d fac4 	bl	800db58 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005d0:	2002      	movs	r0, #2
 80005d2:	f005 ff31 	bl	8006438 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b34      	ldr	r3, [pc, #208]	; (80006ac <SystemClock_Config+0xfc>)
 80005dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005de:	4a33      	ldr	r2, [pc, #204]	; (80006ac <SystemClock_Config+0xfc>)
 80005e0:	f023 0301 	bic.w	r3, r3, #1
 80005e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005e6:	4b31      	ldr	r3, [pc, #196]	; (80006ac <SystemClock_Config+0xfc>)
 80005e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <SystemClock_Config+0x100>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f8:	4a2d      	ldr	r2, [pc, #180]	; (80006b0 <SystemClock_Config+0x100>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <SystemClock_Config+0x100>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800060c:	bf00      	nop
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <SystemClock_Config+0x100>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800061a:	d1f8      	bne.n	800060e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800061c:	2321      	movs	r3, #33	; 0x21
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	; 0x30
//  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800062a:	2301      	movs	r3, #1
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	2302      	movs	r3, #2
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000636:	2319      	movs	r3, #25
 8000638:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 384;
 800063a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800063e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000640:	2302      	movs	r3, #2
 8000642:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 13;
 8000644:	230d      	movs	r3, #13
 8000646:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800064c:	2300      	movs	r3, #0
 800064e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000650:	2300      	movs	r3, #0
 8000652:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065c:	4618      	mov	r0, r3
 800065e:	f005 ff35 	bl	80064cc <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000668:	f000 f844 	bl	80006f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	233f      	movs	r3, #63	; 0x3f
 800066e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2303      	movs	r3, #3
 8000672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800067c:	2340      	movs	r3, #64	; 0x40
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000680:	2340      	movs	r3, #64	; 0x40
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000688:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800068a:	2340      	movs	r3, #64	; 0x40
 800068c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f006 fb2a 	bl	8006cec <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800069e:	f000 f829 	bl	80006f4 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3770      	adds	r7, #112	; 0x70
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	58000400 	.word	0x58000400
 80006b0:	58024800 	.word	0x58024800

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_GPIO_Init+0x30>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <MX_GPIO_Init+0x30>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_GPIO_Init+0x30>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	58024400 	.word	0x58024400

080006e8 <USBD_error_handler>:

/* USER CODE BEGIN 4 */
void USBD_error_handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  Error_Handler();
 80006ec:	f000 f802 	bl	80006f4 <Error_Handler>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_MspInit+0x30>)
 8000708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800070c:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_MspInit+0x30>)
 800070e:	f043 0302 	orr.w	r3, r3, #2
 8000712:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_MspInit+0x30>)
 8000718:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800071c:	f003 0302 	and.w	r3, r3, #2
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	58024400 	.word	0x58024400

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <NMI_Handler+0x4>

0800073a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>

08000746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler+0x4>

08000752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000780:	f001 fb4c 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <OTG_FS_IRQHandler+0x10>)
 800078e:	f004 fda2 	bl	80052d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	2000124c 	.word	0x2000124c

0800079c <DMA1_Stream0_IRQHandler>:

/* USER CODE BEGIN 1 */

void DMA1_Stream0_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(hAudioInTopLeftFilter.hdmaReg);
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <DMA1_Stream0_IRQHandler+0x14>)
 80007a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 ff71 	bl	800368c <HAL_DMA_IRQHandler>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000a14 	.word	0x20000a14

080007b4 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(hAudioInTopRightFilter.hdmaReg);
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <DMA1_Stream1_IRQHandler+0x14>)
 80007ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 ff65 	bl	800368c <HAL_DMA_IRQHandler>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000c54 	.word	0x20000c54

080007cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d4:	4a14      	ldr	r2, [pc, #80]	; (8000828 <_sbrk+0x5c>)
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <_sbrk+0x60>)
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <_sbrk+0x64>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <_sbrk+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d207      	bcs.n	800080c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007fc:	f00d f964 	bl	800dac8 <__errno>
 8000800:	4603      	mov	r3, r0
 8000802:	220c      	movs	r2, #12
 8000804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	e009      	b.n	8000820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <_sbrk+0x64>)
 800081c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20020000 	.word	0x20020000
 800082c:	00000400 	.word	0x00000400
 8000830:	200001b0 	.word	0x200001b0
 8000834:	20001668 	.word	0x20001668

08000838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800083c:	4b39      	ldr	r3, [pc, #228]	; (8000924 <SystemInit+0xec>)
 800083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000842:	4a38      	ldr	r2, [pc, #224]	; (8000924 <SystemInit+0xec>)
 8000844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800084c:	4b36      	ldr	r3, [pc, #216]	; (8000928 <SystemInit+0xf0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f003 030f 	and.w	r3, r3, #15
 8000854:	2b06      	cmp	r3, #6
 8000856:	d807      	bhi.n	8000868 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000858:	4b33      	ldr	r3, [pc, #204]	; (8000928 <SystemInit+0xf0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f023 030f 	bic.w	r3, r3, #15
 8000860:	4a31      	ldr	r2, [pc, #196]	; (8000928 <SystemInit+0xf0>)
 8000862:	f043 0307 	orr.w	r3, r3, #7
 8000866:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000868:	4b30      	ldr	r3, [pc, #192]	; (800092c <SystemInit+0xf4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a2f      	ldr	r2, [pc, #188]	; (800092c <SystemInit+0xf4>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000874:	4b2d      	ldr	r3, [pc, #180]	; (800092c <SystemInit+0xf4>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <SystemInit+0xf4>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	492b      	ldr	r1, [pc, #172]	; (800092c <SystemInit+0xf4>)
 8000880:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <SystemInit+0xf8>)
 8000882:	4013      	ands	r3, r2
 8000884:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000886:	4b28      	ldr	r3, [pc, #160]	; (8000928 <SystemInit+0xf0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	2b00      	cmp	r3, #0
 8000890:	d007      	beq.n	80008a2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <SystemInit+0xf0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f023 030f 	bic.w	r3, r3, #15
 800089a:	4a23      	ldr	r2, [pc, #140]	; (8000928 <SystemInit+0xf0>)
 800089c:	f043 0307 	orr.w	r3, r3, #7
 80008a0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <SystemInit+0xf4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <SystemInit+0xf4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <SystemInit+0xf4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <SystemInit+0xf4>)
 80008b6:	4a1f      	ldr	r2, [pc, #124]	; (8000934 <SystemInit+0xfc>)
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <SystemInit+0xf4>)
 80008bc:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <SystemInit+0x100>)
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <SystemInit+0xf4>)
 80008c2:	4a1e      	ldr	r2, [pc, #120]	; (800093c <SystemInit+0x104>)
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <SystemInit+0xf4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <SystemInit+0xf4>)
 80008ce:	4a1b      	ldr	r2, [pc, #108]	; (800093c <SystemInit+0x104>)
 80008d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <SystemInit+0xf4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <SystemInit+0xf4>)
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <SystemInit+0x104>)
 80008dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <SystemInit+0xf4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <SystemInit+0xf4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a10      	ldr	r2, [pc, #64]	; (800092c <SystemInit+0xf4>)
 80008ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <SystemInit+0xf4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <SystemInit+0x108>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <SystemInit+0x10c>)
 80008fc:	4013      	ands	r3, r2
 80008fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000902:	d202      	bcs.n	800090a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <SystemInit+0x110>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <SystemInit+0x114>)
 800090c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000910:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000912:	4b04      	ldr	r3, [pc, #16]	; (8000924 <SystemInit+0xec>)
 8000914:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000918:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00
 8000928:	52002000 	.word	0x52002000
 800092c:	58024400 	.word	0x58024400
 8000930:	eaf6ed7f 	.word	0xeaf6ed7f
 8000934:	02020200 	.word	0x02020200
 8000938:	01ff0000 	.word	0x01ff0000
 800093c:	01010280 	.word	0x01010280
 8000940:	5c001000 	.word	0x5c001000
 8000944:	ffff0000 	.word	0xffff0000
 8000948:	51008108 	.word	0x51008108
 800094c:	52004000 	.word	0x52004000

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000954:	f7ff ff70 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f00d f8a9 	bl	800dad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f7ff fe0a 	bl	800059a <main>
  bx  lr
 8000986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000994:	0800dd78 	.word	0x0800dd78
  ldr r2, =_sbss
 8000998:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800099c:	20001664 	.word	0x20001664

080009a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC3_IRQHandler>
	...

080009a4 <SAI_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
static void SAI_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 80009ae:	4b55      	ldr	r3, [pc, #340]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 80009b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009b4:	4a53      	ldr	r2, [pc, #332]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 80009b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80009be:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 80009c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80009c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c8:	61bb      	str	r3, [r7, #24]
 80009ca:	69bb      	ldr	r3, [r7, #24]

  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a4c      	ldr	r2, [pc, #304]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 80009d4:	f043 0310 	orr.w	r3, r3, #16
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b49      	ldr	r3, [pc, #292]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80009ea:	2308      	movs	r3, #8
 80009ec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 80009fa:	2306      	movs	r3, #6
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4840      	ldr	r0, [pc, #256]	; (8000b08 <SAI_AUDIO_IN_MspInit+0x164>)
 8000a06:	f004 f95f 	bl	8004cc8 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8000a0a:	4b3e      	ldr	r3, [pc, #248]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	4a3c      	ldr	r2, [pc, #240]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 8000a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1a:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4832      	ldr	r0, [pc, #200]	; (8000b0c <SAI_AUDIO_IN_MspInit+0x168>)
 8000a42:	f004 f941 	bl	8004cc8 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8000a46:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 8000a48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a4c:	4a2d      	ldr	r2, [pc, #180]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a56:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <SAI_AUDIO_IN_MspInit+0x160>)
 8000a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]

  if(hsai->Instance == AUDIO_IN_SAIx)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a29      	ldr	r2, [pc, #164]	; (8000b10 <SAI_AUDIO_IN_MspInit+0x16c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d135      	bne.n	8000ada <SAI_AUDIO_IN_MspInit+0x136>
  {
    /* Configure the hdma_sai_rx handle parameters */
//    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000a6e:	4b29      	ldr	r3, [pc, #164]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a80:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a88:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000a8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a90:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a98:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000a9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aa0:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000aaa:	2203      	movs	r2, #3
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000abc:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <SAI_AUDIO_IN_MspInit+0x174>)
 8000abe:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000ac8:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8000ace:	4811      	ldr	r0, [pc, #68]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000ad0:	f002 f9bc 	bl	8002e4c <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8000ad4:	480f      	ldr	r0, [pc, #60]	; (8000b14 <SAI_AUDIO_IN_MspInit+0x170>)
 8000ad6:	f001 fe5d 	bl	8002794 <HAL_DMA_Init>
  }

  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2104      	movs	r1, #4
 8000ade:	203c      	movs	r0, #60	; 0x3c
 8000ae0:	f001 fac7 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8000ae4:	203c      	movs	r0, #60	; 0x3c
 8000ae6:	f001 fade 	bl	80020a6 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2104      	movs	r1, #4
 8000aee:	2028      	movs	r0, #40	; 0x28
 8000af0:	f001 fabf 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8000af4:	2028      	movs	r0, #40	; 0x28
 8000af6:	f001 fad6 	bl	80020a6 <HAL_NVIC_EnableIRQ>
}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	; 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	58024400 	.word	0x58024400
 8000b08:	58021000 	.word	0x58021000
 8000b0c:	58022400 	.word	0x58022400
 8000b10:	40015824 	.word	0x40015824
 8000b14:	200001ec 	.word	0x200001ec
 8000b18:	40020470 	.word	0x40020470

08000b1c <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured for the DFSDM peripheral.
  * @param  ChnlNbr: Audio frequency to be configured for the DFSDM peripheral.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MIC, AudioFreq, BitRes, ChnlNbr);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	68f9      	ldr	r1, [r7, #12]
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f806 	bl	8000b40 <BSP_AUDIO_IN_InitEx>
 8000b34:	4603      	mov	r3, r0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <BSP_AUDIO_IN_InitEx>:
  * @param  BitRes: Audio bit resolution to be configured..
  * @param  ChnlNbr: Number of channel to be configured.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_InitEx(uint16_t InputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = AUDIO_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	75fb      	strb	r3, [r7, #23]
  AudioIn_Device = InputDevice;
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <BSP_AUDIO_IN_InitEx+0x4c>)
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	8013      	strh	r3, [r2, #0]

  if(InputDevice == INPUT_DEVICE_DIGITAL_MIC)
 8000b5a:	89fb      	ldrh	r3, [r7, #14]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d10f      	bne.n	8000b80 <BSP_AUDIO_IN_InitEx+0x40>
  {
    AudioIn_ChannelNumber = ChnlNbr;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <BSP_AUDIO_IN_InitEx+0x50>)
 8000b66:	701a      	strb	r2, [r3, #0]
    /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_IN_ClockConfig(&hAudioInTopLeftFilter, AudioFreq, NULL);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	68b9      	ldr	r1, [r7, #8]
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <BSP_AUDIO_IN_InitEx+0x54>)
 8000b6e:	f000 f9af 	bl	8000ed0 <BSP_AUDIO_IN_ClockConfig>

    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_IN_MspInit();
 8000b72:	f000 f997 	bl	8000ea4 <BSP_AUDIO_IN_MspInit>

    /* Initializes DFSDM peripheral */
    DFSDMx_Init(AudioFreq);
 8000b76:	68b8      	ldr	r0, [r7, #8]
 8000b78:	f000 f9e8 	bl	8000f4c <DFSDMx_Init>
    ret = AUDIO_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	75fb      	strb	r3, [r7, #23]
//      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq,16);
//    }
  }

  /* Return AUDIO_OK when all operations are correctly done */
  return ret;
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001c8 	.word	0x200001c8
 8000b90:	20000008 	.word	0x20000008
 8000b94:	20000a14 	.word	0x20000a14

08000b98 <BSP_AUDIO_IN_AllocScratch>:
  * @brief  Allocate channel buffer scratch
  * @param  pScratch : pointer to scratch tables.
  * @param  size of scratch buffer
  */
uint8_t BSP_AUDIO_IN_AllocScratch (int32_t *pScratch, uint32_t size)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t idx;

  ScratchSize = (size / AudioIn_ChannelNumber);
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <BSP_AUDIO_IN_AllocScratch+0x5c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <BSP_AUDIO_IN_AllocScratch+0x60>)
 8000bb2:	601a      	str	r2, [r3, #0]

  /* copy scratch pointers */
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	e00f      	b.n	8000bda <BSP_AUDIO_IN_AllocScratch+0x42>
  {
    pScratchBuff[idx] = (int32_t *)(pScratch + (idx * ScratchSize));
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <BSP_AUDIO_IN_AllocScratch+0x60>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	fb03 f302 	mul.w	r3, r3, r2
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	441a      	add	r2, r3
 8000bcc:	490b      	ldr	r1, [pc, #44]	; (8000bfc <BSP_AUDIO_IN_AllocScratch+0x64>)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <BSP_AUDIO_IN_AllocScratch+0x5c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d3e9      	bcc.n	8000bba <BSP_AUDIO_IN_AllocScratch+0x22>
  }
  /* Return AUDIO_OK */
  return AUDIO_OK;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	200001c4 	.word	0x200001c4
 8000bfc:	200001b4 	.word	0x200001b4

08000c00 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <BSP_AUDIO_IN_Record+0xa4>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d137      	bne.n	8000c82 <BSP_AUDIO_IN_Record+0x82>
  {

    if(AudioIn_ChannelNumber > 2)
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <BSP_AUDIO_IN_Record+0xa8>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d919      	bls.n	8000c4e <BSP_AUDIO_IN_Record+0x4e>
    {
      /* Call the Media layer start function for buttom right channel */
      if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomRightFilter, pScratchBuff[2], ScratchSize))
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <BSP_AUDIO_IN_Record+0xac>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	4a24      	ldr	r2, [pc, #144]	; (8000cb0 <BSP_AUDIO_IN_Record+0xb0>)
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4823      	ldr	r0, [pc, #140]	; (8000cb4 <BSP_AUDIO_IN_Record+0xb4>)
 8000c26:	f001 fc57 	bl	80024d8 <HAL_DFSDM_FilterRegularStart_DMA>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <BSP_AUDIO_IN_Record+0x34>
      {
        return AUDIO_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e033      	b.n	8000c9c <BSP_AUDIO_IN_Record+0x9c>
      }

      /* Call the Media layer start function for buttom left channel */
      if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomLeftFilter, pScratchBuff[3], ScratchSize))
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <BSP_AUDIO_IN_Record+0xac>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	4a1d      	ldr	r2, [pc, #116]	; (8000cb0 <BSP_AUDIO_IN_Record+0xb0>)
 8000c3a:	6812      	ldr	r2, [r2, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481e      	ldr	r0, [pc, #120]	; (8000cb8 <BSP_AUDIO_IN_Record+0xb8>)
 8000c40:	f001 fc4a 	bl	80024d8 <HAL_DFSDM_FilterRegularStart_DMA>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <BSP_AUDIO_IN_Record+0x4e>
      {
        return AUDIO_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e026      	b.n	8000c9c <BSP_AUDIO_IN_Record+0x9c>
      }
    }

    /* Call the Media layer start function for top right channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopRightFilter, pScratchBuff[0], ScratchSize))
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <BSP_AUDIO_IN_Record+0xac>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a17      	ldr	r2, [pc, #92]	; (8000cb0 <BSP_AUDIO_IN_Record+0xb0>)
 8000c54:	6812      	ldr	r2, [r2, #0]
 8000c56:	4619      	mov	r1, r3
 8000c58:	4818      	ldr	r0, [pc, #96]	; (8000cbc <BSP_AUDIO_IN_Record+0xbc>)
 8000c5a:	f001 fc3d 	bl	80024d8 <HAL_DFSDM_FilterRegularStart_DMA>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <BSP_AUDIO_IN_Record+0x68>
    {
      return AUDIO_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e019      	b.n	8000c9c <BSP_AUDIO_IN_Record+0x9c>
    }

    /* Call the Media layer start function for top left channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopLeftFilter, pScratchBuff[1], ScratchSize))
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <BSP_AUDIO_IN_Record+0xac>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <BSP_AUDIO_IN_Record+0xb0>)
 8000c6e:	6812      	ldr	r2, [r2, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <BSP_AUDIO_IN_Record+0xc0>)
 8000c74:	f001 fc30 	bl	80024d8 <HAL_DFSDM_FilterRegularStart_DMA>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d00d      	beq.n	8000c9a <BSP_AUDIO_IN_Record+0x9a>
    {
      return AUDIO_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00c      	b.n	8000c9c <BSP_AUDIO_IN_Record+0x9c>
    }
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_OK !=HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size))
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	480e      	ldr	r0, [pc, #56]	; (8000cc4 <BSP_AUDIO_IN_Record+0xc4>)
 8000c8c:	f007 fd9e 	bl	80087cc <HAL_SAI_Receive_DMA>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <BSP_AUDIO_IN_Record+0x9a>
    {
      return AUDIO_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <BSP_AUDIO_IN_Record+0x9c>
    }
  }
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200001c8 	.word	0x200001c8
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	200001b4 	.word	0x200001b4
 8000cb0:	200001c4 	.word	0x200001c4
 8000cb4:	20000818 	.word	0x20000818
 8000cb8:	20000bc8 	.word	0x20000bc8
 8000cbc:	20000c54 	.word	0x20000c54
 8000cc0:	20000a14 	.word	0x20000a14
 8000cc4:	2000086c 	.word	0x2000086c

08000cc8 <HAL_DFSDM_FilterRegConvCpltCallback>:
            using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  if(hdfsdm_filter == &hAudioInTopLeftFilter)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <HAL_DFSDM_FilterRegConvCpltCallback+0xac>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d103      	bne.n	8000ce0 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaTopLeftRecCplt = 1;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <HAL_DFSDM_FilterRegConvCpltCallback+0xb0>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e012      	b.n	8000d06 <HAL_DFSDM_FilterRegConvCpltCallback+0x3e>
  }
  else if(hdfsdm_filter == &hAudioInTopRightFilter)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a26      	ldr	r2, [pc, #152]	; (8000d7c <HAL_DFSDM_FilterRegConvCpltCallback+0xb4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d103      	bne.n	8000cf0 <HAL_DFSDM_FilterRegConvCpltCallback+0x28>
  {
    DmaTopRightRecCplt = 1;
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	e00a      	b.n	8000d06 <HAL_DFSDM_FilterRegConvCpltCallback+0x3e>
  }
  else if(hdfsdm_filter == &hAudioInButtomLeftFilter)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a24      	ldr	r2, [pc, #144]	; (8000d84 <HAL_DFSDM_FilterRegConvCpltCallback+0xbc>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d103      	bne.n	8000d00 <HAL_DFSDM_FilterRegConvCpltCallback+0x38>
  {
    DmaButtomLeftRecCplt = 1;
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <HAL_DFSDM_FilterRegConvCpltCallback+0xc0>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	e002      	b.n	8000d06 <HAL_DFSDM_FilterRegConvCpltCallback+0x3e>
  }
  else
  {
    DmaButtomRightRecCplt = 1;
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <HAL_DFSDM_FilterRegConvCpltCallback+0xc4>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	601a      	str	r2, [r3, #0]
  }

  if(AudioIn_ChannelNumber > 2)
 8000d06:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <HAL_DFSDM_FilterRegConvCpltCallback+0xc8>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d91e      	bls.n	8000d4c <HAL_DFSDM_FilterRegConvCpltCallback+0x84>
  {
    if((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1) && (DmaButtomLeftRecCplt == 1) && (DmaButtomRightRecCplt == 1))
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_DFSDM_FilterRegConvCpltCallback+0xb0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d12a      	bne.n	8000d6c <HAL_DFSDM_FilterRegConvCpltCallback+0xa4>
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d126      	bne.n	8000d6c <HAL_DFSDM_FilterRegConvCpltCallback+0xa4>
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <HAL_DFSDM_FilterRegConvCpltCallback+0xc0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d122      	bne.n	8000d6c <HAL_DFSDM_FilterRegConvCpltCallback+0xa4>
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_DFSDM_FilterRegConvCpltCallback+0xc4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d11e      	bne.n	8000d6c <HAL_DFSDM_FilterRegConvCpltCallback+0xa4>
    {
      DmaTopLeftRecCplt  = 0;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_DFSDM_FilterRegConvCpltCallback+0xb0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
      DmaTopRightRecCplt = 0;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
      DmaButtomLeftRecCplt  = 0;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <HAL_DFSDM_FilterRegConvCpltCallback+0xc0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
      DmaButtomRightRecCplt = 0;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_DFSDM_FilterRegConvCpltCallback+0xc4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_IN_TransferComplete_CallBack();
 8000d46:	f000 f89f 	bl	8000e88 <BSP_AUDIO_IN_TransferComplete_CallBack>
      DmaTopLeftRecCplt  = 0;
      DmaTopRightRecCplt = 0;
      BSP_AUDIO_IN_TransferComplete_CallBack();
    }
  }
}
 8000d4a:	e00f      	b.n	8000d6c <HAL_DFSDM_FilterRegConvCpltCallback+0xa4>
    if((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1))
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_DFSDM_FilterRegConvCpltCallback+0xb0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d10b      	bne.n	8000d6c <HAL_DFSDM_FilterRegConvCpltCallback+0xa4>
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d107      	bne.n	8000d6c <HAL_DFSDM_FilterRegConvCpltCallback+0xa4>
      DmaTopLeftRecCplt  = 0;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_DFSDM_FilterRegConvCpltCallback+0xb0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
      DmaTopRightRecCplt = 0;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <HAL_DFSDM_FilterRegConvCpltCallback+0xb8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_IN_TransferComplete_CallBack();
 8000d68:	f000 f88e 	bl	8000e88 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000a14 	.word	0x20000a14
 8000d78:	200001d0 	.word	0x200001d0
 8000d7c:	20000c54 	.word	0x20000c54
 8000d80:	200001d8 	.word	0x200001d8
 8000d84:	20000bc8 	.word	0x20000bc8
 8000d88:	200001e0 	.word	0x200001e0
 8000d8c:	200001e8 	.word	0x200001e8
 8000d90:	20000008 	.word	0x20000008

08000d94 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  if(hdfsdm_filter == &hAudioInTopLeftFilter)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xac>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d103      	bne.n	8000dac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaTopLeftRecHalfCplt = 1;
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb0>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	e012      	b.n	8000dd2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3e>
  }
  else if(hdfsdm_filter == &hAudioInTopRightFilter)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a26      	ldr	r2, [pc, #152]	; (8000e48 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d103      	bne.n	8000dbc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x28>
  {
    DmaTopRightRecHalfCplt = 1;
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	e00a      	b.n	8000dd2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3e>
  }
  else if(hdfsdm_filter == &hAudioInButtomLeftFilter)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xbc>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d103      	bne.n	8000dcc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x38>
  {
    DmaButtomLeftRecHalfCplt = 1;
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc0>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e002      	b.n	8000dd2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3e>
  }
  else
  {
    DmaButtomRightRecHalfCplt = 1;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc4>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  if(AudioIn_ChannelNumber > 2)
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc8>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d91e      	bls.n	8000e18 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x84>
  {
    if((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1) && (DmaButtomLeftRecHalfCplt == 1) && (DmaButtomRightRecHalfCplt == 1))
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d12a      	bne.n	8000e38 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xa4>
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d126      	bne.n	8000e38 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xa4>
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d122      	bne.n	8000e38 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xa4>
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d11e      	bne.n	8000e38 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xa4>
    {
      DmaTopLeftRecHalfCplt  = 0;
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
      DmaTopRightRecHalfCplt = 0;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
      DmaButtomLeftRecHalfCplt  = 0;
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
      DmaButtomRightRecHalfCplt = 0;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_IN_HalfTransfer_CallBack();
 8000e12:	f000 f840 	bl	8000e96 <BSP_AUDIO_IN_HalfTransfer_CallBack>
      DmaTopLeftRecHalfCplt  = 0;
      DmaTopRightRecHalfCplt = 0;
      BSP_AUDIO_IN_HalfTransfer_CallBack();
    }
  }
}
 8000e16:	e00f      	b.n	8000e38 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xa4>
    if((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1))
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d10b      	bne.n	8000e38 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xa4>
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d107      	bne.n	8000e38 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xa4>
      DmaTopLeftRecHalfCplt  = 0;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
      DmaTopRightRecHalfCplt = 0;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xb8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_IN_HalfTransfer_CallBack();
 8000e34:	f000 f82f 	bl	8000e96 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000a14 	.word	0x20000a14
 8000e44:	200001cc 	.word	0x200001cc
 8000e48:	20000c54 	.word	0x20000c54
 8000e4c:	200001d4 	.word	0x200001d4
 8000e50:	20000bc8 	.word	0x20000bc8
 8000e54:	200001dc 	.word	0x200001dc
 8000e58:	200001e4 	.word	0x200001e4
 8000e5c:	20000008 	.word	0x20000008

08000e60 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32769i_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8000e68:	f000 f815 	bl	8000e96 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8000e7c:	f000 f804 	bl	8000e88 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief  User callback when record buffer is filled.
  * @retval None
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user alication.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <BSP_AUDIO_IN_MspInit>:
/**
  * @brief  Initialize BSP_AUDIO_IN MSP.
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <BSP_AUDIO_IN_MspInit+0x24>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d104      	bne.n	8000eba <BSP_AUDIO_IN_MspInit+0x16>
  {
  /* MSP channels initialization */
  DFSDMx_ChannelMspInit();
 8000eb0:	f000 fdc2 	bl	8001a38 <DFSDMx_ChannelMspInit>
  /* MSP filters initialization */
  DFSDMx_FilterMspInit();
 8000eb4:	f000 fe26 	bl	8001b04 <DFSDMx_FilterMspInit>
  }
  else
  {
   SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
  }
}
 8000eb8:	e003      	b.n	8000ec2 <BSP_AUDIO_IN_MspInit+0x1e>
   SAI_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <BSP_AUDIO_IN_MspInit+0x28>)
 8000ebe:	f7ff fd71 	bl	80009a4 <SAI_AUDIO_IN_MspInit>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001c8 	.word	0x200001c8
 8000ecc:	2000086c 	.word	0x2000086c

08000ed0 <BSP_AUDIO_IN_ClockConfig>:
  *         Being __weak it can be overwritten by the application
  * @retval None
  */

__weak void BSP_AUDIO_IN_ClockConfig(DFSDM_Filter_HandleTypeDef *hdfsdm_filter, uint32_t AudioFreq, void *Params)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b0b4      	sub	sp, #208	; 0xd0
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f007 f9a3 	bl	800822c <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d01e      	beq.n	8000f2e <BSP_AUDIO_IN_ClockConfig+0x5e>
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	f245 6222 	movw	r2, #22050	; 0x5622
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <BSP_AUDIO_IN_ClockConfig+0x5e>
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d014      	beq.n	8000f2e <BSP_AUDIO_IN_ClockConfig+0x5e>
  {
    /* SAI clock config
    PLLSAI_VCO: VCO_344M
    SAI_CLK(first level) = PLLSAI_VCO/PLLSAIQ = 344/7 = 49.142 Mhz
    SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8000f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f08:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	66bb      	str	r3, [r7, #104]	; 0x68
    rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8000f0e:	2319      	movs	r3, #25
 8000f10:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 338;
 8000f12:	f44f 73a9 	mov.w	r3, #338	; 0x152
 8000f16:	61fb      	str	r3, [r7, #28]
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8000f18:	2307      	movs	r3, #7
 8000f1a:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLL2.PLL2Q = 2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    rcc_ex_clk_init_struct.PLL2.PLL2R = 2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28

    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f006 fa3f 	bl	80073ac <HAL_RCCEx_PeriphCLKConfig>
  }
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f32:	617b      	str	r3, [r7, #20]
  rcc_ex_clk_init_struct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	67fb      	str	r3, [r7, #124]	; 0x7c
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f006 fa35 	bl	80073ac <HAL_RCCEx_PeriphCLKConfig>
}
 8000f42:	bf00      	nop
 8000f44:	37d0      	adds	r7, #208	; 0xd0
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <DFSDMx_Init>:
  *           1MHZ < CLK(micro) < 3.2MHZ (TYP 2.4MHZ for MP34DT01TR)
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
static uint8_t DFSDMx_Init(uint32_t AudioFreq)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /****************************************************************************/
  /********************** Channels configuration  *****************************/
  /****************************************************************************/
  /* CHANNEL 1 configuration */
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopLeftChannel);
 8000f54:	4b99      	ldr	r3, [pc, #612]	; (80011bc <DFSDMx_Init+0x270>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hAudioInTopLeftChannel.Instance                      = DFSDM1_Channel1;
 8000f5c:	4b97      	ldr	r3, [pc, #604]	; (80011bc <DFSDMx_Init+0x270>)
 8000f5e:	4a98      	ldr	r2, [pc, #608]	; (80011c0 <DFSDMx_Init+0x274>)
 8000f60:	601a      	str	r2, [r3, #0]
  hAudioInTopLeftChannel.Init.OutputClock.Activation   = ENABLE;
 8000f62:	4b96      	ldr	r3, [pc, #600]	; (80011bc <DFSDMx_Init+0x270>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	711a      	strb	r2, [r3, #4]
  hAudioInTopLeftChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000f68:	4b94      	ldr	r3, [pc, #592]	; (80011bc <DFSDMx_Init+0x270>)
 8000f6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6e:	609a      	str	r2, [r3, #8]
  /* Set the DFSDM clock OUT audio frequency configuration */
  hAudioInTopLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000f76:	d029      	beq.n	8000fcc <DFSDMx_Init+0x80>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d022      	beq.n	8000fc8 <DFSDMx_Init+0x7c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000f88:	d01c      	beq.n	8000fc4 <DFSDMx_Init+0x78>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f245 6222 	movw	r2, #22050	; 0x5622
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d015      	beq.n	8000fc0 <DFSDMx_Init+0x74>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000f9a:	d00f      	beq.n	8000fbc <DFSDMx_Init+0x70>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d008      	beq.n	8000fb8 <DFSDMx_Init+0x6c>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d101      	bne.n	8000fb4 <DFSDMx_Init+0x68>
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	e00c      	b.n	8000fce <DFSDMx_Init+0x82>
 8000fb4:	2319      	movs	r3, #25
 8000fb6:	e00a      	b.n	8000fce <DFSDMx_Init+0x82>
 8000fb8:	2304      	movs	r3, #4
 8000fba:	e008      	b.n	8000fce <DFSDMx_Init+0x82>
 8000fbc:	2318      	movs	r3, #24
 8000fbe:	e006      	b.n	8000fce <DFSDMx_Init+0x82>
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	e004      	b.n	8000fce <DFSDMx_Init+0x82>
 8000fc4:	2318      	movs	r3, #24
 8000fc6:	e002      	b.n	8000fce <DFSDMx_Init+0x82>
 8000fc8:	2304      	movs	r3, #4
 8000fca:	e000      	b.n	8000fce <DFSDMx_Init+0x82>
 8000fcc:	2318      	movs	r3, #24
 8000fce:	4a7b      	ldr	r2, [pc, #492]	; (80011bc <DFSDMx_Init+0x270>)
 8000fd0:	60d3      	str	r3, [r2, #12]
  hAudioInTopLeftChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000fd2:	4b7a      	ldr	r3, [pc, #488]	; (80011bc <DFSDMx_Init+0x270>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  hAudioInTopLeftChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8000fd8:	4b78      	ldr	r3, [pc, #480]	; (80011bc <DFSDMx_Init+0x270>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  hAudioInTopLeftChannel.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000fde:	4b77      	ldr	r3, [pc, #476]	; (80011bc <DFSDMx_Init+0x270>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  /* Request to sample stable data for LEFT micro on Rising edge */
  hAudioInTopLeftChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8000fe4:	4b75      	ldr	r3, [pc, #468]	; (80011bc <DFSDMx_Init+0x270>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  hAudioInTopLeftChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000fea:	4b74      	ldr	r3, [pc, #464]	; (80011bc <DFSDMx_Init+0x270>)
 8000fec:	2204      	movs	r2, #4
 8000fee:	621a      	str	r2, [r3, #32]
  hAudioInTopLeftChannel.Init.Awd.FilterOrder          = DFSDM_FILTER_ORDER(AudioFreq);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000ff6:	d030      	beq.n	800105a <DFSDMx_Init+0x10e>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d028      	beq.n	8001054 <DFSDMx_Init+0x108>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001008:	d021      	beq.n	800104e <DFSDMx_Init+0x102>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f245 6222 	movw	r2, #22050	; 0x5622
 8001010:	4293      	cmp	r3, r2
 8001012:	d019      	beq.n	8001048 <DFSDMx_Init+0xfc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800101a:	d012      	beq.n	8001042 <DFSDMx_Init+0xf6>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001022:	4293      	cmp	r3, r2
 8001024:	d00a      	beq.n	800103c <DFSDMx_Init+0xf0>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800102c:	4293      	cmp	r3, r2
 800102e:	d102      	bne.n	8001036 <DFSDMx_Init+0xea>
 8001030:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001034:	e013      	b.n	800105e <DFSDMx_Init+0x112>
 8001036:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800103a:	e010      	b.n	800105e <DFSDMx_Init+0x112>
 800103c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001040:	e00d      	b.n	800105e <DFSDMx_Init+0x112>
 8001042:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001046:	e00a      	b.n	800105e <DFSDMx_Init+0x112>
 8001048:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800104c:	e007      	b.n	800105e <DFSDMx_Init+0x112>
 800104e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001052:	e004      	b.n	800105e <DFSDMx_Init+0x112>
 8001054:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001058:	e001      	b.n	800105e <DFSDMx_Init+0x112>
 800105a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800105e:	4a57      	ldr	r2, [pc, #348]	; (80011bc <DFSDMx_Init+0x270>)
 8001060:	6253      	str	r3, [r2, #36]	; 0x24
  hAudioInTopLeftChannel.Init.Awd.Oversampling         = DFSDM_OVER_SAMPLING(AudioFreq);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001068:	d02a      	beq.n	80010c0 <DFSDMx_Init+0x174>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001070:	4293      	cmp	r3, r2
 8001072:	d022      	beq.n	80010ba <DFSDMx_Init+0x16e>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800107a:	d01c      	beq.n	80010b6 <DFSDMx_Init+0x16a>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f245 6222 	movw	r2, #22050	; 0x5622
 8001082:	4293      	cmp	r3, r2
 8001084:	d015      	beq.n	80010b2 <DFSDMx_Init+0x166>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800108c:	d00f      	beq.n	80010ae <DFSDMx_Init+0x162>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001094:	4293      	cmp	r3, r2
 8001096:	d008      	beq.n	80010aa <DFSDMx_Init+0x15e>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <DFSDMx_Init+0x15a>
 80010a2:	2340      	movs	r3, #64	; 0x40
 80010a4:	e00e      	b.n	80010c4 <DFSDMx_Init+0x178>
 80010a6:	2314      	movs	r3, #20
 80010a8:	e00c      	b.n	80010c4 <DFSDMx_Init+0x178>
 80010aa:	2340      	movs	r3, #64	; 0x40
 80010ac:	e00a      	b.n	80010c4 <DFSDMx_Init+0x178>
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	e008      	b.n	80010c4 <DFSDMx_Init+0x178>
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	e006      	b.n	80010c4 <DFSDMx_Init+0x178>
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	e004      	b.n	80010c4 <DFSDMx_Init+0x178>
 80010ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010be:	e001      	b.n	80010c4 <DFSDMx_Init+0x178>
 80010c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c4:	4a3d      	ldr	r2, [pc, #244]	; (80011bc <DFSDMx_Init+0x270>)
 80010c6:	6293      	str	r3, [r2, #40]	; 0x28
//  hAudioInTopLeftChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
//  hAudioInTopLeftChannel.Init.Awd.Oversampling         = 10;
  hAudioInTopLeftChannel.Init.Offset                   = 0;
 80010c8:	4b3c      	ldr	r3, [pc, #240]	; (80011bc <DFSDMx_Init+0x270>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80010d4:	d029      	beq.n	800112a <DFSDMx_Init+0x1de>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f642 3211 	movw	r2, #11025	; 0x2b11
 80010dc:	4293      	cmp	r3, r2
 80010de:	d022      	beq.n	8001126 <DFSDMx_Init+0x1da>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80010e6:	d01c      	beq.n	8001122 <DFSDMx_Init+0x1d6>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f245 6222 	movw	r2, #22050	; 0x5622
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d015      	beq.n	800111e <DFSDMx_Init+0x1d2>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80010f8:	d00f      	beq.n	800111a <DFSDMx_Init+0x1ce>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001100:	4293      	cmp	r3, r2
 8001102:	d008      	beq.n	8001116 <DFSDMx_Init+0x1ca>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <DFSDMx_Init+0x1c6>
 800110e:	2300      	movs	r3, #0
 8001110:	e00c      	b.n	800112c <DFSDMx_Init+0x1e0>
 8001112:	2304      	movs	r3, #4
 8001114:	e00a      	b.n	800112c <DFSDMx_Init+0x1e0>
 8001116:	2300      	movs	r3, #0
 8001118:	e008      	b.n	800112c <DFSDMx_Init+0x1e0>
 800111a:	2307      	movs	r3, #7
 800111c:	e006      	b.n	800112c <DFSDMx_Init+0x1e0>
 800111e:	2304      	movs	r3, #4
 8001120:	e004      	b.n	800112c <DFSDMx_Init+0x1e0>
 8001122:	2303      	movs	r3, #3
 8001124:	e002      	b.n	800112c <DFSDMx_Init+0x1e0>
 8001126:	2308      	movs	r3, #8
 8001128:	e000      	b.n	800112c <DFSDMx_Init+0x1e0>
 800112a:	2308      	movs	r3, #8
 800112c:	4a23      	ldr	r2, [pc, #140]	; (80011bc <DFSDMx_Init+0x270>)
 800112e:	6313      	str	r3, [r2, #48]	; 0x30
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopLeftChannel))
 8001130:	4822      	ldr	r0, [pc, #136]	; (80011bc <DFSDMx_Init+0x270>)
 8001132:	f000 ffd3 	bl	80020dc <HAL_DFSDM_ChannelInit>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <DFSDMx_Init+0x1f6>
  {
    return AUDIO_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	f000 bc72 	b.w	8001a26 <DFSDMx_Init+0xada>
  }

  /* CHANNEL 0 configuration */
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopRightChannel);
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <DFSDMx_Init+0x278>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hAudioInTopRightChannel.Instance                      = DFSDM1_Channel0;
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <DFSDMx_Init+0x278>)
 800114c:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <DFSDMx_Init+0x27c>)
 800114e:	601a      	str	r2, [r3, #0]
  hAudioInTopRightChannel.Init.OutputClock.Activation   = ENABLE;
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <DFSDMx_Init+0x278>)
 8001152:	2201      	movs	r2, #1
 8001154:	711a      	strb	r2, [r3, #4]
  hAudioInTopRightChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <DFSDMx_Init+0x278>)
 8001158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115c:	609a      	str	r2, [r3, #8]
  /* Set the DFSDM clock OUT audio frequency configuration */
  hAudioInTopRightChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001164:	d032      	beq.n	80011cc <DFSDMx_Init+0x280>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f642 3211 	movw	r2, #11025	; 0x2b11
 800116c:	4293      	cmp	r3, r2
 800116e:	d022      	beq.n	80011b6 <DFSDMx_Init+0x26a>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001176:	d01c      	beq.n	80011b2 <DFSDMx_Init+0x266>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f245 6222 	movw	r2, #22050	; 0x5622
 800117e:	4293      	cmp	r3, r2
 8001180:	d015      	beq.n	80011ae <DFSDMx_Init+0x262>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001188:	d00f      	beq.n	80011aa <DFSDMx_Init+0x25e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001190:	4293      	cmp	r3, r2
 8001192:	d008      	beq.n	80011a6 <DFSDMx_Init+0x25a>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <DFSDMx_Init+0x256>
 800119e:	2310      	movs	r3, #16
 80011a0:	e015      	b.n	80011ce <DFSDMx_Init+0x282>
 80011a2:	2319      	movs	r3, #25
 80011a4:	e013      	b.n	80011ce <DFSDMx_Init+0x282>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e011      	b.n	80011ce <DFSDMx_Init+0x282>
 80011aa:	2318      	movs	r3, #24
 80011ac:	e00f      	b.n	80011ce <DFSDMx_Init+0x282>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e00d      	b.n	80011ce <DFSDMx_Init+0x282>
 80011b2:	2318      	movs	r3, #24
 80011b4:	e00b      	b.n	80011ce <DFSDMx_Init+0x282>
 80011b6:	2304      	movs	r3, #4
 80011b8:	e009      	b.n	80011ce <DFSDMx_Init+0x282>
 80011ba:	bf00      	nop
 80011bc:	20000b58 	.word	0x20000b58
 80011c0:	40017020 	.word	0x40017020
 80011c4:	20000b90 	.word	0x20000b90
 80011c8:	40017000 	.word	0x40017000
 80011cc:	2318      	movs	r3, #24
 80011ce:	4a92      	ldr	r2, [pc, #584]	; (8001418 <DFSDMx_Init+0x4cc>)
 80011d0:	60d3      	str	r3, [r2, #12]
  hAudioInTopRightChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80011d2:	4b91      	ldr	r3, [pc, #580]	; (8001418 <DFSDMx_Init+0x4cc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  hAudioInTopRightChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 80011d8:	4b8f      	ldr	r3, [pc, #572]	; (8001418 <DFSDMx_Init+0x4cc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
  hAudioInTopRightChannel.Init.Input.Pins               = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80011de:	4b8e      	ldr	r3, [pc, #568]	; (8001418 <DFSDMx_Init+0x4cc>)
 80011e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e4:	619a      	str	r2, [r3, #24]
  /* Request to sample stable data for RIGHT micro on Falling edge */
  hAudioInTopRightChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_FALLING;
 80011e6:	4b8c      	ldr	r3, [pc, #560]	; (8001418 <DFSDMx_Init+0x4cc>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	61da      	str	r2, [r3, #28]
  hAudioInTopRightChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80011ec:	4b8a      	ldr	r3, [pc, #552]	; (8001418 <DFSDMx_Init+0x4cc>)
 80011ee:	2204      	movs	r2, #4
 80011f0:	621a      	str	r2, [r3, #32]
  hAudioInTopRightChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 80011f2:	4b89      	ldr	r3, [pc, #548]	; (8001418 <DFSDMx_Init+0x4cc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
  hAudioInTopRightChannel.Init.Awd.Oversampling         = 10;
 80011f8:	4b87      	ldr	r3, [pc, #540]	; (8001418 <DFSDMx_Init+0x4cc>)
 80011fa:	220a      	movs	r2, #10
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
  hAudioInTopRightChannel.Init.Offset                   = 0;
 80011fe:	4b86      	ldr	r3, [pc, #536]	; (8001418 <DFSDMx_Init+0x4cc>)
 8001200:	2200      	movs	r2, #0
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
  hAudioInTopRightChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800120a:	d029      	beq.n	8001260 <DFSDMx_Init+0x314>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001212:	4293      	cmp	r3, r2
 8001214:	d022      	beq.n	800125c <DFSDMx_Init+0x310>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800121c:	d01c      	beq.n	8001258 <DFSDMx_Init+0x30c>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f245 6222 	movw	r2, #22050	; 0x5622
 8001224:	4293      	cmp	r3, r2
 8001226:	d015      	beq.n	8001254 <DFSDMx_Init+0x308>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800122e:	d00f      	beq.n	8001250 <DFSDMx_Init+0x304>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001236:	4293      	cmp	r3, r2
 8001238:	d008      	beq.n	800124c <DFSDMx_Init+0x300>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001240:	4293      	cmp	r3, r2
 8001242:	d101      	bne.n	8001248 <DFSDMx_Init+0x2fc>
 8001244:	2300      	movs	r3, #0
 8001246:	e00c      	b.n	8001262 <DFSDMx_Init+0x316>
 8001248:	2304      	movs	r3, #4
 800124a:	e00a      	b.n	8001262 <DFSDMx_Init+0x316>
 800124c:	2300      	movs	r3, #0
 800124e:	e008      	b.n	8001262 <DFSDMx_Init+0x316>
 8001250:	2307      	movs	r3, #7
 8001252:	e006      	b.n	8001262 <DFSDMx_Init+0x316>
 8001254:	2304      	movs	r3, #4
 8001256:	e004      	b.n	8001262 <DFSDMx_Init+0x316>
 8001258:	2303      	movs	r3, #3
 800125a:	e002      	b.n	8001262 <DFSDMx_Init+0x316>
 800125c:	2308      	movs	r3, #8
 800125e:	e000      	b.n	8001262 <DFSDMx_Init+0x316>
 8001260:	2308      	movs	r3, #8
 8001262:	4a6d      	ldr	r2, [pc, #436]	; (8001418 <DFSDMx_Init+0x4cc>)
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopRightChannel))
 8001266:	486c      	ldr	r0, [pc, #432]	; (8001418 <DFSDMx_Init+0x4cc>)
 8001268:	f000 ff38 	bl	80020dc <HAL_DFSDM_ChannelInit>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <DFSDMx_Init+0x32a>
  {
    return AUDIO_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e3d7      	b.n	8001a26 <DFSDMx_Init+0xada>
  }

  if(AudioIn_ChannelNumber > 2)
 8001276:	4b69      	ldr	r3, [pc, #420]	; (800141c <DFSDMx_Init+0x4d0>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b02      	cmp	r3, #2
 800127c:	f240 812d 	bls.w	80014da <DFSDMx_Init+0x58e>
  {
    /* CHANNEL 5 configuration */
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomLeftChannel);
 8001280:	4b67      	ldr	r3, [pc, #412]	; (8001420 <DFSDMx_Init+0x4d4>)
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hAudioInButtomLeftChannel.Instance                      = DFSDM1_Channel5;
 8001288:	4b65      	ldr	r3, [pc, #404]	; (8001420 <DFSDMx_Init+0x4d4>)
 800128a:	4a66      	ldr	r2, [pc, #408]	; (8001424 <DFSDMx_Init+0x4d8>)
 800128c:	601a      	str	r2, [r3, #0]
    hAudioInButtomLeftChannel.Init.OutputClock.Activation   = ENABLE;
 800128e:	4b64      	ldr	r3, [pc, #400]	; (8001420 <DFSDMx_Init+0x4d4>)
 8001290:	2201      	movs	r2, #1
 8001292:	711a      	strb	r2, [r3, #4]
    hAudioInButtomLeftChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8001294:	4b62      	ldr	r3, [pc, #392]	; (8001420 <DFSDMx_Init+0x4d4>)
 8001296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800129a:	609a      	str	r2, [r3, #8]
    /* Set the DFSDM clock OUT audio frequency configuration */
    hAudioInButtomLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80012a2:	d029      	beq.n	80012f8 <DFSDMx_Init+0x3ac>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f642 3211 	movw	r2, #11025	; 0x2b11
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d022      	beq.n	80012f4 <DFSDMx_Init+0x3a8>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80012b4:	d01c      	beq.n	80012f0 <DFSDMx_Init+0x3a4>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f245 6222 	movw	r2, #22050	; 0x5622
 80012bc:	4293      	cmp	r3, r2
 80012be:	d015      	beq.n	80012ec <DFSDMx_Init+0x3a0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80012c6:	d00f      	beq.n	80012e8 <DFSDMx_Init+0x39c>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f64a 4244 	movw	r2, #44100	; 0xac44
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d008      	beq.n	80012e4 <DFSDMx_Init+0x398>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80012d8:	4293      	cmp	r3, r2
 80012da:	d101      	bne.n	80012e0 <DFSDMx_Init+0x394>
 80012dc:	2310      	movs	r3, #16
 80012de:	e00c      	b.n	80012fa <DFSDMx_Init+0x3ae>
 80012e0:	2319      	movs	r3, #25
 80012e2:	e00a      	b.n	80012fa <DFSDMx_Init+0x3ae>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e008      	b.n	80012fa <DFSDMx_Init+0x3ae>
 80012e8:	2318      	movs	r3, #24
 80012ea:	e006      	b.n	80012fa <DFSDMx_Init+0x3ae>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e004      	b.n	80012fa <DFSDMx_Init+0x3ae>
 80012f0:	2318      	movs	r3, #24
 80012f2:	e002      	b.n	80012fa <DFSDMx_Init+0x3ae>
 80012f4:	2304      	movs	r3, #4
 80012f6:	e000      	b.n	80012fa <DFSDMx_Init+0x3ae>
 80012f8:	2318      	movs	r3, #24
 80012fa:	4a49      	ldr	r2, [pc, #292]	; (8001420 <DFSDMx_Init+0x4d4>)
 80012fc:	60d3      	str	r3, [r2, #12]
    hAudioInButtomLeftChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80012fe:	4b48      	ldr	r3, [pc, #288]	; (8001420 <DFSDMx_Init+0x4d4>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
    hAudioInButtomLeftChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8001304:	4b46      	ldr	r3, [pc, #280]	; (8001420 <DFSDMx_Init+0x4d4>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
    hAudioInButtomLeftChannel.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800130a:	4b45      	ldr	r3, [pc, #276]	; (8001420 <DFSDMx_Init+0x4d4>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
    /* Request to sample stable data for LEFT micro on Rising edge */
    hAudioInButtomLeftChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8001310:	4b43      	ldr	r3, [pc, #268]	; (8001420 <DFSDMx_Init+0x4d4>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
    hAudioInButtomLeftChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <DFSDMx_Init+0x4d4>)
 8001318:	2204      	movs	r2, #4
 800131a:	621a      	str	r2, [r3, #32]
    hAudioInButtomLeftChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 800131c:	4b40      	ldr	r3, [pc, #256]	; (8001420 <DFSDMx_Init+0x4d4>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
    hAudioInButtomLeftChannel.Init.Awd.Oversampling         = 10;
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <DFSDMx_Init+0x4d4>)
 8001324:	220a      	movs	r2, #10
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
    hAudioInButtomLeftChannel.Init.Offset                   = 0;
 8001328:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <DFSDMx_Init+0x4d4>)
 800132a:	2200      	movs	r2, #0
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c
    hAudioInButtomLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001334:	d029      	beq.n	800138a <DFSDMx_Init+0x43e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f642 3211 	movw	r2, #11025	; 0x2b11
 800133c:	4293      	cmp	r3, r2
 800133e:	d022      	beq.n	8001386 <DFSDMx_Init+0x43a>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001346:	d01c      	beq.n	8001382 <DFSDMx_Init+0x436>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f245 6222 	movw	r2, #22050	; 0x5622
 800134e:	4293      	cmp	r3, r2
 8001350:	d015      	beq.n	800137e <DFSDMx_Init+0x432>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001358:	d00f      	beq.n	800137a <DFSDMx_Init+0x42e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001360:	4293      	cmp	r3, r2
 8001362:	d008      	beq.n	8001376 <DFSDMx_Init+0x42a>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <DFSDMx_Init+0x426>
 800136e:	2300      	movs	r3, #0
 8001370:	e00c      	b.n	800138c <DFSDMx_Init+0x440>
 8001372:	2304      	movs	r3, #4
 8001374:	e00a      	b.n	800138c <DFSDMx_Init+0x440>
 8001376:	2300      	movs	r3, #0
 8001378:	e008      	b.n	800138c <DFSDMx_Init+0x440>
 800137a:	2307      	movs	r3, #7
 800137c:	e006      	b.n	800138c <DFSDMx_Init+0x440>
 800137e:	2304      	movs	r3, #4
 8001380:	e004      	b.n	800138c <DFSDMx_Init+0x440>
 8001382:	2303      	movs	r3, #3
 8001384:	e002      	b.n	800138c <DFSDMx_Init+0x440>
 8001386:	2308      	movs	r3, #8
 8001388:	e000      	b.n	800138c <DFSDMx_Init+0x440>
 800138a:	2308      	movs	r3, #8
 800138c:	4a24      	ldr	r2, [pc, #144]	; (8001420 <DFSDMx_Init+0x4d4>)
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomLeftChannel))
 8001390:	4823      	ldr	r0, [pc, #140]	; (8001420 <DFSDMx_Init+0x4d4>)
 8001392:	f000 fea3 	bl	80020dc <HAL_DFSDM_ChannelInit>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <DFSDMx_Init+0x454>
    {
      return AUDIO_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e342      	b.n	8001a26 <DFSDMx_Init+0xada>
    }

    /* CHANNEL 4 configuration */
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomRightChannel);
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <DFSDMx_Init+0x4dc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hAudioInButtomRightChannel.Instance                      = DFSDM1_Channel4;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <DFSDMx_Init+0x4dc>)
 80013aa:	4a20      	ldr	r2, [pc, #128]	; (800142c <DFSDMx_Init+0x4e0>)
 80013ac:	601a      	str	r2, [r3, #0]
    hAudioInButtomRightChannel.Init.OutputClock.Activation   = ENABLE;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <DFSDMx_Init+0x4dc>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	711a      	strb	r2, [r3, #4]
    hAudioInButtomRightChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <DFSDMx_Init+0x4dc>)
 80013b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ba:	609a      	str	r2, [r3, #8]
    /* Set the DFSDM clock OUT audio frequency configuration */
    hAudioInButtomRightChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80013c2:	d035      	beq.n	8001430 <DFSDMx_Init+0x4e4>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f642 3211 	movw	r2, #11025	; 0x2b11
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d022      	beq.n	8001414 <DFSDMx_Init+0x4c8>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80013d4:	d01c      	beq.n	8001410 <DFSDMx_Init+0x4c4>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f245 6222 	movw	r2, #22050	; 0x5622
 80013dc:	4293      	cmp	r3, r2
 80013de:	d015      	beq.n	800140c <DFSDMx_Init+0x4c0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80013e6:	d00f      	beq.n	8001408 <DFSDMx_Init+0x4bc>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f64a 4244 	movw	r2, #44100	; 0xac44
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d008      	beq.n	8001404 <DFSDMx_Init+0x4b8>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <DFSDMx_Init+0x4b4>
 80013fc:	2310      	movs	r3, #16
 80013fe:	e018      	b.n	8001432 <DFSDMx_Init+0x4e6>
 8001400:	2319      	movs	r3, #25
 8001402:	e016      	b.n	8001432 <DFSDMx_Init+0x4e6>
 8001404:	2304      	movs	r3, #4
 8001406:	e014      	b.n	8001432 <DFSDMx_Init+0x4e6>
 8001408:	2318      	movs	r3, #24
 800140a:	e012      	b.n	8001432 <DFSDMx_Init+0x4e6>
 800140c:	2304      	movs	r3, #4
 800140e:	e010      	b.n	8001432 <DFSDMx_Init+0x4e6>
 8001410:	2318      	movs	r3, #24
 8001412:	e00e      	b.n	8001432 <DFSDMx_Init+0x4e6>
 8001414:	2304      	movs	r3, #4
 8001416:	e00c      	b.n	8001432 <DFSDMx_Init+0x4e6>
 8001418:	20000b90 	.word	0x20000b90
 800141c:	20000008 	.word	0x20000008
 8001420:	20000ca8 	.word	0x20000ca8
 8001424:	400170a0 	.word	0x400170a0
 8001428:	20000c1c 	.word	0x20000c1c
 800142c:	40017080 	.word	0x40017080
 8001430:	2318      	movs	r3, #24
 8001432:	4aa5      	ldr	r2, [pc, #660]	; (80016c8 <DFSDMx_Init+0x77c>)
 8001434:	60d3      	str	r3, [r2, #12]
    hAudioInButtomRightChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001436:	4ba4      	ldr	r3, [pc, #656]	; (80016c8 <DFSDMx_Init+0x77c>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
    hAudioInButtomRightChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 800143c:	4ba2      	ldr	r3, [pc, #648]	; (80016c8 <DFSDMx_Init+0x77c>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
    hAudioInButtomRightChannel.Init.Input.Pins               = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001442:	4ba1      	ldr	r3, [pc, #644]	; (80016c8 <DFSDMx_Init+0x77c>)
 8001444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001448:	619a      	str	r2, [r3, #24]
    /* Request to sample stable data for RIGHT micro on Falling edge */
    hAudioInButtomRightChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_FALLING;
 800144a:	4b9f      	ldr	r3, [pc, #636]	; (80016c8 <DFSDMx_Init+0x77c>)
 800144c:	2201      	movs	r2, #1
 800144e:	61da      	str	r2, [r3, #28]
    hAudioInButtomRightChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001450:	4b9d      	ldr	r3, [pc, #628]	; (80016c8 <DFSDMx_Init+0x77c>)
 8001452:	2204      	movs	r2, #4
 8001454:	621a      	str	r2, [r3, #32]
    hAudioInButtomRightChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001456:	4b9c      	ldr	r3, [pc, #624]	; (80016c8 <DFSDMx_Init+0x77c>)
 8001458:	2200      	movs	r2, #0
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
    hAudioInButtomRightChannel.Init.Awd.Oversampling         = 10;
 800145c:	4b9a      	ldr	r3, [pc, #616]	; (80016c8 <DFSDMx_Init+0x77c>)
 800145e:	220a      	movs	r2, #10
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
    hAudioInButtomRightChannel.Init.Offset                   = 0;
 8001462:	4b99      	ldr	r3, [pc, #612]	; (80016c8 <DFSDMx_Init+0x77c>)
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
    hAudioInButtomRightChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800146e:	d029      	beq.n	80014c4 <DFSDMx_Init+0x578>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001476:	4293      	cmp	r3, r2
 8001478:	d022      	beq.n	80014c0 <DFSDMx_Init+0x574>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001480:	d01c      	beq.n	80014bc <DFSDMx_Init+0x570>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f245 6222 	movw	r2, #22050	; 0x5622
 8001488:	4293      	cmp	r3, r2
 800148a:	d015      	beq.n	80014b8 <DFSDMx_Init+0x56c>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001492:	d00f      	beq.n	80014b4 <DFSDMx_Init+0x568>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f64a 4244 	movw	r2, #44100	; 0xac44
 800149a:	4293      	cmp	r3, r2
 800149c:	d008      	beq.n	80014b0 <DFSDMx_Init+0x564>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d101      	bne.n	80014ac <DFSDMx_Init+0x560>
 80014a8:	2300      	movs	r3, #0
 80014aa:	e00c      	b.n	80014c6 <DFSDMx_Init+0x57a>
 80014ac:	2304      	movs	r3, #4
 80014ae:	e00a      	b.n	80014c6 <DFSDMx_Init+0x57a>
 80014b0:	2300      	movs	r3, #0
 80014b2:	e008      	b.n	80014c6 <DFSDMx_Init+0x57a>
 80014b4:	2307      	movs	r3, #7
 80014b6:	e006      	b.n	80014c6 <DFSDMx_Init+0x57a>
 80014b8:	2304      	movs	r3, #4
 80014ba:	e004      	b.n	80014c6 <DFSDMx_Init+0x57a>
 80014bc:	2303      	movs	r3, #3
 80014be:	e002      	b.n	80014c6 <DFSDMx_Init+0x57a>
 80014c0:	2308      	movs	r3, #8
 80014c2:	e000      	b.n	80014c6 <DFSDMx_Init+0x57a>
 80014c4:	2308      	movs	r3, #8
 80014c6:	4a80      	ldr	r2, [pc, #512]	; (80016c8 <DFSDMx_Init+0x77c>)
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomRightChannel))
 80014ca:	487f      	ldr	r0, [pc, #508]	; (80016c8 <DFSDMx_Init+0x77c>)
 80014cc:	f000 fe06 	bl	80020dc <HAL_DFSDM_ChannelInit>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <DFSDMx_Init+0x58e>
    {
      return AUDIO_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e2a5      	b.n	8001a26 <DFSDMx_Init+0xada>
  /****************************************************************************/
  /********************** Filters configuration  ******************************/
  /****************************************************************************/

  /* FILTER 0 configuration */
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopLeftFilter);
 80014da:	4b7c      	ldr	r3, [pc, #496]	; (80016cc <DFSDMx_Init+0x780>)
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  hAudioInTopLeftFilter.Instance                          = AUDIO_DFSDMx_TOP_LEFT_FILTER;
 80014e2:	4b7a      	ldr	r3, [pc, #488]	; (80016cc <DFSDMx_Init+0x780>)
 80014e4:	4a7a      	ldr	r2, [pc, #488]	; (80016d0 <DFSDMx_Init+0x784>)
 80014e6:	601a      	str	r2, [r3, #0]
  hAudioInTopLeftFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SW_TRIGGER;
 80014e8:	4b78      	ldr	r3, [pc, #480]	; (80016cc <DFSDMx_Init+0x780>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	605a      	str	r2, [r3, #4]
  hAudioInTopLeftFilter.Init.RegularParam.FastMode        = ENABLE;
 80014ee:	4b77      	ldr	r3, [pc, #476]	; (80016cc <DFSDMx_Init+0x780>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	721a      	strb	r2, [r3, #8]
  hAudioInTopLeftFilter.Init.RegularParam.DmaMode         = ENABLE;
 80014f4:	4b75      	ldr	r3, [pc, #468]	; (80016cc <DFSDMx_Init+0x780>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	725a      	strb	r2, [r3, #9]
  hAudioInTopLeftFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80014fa:	4b74      	ldr	r3, [pc, #464]	; (80016cc <DFSDMx_Init+0x780>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hAudioInTopLeftFilter.Init.InjectedParam.ScanMode       = ENABLE;
 8001500:	4b72      	ldr	r3, [pc, #456]	; (80016cc <DFSDMx_Init+0x780>)
 8001502:	2201      	movs	r2, #1
 8001504:	741a      	strb	r2, [r3, #16]
  hAudioInTopLeftFilter.Init.InjectedParam.DmaMode        = DISABLE;
 8001506:	4b71      	ldr	r3, [pc, #452]	; (80016cc <DFSDMx_Init+0x780>)
 8001508:	2200      	movs	r2, #0
 800150a:	745a      	strb	r2, [r3, #17]
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800150c:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <DFSDMx_Init+0x780>)
 800150e:	2200      	movs	r2, #0
 8001510:	615a      	str	r2, [r3, #20]
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8001512:	4b6e      	ldr	r3, [pc, #440]	; (80016cc <DFSDMx_Init+0x780>)
 8001514:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001518:	619a      	str	r2, [r3, #24]
  hAudioInTopLeftFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001520:	d030      	beq.n	8001584 <DFSDMx_Init+0x638>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001528:	4293      	cmp	r3, r2
 800152a:	d028      	beq.n	800157e <DFSDMx_Init+0x632>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001532:	d021      	beq.n	8001578 <DFSDMx_Init+0x62c>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f245 6222 	movw	r2, #22050	; 0x5622
 800153a:	4293      	cmp	r3, r2
 800153c:	d019      	beq.n	8001572 <DFSDMx_Init+0x626>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001544:	d012      	beq.n	800156c <DFSDMx_Init+0x620>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f64a 4244 	movw	r2, #44100	; 0xac44
 800154c:	4293      	cmp	r3, r2
 800154e:	d00a      	beq.n	8001566 <DFSDMx_Init+0x61a>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001556:	4293      	cmp	r3, r2
 8001558:	d102      	bne.n	8001560 <DFSDMx_Init+0x614>
 800155a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800155e:	e013      	b.n	8001588 <DFSDMx_Init+0x63c>
 8001560:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001564:	e010      	b.n	8001588 <DFSDMx_Init+0x63c>
 8001566:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800156a:	e00d      	b.n	8001588 <DFSDMx_Init+0x63c>
 800156c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001570:	e00a      	b.n	8001588 <DFSDMx_Init+0x63c>
 8001572:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001576:	e007      	b.n	8001588 <DFSDMx_Init+0x63c>
 8001578:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800157c:	e004      	b.n	8001588 <DFSDMx_Init+0x63c>
 800157e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001582:	e001      	b.n	8001588 <DFSDMx_Init+0x63c>
 8001584:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001588:	4a50      	ldr	r2, [pc, #320]	; (80016cc <DFSDMx_Init+0x780>)
 800158a:	61d3      	str	r3, [r2, #28]
  /* Set the DFSDM Filters Oversampling to have correct sample rate */
  hAudioInTopLeftFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001592:	d02a      	beq.n	80015ea <DFSDMx_Init+0x69e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f642 3211 	movw	r2, #11025	; 0x2b11
 800159a:	4293      	cmp	r3, r2
 800159c:	d022      	beq.n	80015e4 <DFSDMx_Init+0x698>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80015a4:	d01c      	beq.n	80015e0 <DFSDMx_Init+0x694>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f245 6222 	movw	r2, #22050	; 0x5622
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d015      	beq.n	80015dc <DFSDMx_Init+0x690>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80015b6:	d00f      	beq.n	80015d8 <DFSDMx_Init+0x68c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f64a 4244 	movw	r2, #44100	; 0xac44
 80015be:	4293      	cmp	r3, r2
 80015c0:	d008      	beq.n	80015d4 <DFSDMx_Init+0x688>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <DFSDMx_Init+0x684>
 80015cc:	2340      	movs	r3, #64	; 0x40
 80015ce:	e00e      	b.n	80015ee <DFSDMx_Init+0x6a2>
 80015d0:	2314      	movs	r3, #20
 80015d2:	e00c      	b.n	80015ee <DFSDMx_Init+0x6a2>
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	e00a      	b.n	80015ee <DFSDMx_Init+0x6a2>
 80015d8:	2340      	movs	r3, #64	; 0x40
 80015da:	e008      	b.n	80015ee <DFSDMx_Init+0x6a2>
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	e006      	b.n	80015ee <DFSDMx_Init+0x6a2>
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	e004      	b.n	80015ee <DFSDMx_Init+0x6a2>
 80015e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e8:	e001      	b.n	80015ee <DFSDMx_Init+0x6a2>
 80015ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ee:	4a37      	ldr	r2, [pc, #220]	; (80016cc <DFSDMx_Init+0x780>)
 80015f0:	6213      	str	r3, [r2, #32]
  hAudioInTopLeftFilter.Init.FilterParam.IntOversampling  = 1;
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <DFSDMx_Init+0x780>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopLeftFilter))
 80015f8:	4834      	ldr	r0, [pc, #208]	; (80016cc <DFSDMx_Init+0x780>)
 80015fa:	f000 fe41 	bl	8002280 <HAL_DFSDM_FilterInit>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <DFSDMx_Init+0x6bc>
  {
    return AUDIO_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e20e      	b.n	8001a26 <DFSDMx_Init+0xada>
  }

  /* Configure injected channel */
  if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopLeftFilter, AUDIO_DFSDMx_TOP_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8001608:	2201      	movs	r2, #1
 800160a:	4932      	ldr	r1, [pc, #200]	; (80016d4 <DFSDMx_Init+0x788>)
 800160c:	482f      	ldr	r0, [pc, #188]	; (80016cc <DFSDMx_Init+0x780>)
 800160e:	f000 ff1d 	bl	800244c <HAL_DFSDM_FilterConfigRegChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <DFSDMx_Init+0x6d0>
  {
    return AUDIO_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e204      	b.n	8001a26 <DFSDMx_Init+0xada>
  }

  /* FILTER 1 configuration */
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopRightFilter);
 800161c:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <DFSDMx_Init+0x78c>)
 800161e:	2200      	movs	r2, #0
 8001620:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  hAudioInTopRightFilter.Instance                          = AUDIO_DFSDMx_TOP_RIGHT_FILTER;
 8001624:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <DFSDMx_Init+0x78c>)
 8001626:	4a2d      	ldr	r2, [pc, #180]	; (80016dc <DFSDMx_Init+0x790>)
 8001628:	601a      	str	r2, [r3, #0]
  hAudioInTopRightFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 800162a:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <DFSDMx_Init+0x78c>)
 800162c:	2201      	movs	r2, #1
 800162e:	605a      	str	r2, [r3, #4]
  hAudioInTopRightFilter.Init.RegularParam.FastMode        = ENABLE;
 8001630:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <DFSDMx_Init+0x78c>)
 8001632:	2201      	movs	r2, #1
 8001634:	721a      	strb	r2, [r3, #8]
  hAudioInTopRightFilter.Init.RegularParam.DmaMode         = ENABLE;
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <DFSDMx_Init+0x78c>)
 8001638:	2201      	movs	r2, #1
 800163a:	725a      	strb	r2, [r3, #9]
  hAudioInTopRightFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <DFSDMx_Init+0x78c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  hAudioInTopRightFilter.Init.InjectedParam.ScanMode       = DISABLE;
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <DFSDMx_Init+0x78c>)
 8001644:	2200      	movs	r2, #0
 8001646:	741a      	strb	r2, [r3, #16]
  hAudioInTopRightFilter.Init.InjectedParam.DmaMode        = DISABLE;
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <DFSDMx_Init+0x78c>)
 800164a:	2200      	movs	r2, #0
 800164c:	745a      	strb	r2, [r3, #17]
  hAudioInTopRightFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <DFSDMx_Init+0x78c>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
  hAudioInTopRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <DFSDMx_Init+0x78c>)
 8001656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800165a:	619a      	str	r2, [r3, #24]
  hAudioInTopRightFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001662:	d03d      	beq.n	80016e0 <DFSDMx_Init+0x794>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f642 3211 	movw	r2, #11025	; 0x2b11
 800166a:	4293      	cmp	r3, r2
 800166c:	d028      	beq.n	80016c0 <DFSDMx_Init+0x774>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001674:	d021      	beq.n	80016ba <DFSDMx_Init+0x76e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f245 6222 	movw	r2, #22050	; 0x5622
 800167c:	4293      	cmp	r3, r2
 800167e:	d019      	beq.n	80016b4 <DFSDMx_Init+0x768>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001686:	d012      	beq.n	80016ae <DFSDMx_Init+0x762>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800168e:	4293      	cmp	r3, r2
 8001690:	d00a      	beq.n	80016a8 <DFSDMx_Init+0x75c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001698:	4293      	cmp	r3, r2
 800169a:	d102      	bne.n	80016a2 <DFSDMx_Init+0x756>
 800169c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80016a0:	e020      	b.n	80016e4 <DFSDMx_Init+0x798>
 80016a2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80016a6:	e01d      	b.n	80016e4 <DFSDMx_Init+0x798>
 80016a8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80016ac:	e01a      	b.n	80016e4 <DFSDMx_Init+0x798>
 80016ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80016b2:	e017      	b.n	80016e4 <DFSDMx_Init+0x798>
 80016b4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80016b8:	e014      	b.n	80016e4 <DFSDMx_Init+0x798>
 80016ba:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80016be:	e011      	b.n	80016e4 <DFSDMx_Init+0x798>
 80016c0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80016c4:	e00e      	b.n	80016e4 <DFSDMx_Init+0x798>
 80016c6:	bf00      	nop
 80016c8:	20000c1c 	.word	0x20000c1c
 80016cc:	20000a14 	.word	0x20000a14
 80016d0:	40017100 	.word	0x40017100
 80016d4:	00010002 	.word	0x00010002
 80016d8:	20000c54 	.word	0x20000c54
 80016dc:	40017180 	.word	0x40017180
 80016e0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80016e4:	4aa2      	ldr	r2, [pc, #648]	; (8001970 <DFSDMx_Init+0xa24>)
 80016e6:	61d3      	str	r3, [r2, #28]
  /* Set the DFSDM Filters Oversampling to have correct sample rate */
  hAudioInTopRightFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80016ee:	d02a      	beq.n	8001746 <DFSDMx_Init+0x7fa>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f642 3211 	movw	r2, #11025	; 0x2b11
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d022      	beq.n	8001740 <DFSDMx_Init+0x7f4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001700:	d01c      	beq.n	800173c <DFSDMx_Init+0x7f0>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f245 6222 	movw	r2, #22050	; 0x5622
 8001708:	4293      	cmp	r3, r2
 800170a:	d015      	beq.n	8001738 <DFSDMx_Init+0x7ec>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001712:	d00f      	beq.n	8001734 <DFSDMx_Init+0x7e8>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f64a 4244 	movw	r2, #44100	; 0xac44
 800171a:	4293      	cmp	r3, r2
 800171c:	d008      	beq.n	8001730 <DFSDMx_Init+0x7e4>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001724:	4293      	cmp	r3, r2
 8001726:	d101      	bne.n	800172c <DFSDMx_Init+0x7e0>
 8001728:	2340      	movs	r3, #64	; 0x40
 800172a:	e00e      	b.n	800174a <DFSDMx_Init+0x7fe>
 800172c:	2314      	movs	r3, #20
 800172e:	e00c      	b.n	800174a <DFSDMx_Init+0x7fe>
 8001730:	2340      	movs	r3, #64	; 0x40
 8001732:	e00a      	b.n	800174a <DFSDMx_Init+0x7fe>
 8001734:	2340      	movs	r3, #64	; 0x40
 8001736:	e008      	b.n	800174a <DFSDMx_Init+0x7fe>
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	e006      	b.n	800174a <DFSDMx_Init+0x7fe>
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	e004      	b.n	800174a <DFSDMx_Init+0x7fe>
 8001740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001744:	e001      	b.n	800174a <DFSDMx_Init+0x7fe>
 8001746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174a:	4a89      	ldr	r2, [pc, #548]	; (8001970 <DFSDMx_Init+0xa24>)
 800174c:	6213      	str	r3, [r2, #32]
  hAudioInTopRightFilter.Init.FilterParam.IntOversampling  = 1;
 800174e:	4b88      	ldr	r3, [pc, #544]	; (8001970 <DFSDMx_Init+0xa24>)
 8001750:	2201      	movs	r2, #1
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopRightFilter))
 8001754:	4886      	ldr	r0, [pc, #536]	; (8001970 <DFSDMx_Init+0xa24>)
 8001756:	f000 fd93 	bl	8002280 <HAL_DFSDM_FilterInit>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <DFSDMx_Init+0x818>
  {
    return AUDIO_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e160      	b.n	8001a26 <DFSDMx_Init+0xada>
  }
  /* Configure injected channel */
  if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopRightFilter, AUDIO_DFSDMx_TOP_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8001764:	2201      	movs	r2, #1
 8001766:	2101      	movs	r1, #1
 8001768:	4881      	ldr	r0, [pc, #516]	; (8001970 <DFSDMx_Init+0xa24>)
 800176a:	f000 fe6f 	bl	800244c <HAL_DFSDM_FilterConfigRegChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <DFSDMx_Init+0x82c>
  {
    return AUDIO_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e156      	b.n	8001a26 <DFSDMx_Init+0xada>
  }

  if(AudioIn_ChannelNumber > 2)
 8001778:	4b7e      	ldr	r3, [pc, #504]	; (8001974 <DFSDMx_Init+0xa28>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b02      	cmp	r3, #2
 800177e:	f240 8151 	bls.w	8001a24 <DFSDMx_Init+0xad8>
  {
    /* FILTER 2 configuration */
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomLeftFilter);
 8001782:	4b7d      	ldr	r3, [pc, #500]	; (8001978 <DFSDMx_Init+0xa2c>)
 8001784:	2200      	movs	r2, #0
 8001786:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    hAudioInButtomLeftFilter.Instance                          = AUDIO_DFSDMx_BUTTOM_LEFT_FILTER;
 800178a:	4b7b      	ldr	r3, [pc, #492]	; (8001978 <DFSDMx_Init+0xa2c>)
 800178c:	4a7b      	ldr	r2, [pc, #492]	; (800197c <DFSDMx_Init+0xa30>)
 800178e:	601a      	str	r2, [r3, #0]
    hAudioInButtomLeftFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 8001790:	4b79      	ldr	r3, [pc, #484]	; (8001978 <DFSDMx_Init+0xa2c>)
 8001792:	2201      	movs	r2, #1
 8001794:	605a      	str	r2, [r3, #4]
    hAudioInButtomLeftFilter.Init.RegularParam.FastMode        = ENABLE;
 8001796:	4b78      	ldr	r3, [pc, #480]	; (8001978 <DFSDMx_Init+0xa2c>)
 8001798:	2201      	movs	r2, #1
 800179a:	721a      	strb	r2, [r3, #8]
    hAudioInButtomLeftFilter.Init.RegularParam.DmaMode         = ENABLE;
 800179c:	4b76      	ldr	r3, [pc, #472]	; (8001978 <DFSDMx_Init+0xa2c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	725a      	strb	r2, [r3, #9]
    hAudioInButtomLeftFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80017a2:	4b75      	ldr	r3, [pc, #468]	; (8001978 <DFSDMx_Init+0xa2c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
    hAudioInButtomLeftFilter.Init.InjectedParam.ScanMode       = ENABLE;
 80017a8:	4b73      	ldr	r3, [pc, #460]	; (8001978 <DFSDMx_Init+0xa2c>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	741a      	strb	r2, [r3, #16]
    hAudioInButtomLeftFilter.Init.InjectedParam.DmaMode        = DISABLE;
 80017ae:	4b72      	ldr	r3, [pc, #456]	; (8001978 <DFSDMx_Init+0xa2c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	745a      	strb	r2, [r3, #17]
    hAudioInButtomLeftFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80017b4:	4b70      	ldr	r3, [pc, #448]	; (8001978 <DFSDMx_Init+0xa2c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
    hAudioInButtomLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80017ba:	4b6f      	ldr	r3, [pc, #444]	; (8001978 <DFSDMx_Init+0xa2c>)
 80017bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c0:	619a      	str	r2, [r3, #24]
    hAudioInButtomLeftFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80017c8:	d030      	beq.n	800182c <DFSDMx_Init+0x8e0>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f642 3211 	movw	r2, #11025	; 0x2b11
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d028      	beq.n	8001826 <DFSDMx_Init+0x8da>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80017da:	d021      	beq.n	8001820 <DFSDMx_Init+0x8d4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f245 6222 	movw	r2, #22050	; 0x5622
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d019      	beq.n	800181a <DFSDMx_Init+0x8ce>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80017ec:	d012      	beq.n	8001814 <DFSDMx_Init+0x8c8>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00a      	beq.n	800180e <DFSDMx_Init+0x8c2>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80017fe:	4293      	cmp	r3, r2
 8001800:	d102      	bne.n	8001808 <DFSDMx_Init+0x8bc>
 8001802:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001806:	e013      	b.n	8001830 <DFSDMx_Init+0x8e4>
 8001808:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800180c:	e010      	b.n	8001830 <DFSDMx_Init+0x8e4>
 800180e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001812:	e00d      	b.n	8001830 <DFSDMx_Init+0x8e4>
 8001814:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001818:	e00a      	b.n	8001830 <DFSDMx_Init+0x8e4>
 800181a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800181e:	e007      	b.n	8001830 <DFSDMx_Init+0x8e4>
 8001820:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001824:	e004      	b.n	8001830 <DFSDMx_Init+0x8e4>
 8001826:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800182a:	e001      	b.n	8001830 <DFSDMx_Init+0x8e4>
 800182c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001830:	4a51      	ldr	r2, [pc, #324]	; (8001978 <DFSDMx_Init+0xa2c>)
 8001832:	61d3      	str	r3, [r2, #28]
    /* Set the DFSDM Filters Oversampling to have correct sample rate */
    hAudioInButtomLeftFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800183a:	d02a      	beq.n	8001892 <DFSDMx_Init+0x946>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001842:	4293      	cmp	r3, r2
 8001844:	d022      	beq.n	800188c <DFSDMx_Init+0x940>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800184c:	d01c      	beq.n	8001888 <DFSDMx_Init+0x93c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f245 6222 	movw	r2, #22050	; 0x5622
 8001854:	4293      	cmp	r3, r2
 8001856:	d015      	beq.n	8001884 <DFSDMx_Init+0x938>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800185e:	d00f      	beq.n	8001880 <DFSDMx_Init+0x934>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001866:	4293      	cmp	r3, r2
 8001868:	d008      	beq.n	800187c <DFSDMx_Init+0x930>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <DFSDMx_Init+0x92c>
 8001874:	2340      	movs	r3, #64	; 0x40
 8001876:	e00e      	b.n	8001896 <DFSDMx_Init+0x94a>
 8001878:	2314      	movs	r3, #20
 800187a:	e00c      	b.n	8001896 <DFSDMx_Init+0x94a>
 800187c:	2340      	movs	r3, #64	; 0x40
 800187e:	e00a      	b.n	8001896 <DFSDMx_Init+0x94a>
 8001880:	2340      	movs	r3, #64	; 0x40
 8001882:	e008      	b.n	8001896 <DFSDMx_Init+0x94a>
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	e006      	b.n	8001896 <DFSDMx_Init+0x94a>
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	e004      	b.n	8001896 <DFSDMx_Init+0x94a>
 800188c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001890:	e001      	b.n	8001896 <DFSDMx_Init+0x94a>
 8001892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001896:	4a38      	ldr	r2, [pc, #224]	; (8001978 <DFSDMx_Init+0xa2c>)
 8001898:	6213      	str	r3, [r2, #32]
    hAudioInButtomLeftFilter.Init.FilterParam.IntOversampling  = 1;
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <DFSDMx_Init+0xa2c>)
 800189c:	2201      	movs	r2, #1
 800189e:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomLeftFilter))
 80018a0:	4835      	ldr	r0, [pc, #212]	; (8001978 <DFSDMx_Init+0xa2c>)
 80018a2:	f000 fced 	bl	8002280 <HAL_DFSDM_FilterInit>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <DFSDMx_Init+0x964>
    {
      return AUDIO_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0ba      	b.n	8001a26 <DFSDMx_Init+0xada>
    }

    /* Configure injected channel */
    if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomLeftFilter, AUDIO_DFSDMx_BUTTOM_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 80018b0:	2201      	movs	r2, #1
 80018b2:	4933      	ldr	r1, [pc, #204]	; (8001980 <DFSDMx_Init+0xa34>)
 80018b4:	4830      	ldr	r0, [pc, #192]	; (8001978 <DFSDMx_Init+0xa2c>)
 80018b6:	f000 fdc9 	bl	800244c <HAL_DFSDM_FilterConfigRegChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <DFSDMx_Init+0x978>
    {
      return AUDIO_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0b0      	b.n	8001a26 <DFSDMx_Init+0xada>
    }

    /* FILTER 3 configuration */
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomRightFilter);
 80018c4:	4b2f      	ldr	r3, [pc, #188]	; (8001984 <DFSDMx_Init+0xa38>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    hAudioInButtomRightFilter.Instance                          = AUDIO_DFSDMx_BUTTOM_RIGHT_FILTER;
 80018cc:	4b2d      	ldr	r3, [pc, #180]	; (8001984 <DFSDMx_Init+0xa38>)
 80018ce:	4a2e      	ldr	r2, [pc, #184]	; (8001988 <DFSDMx_Init+0xa3c>)
 80018d0:	601a      	str	r2, [r3, #0]
    hAudioInButtomRightFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <DFSDMx_Init+0xa38>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	605a      	str	r2, [r3, #4]
    hAudioInButtomRightFilter.Init.RegularParam.FastMode        = ENABLE;
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <DFSDMx_Init+0xa38>)
 80018da:	2201      	movs	r2, #1
 80018dc:	721a      	strb	r2, [r3, #8]
    hAudioInButtomRightFilter.Init.RegularParam.DmaMode         = ENABLE;
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <DFSDMx_Init+0xa38>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	725a      	strb	r2, [r3, #9]
    hAudioInButtomRightFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <DFSDMx_Init+0xa38>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
    hAudioInButtomRightFilter.Init.InjectedParam.ScanMode       = DISABLE;
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <DFSDMx_Init+0xa38>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	741a      	strb	r2, [r3, #16]
    hAudioInButtomRightFilter.Init.InjectedParam.DmaMode        = DISABLE;
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <DFSDMx_Init+0xa38>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	745a      	strb	r2, [r3, #17]
    hAudioInButtomRightFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <DFSDMx_Init+0xa38>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
    hAudioInButtomRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <DFSDMx_Init+0xa38>)
 80018fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001902:	619a      	str	r2, [r3, #24]
    hAudioInButtomRightFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800190a:	d03f      	beq.n	800198c <DFSDMx_Init+0xa40>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001912:	4293      	cmp	r3, r2
 8001914:	d028      	beq.n	8001968 <DFSDMx_Init+0xa1c>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800191c:	d021      	beq.n	8001962 <DFSDMx_Init+0xa16>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f245 6222 	movw	r2, #22050	; 0x5622
 8001924:	4293      	cmp	r3, r2
 8001926:	d019      	beq.n	800195c <DFSDMx_Init+0xa10>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800192e:	d012      	beq.n	8001956 <DFSDMx_Init+0xa0a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001936:	4293      	cmp	r3, r2
 8001938:	d00a      	beq.n	8001950 <DFSDMx_Init+0xa04>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <DFSDMx_Init+0x9fe>
 8001944:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001948:	e022      	b.n	8001990 <DFSDMx_Init+0xa44>
 800194a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800194e:	e01f      	b.n	8001990 <DFSDMx_Init+0xa44>
 8001950:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001954:	e01c      	b.n	8001990 <DFSDMx_Init+0xa44>
 8001956:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800195a:	e019      	b.n	8001990 <DFSDMx_Init+0xa44>
 800195c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001960:	e016      	b.n	8001990 <DFSDMx_Init+0xa44>
 8001962:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001966:	e013      	b.n	8001990 <DFSDMx_Init+0xa44>
 8001968:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800196c:	e010      	b.n	8001990 <DFSDMx_Init+0xa44>
 800196e:	bf00      	nop
 8001970:	20000c54 	.word	0x20000c54
 8001974:	20000008 	.word	0x20000008
 8001978:	20000bc8 	.word	0x20000bc8
 800197c:	40017200 	.word	0x40017200
 8001980:	00030008 	.word	0x00030008
 8001984:	20000818 	.word	0x20000818
 8001988:	40017280 	.word	0x40017280
 800198c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001990:	4a27      	ldr	r2, [pc, #156]	; (8001a30 <DFSDMx_Init+0xae4>)
 8001992:	61d3      	str	r3, [r2, #28]
    /* Set the DFSDM Filters Oversampling to have correct sample rate */
    hAudioInButtomRightFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800199a:	d02a      	beq.n	80019f2 <DFSDMx_Init+0xaa6>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f642 3211 	movw	r2, #11025	; 0x2b11
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d022      	beq.n	80019ec <DFSDMx_Init+0xaa0>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80019ac:	d01c      	beq.n	80019e8 <DFSDMx_Init+0xa9c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f245 6222 	movw	r2, #22050	; 0x5622
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d015      	beq.n	80019e4 <DFSDMx_Init+0xa98>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80019be:	d00f      	beq.n	80019e0 <DFSDMx_Init+0xa94>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d008      	beq.n	80019dc <DFSDMx_Init+0xa90>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <DFSDMx_Init+0xa8c>
 80019d4:	2340      	movs	r3, #64	; 0x40
 80019d6:	e00e      	b.n	80019f6 <DFSDMx_Init+0xaaa>
 80019d8:	2314      	movs	r3, #20
 80019da:	e00c      	b.n	80019f6 <DFSDMx_Init+0xaaa>
 80019dc:	2340      	movs	r3, #64	; 0x40
 80019de:	e00a      	b.n	80019f6 <DFSDMx_Init+0xaaa>
 80019e0:	2340      	movs	r3, #64	; 0x40
 80019e2:	e008      	b.n	80019f6 <DFSDMx_Init+0xaaa>
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	e006      	b.n	80019f6 <DFSDMx_Init+0xaaa>
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	e004      	b.n	80019f6 <DFSDMx_Init+0xaaa>
 80019ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f0:	e001      	b.n	80019f6 <DFSDMx_Init+0xaaa>
 80019f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f6:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <DFSDMx_Init+0xae4>)
 80019f8:	6213      	str	r3, [r2, #32]
    hAudioInButtomRightFilter.Init.FilterParam.IntOversampling  = 1;
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <DFSDMx_Init+0xae4>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomRightFilter))
 8001a00:	480b      	ldr	r0, [pc, #44]	; (8001a30 <DFSDMx_Init+0xae4>)
 8001a02:	f000 fc3d 	bl	8002280 <HAL_DFSDM_FilterInit>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <DFSDMx_Init+0xac4>
    {
      return AUDIO_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e00a      	b.n	8001a26 <DFSDMx_Init+0xada>
    }
    /* Configure injected channel */
    if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomRightFilter, AUDIO_DFSDMx_BUTTOM_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8001a10:	2201      	movs	r2, #1
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <DFSDMx_Init+0xae8>)
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <DFSDMx_Init+0xae4>)
 8001a16:	f000 fd19 	bl	800244c <HAL_DFSDM_FilterConfigRegChannel>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <DFSDMx_Init+0xad8>
    {
      return AUDIO_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <DFSDMx_Init+0xada>
    }
  }
  return AUDIO_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000818 	.word	0x20000818
 8001a34:	00020004 	.word	0x00020004

08001a38 <DFSDMx_ChannelMspInit>:
/**
  * @brief  Initialize the DFSDM channel MSP.
  * @retval None
  */
static void DFSDMx_ChannelMspInit(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <DFSDMx_ChannelMspInit+0xbc>)
 8001a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a44:	4a2b      	ldr	r2, [pc, #172]	; (8001af4 <DFSDMx_ChannelMspInit+0xbc>)
 8001a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a4e:	4b29      	ldr	r3, [pc, #164]	; (8001af4 <DFSDMx_ChannelMspInit+0xbc>)
 8001a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]

  /* Enable GPIO clock */
  AUDIO_DFSDMx_DMIC_DATIN_GPIO_CLK_ENABLE();
 8001a5c:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <DFSDMx_ChannelMspInit+0xbc>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a62:	4a24      	ldr	r2, [pc, #144]	; (8001af4 <DFSDMx_ChannelMspInit+0xbc>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6c:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <DFSDMx_ChannelMspInit+0xbc>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a72:	f003 0304 	and.w	r3, r3, #4
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  AUDIO_DFSDMx_CKOUT_DMIC_GPIO_CLK_ENABLE();
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <DFSDMx_ChannelMspInit+0xbc>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a80:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <DFSDMx_ChannelMspInit+0xbc>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <DFSDMx_ChannelMspInit+0xbc>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN1 pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_CKOUT_PIN;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_CKOUT_AF;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, &GPIO_InitStruct);
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4811      	ldr	r0, [pc, #68]	; (8001af8 <DFSDMx_ChannelMspInit+0xc0>)
 8001ab4:	f003 f908 	bl	8004cc8 <HAL_GPIO_Init>

  /* DFSDM pin configuration: DMIC_DATIN1 pin --------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN1_PIN;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 8001abc:	2303      	movs	r3, #3
 8001abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480d      	ldr	r0, [pc, #52]	; (8001afc <DFSDMx_ChannelMspInit+0xc4>)
 8001ac8:	f003 f8fe 	bl	8004cc8 <HAL_GPIO_Init>

  if(AudioIn_ChannelNumber > 2)
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <DFSDMx_ChannelMspInit+0xc8>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d90a      	bls.n	8001aea <DFSDMx_ChannelMspInit+0xb2>
  {
  /* DFSDM pin configuration: DMIC_DATIN5 pin --------------------------------*/
    GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN5_PIN;
 8001ad4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ad8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 8001ada:	2303      	movs	r3, #3
 8001adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <DFSDMx_ChannelMspInit+0xc4>)
 8001ae6:	f003 f8ef 	bl	8004cc8 <HAL_GPIO_Init>
  }
}
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	58024400 	.word	0x58024400
 8001af8:	58020c00 	.word	0x58020c00
 8001afc:	58020800 	.word	0x58020800
 8001b00:	20000008 	.word	0x20000008

08001b04 <DFSDMx_FilterMspInit>:
/**
  * @brief  Initialize the DFSDM filter MSP.
  * @retval None
  */
static void DFSDMx_FilterMspInit(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 8001b0a:	4b7d      	ldr	r3, [pc, #500]	; (8001d00 <DFSDMx_FilterMspInit+0x1fc>)
 8001b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b10:	4a7b      	ldr	r2, [pc, #492]	; (8001d00 <DFSDMx_FilterMspInit+0x1fc>)
 8001b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b1a:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <DFSDMx_FilterMspInit+0x1fc>)
 8001b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]

  /* Enable the DMA clock */
  AUDIO_DFSDMx_DMAx_CLK_ENABLE();
 8001b28:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <DFSDMx_FilterMspInit+0x1fc>)
 8001b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b2e:	4a74      	ldr	r2, [pc, #464]	; (8001d00 <DFSDMx_FilterMspInit+0x1fc>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b38:	4b71      	ldr	r3, [pc, #452]	; (8001d00 <DFSDMx_FilterMspInit+0x1fc>)
 8001b3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /*********** Configure DMA stream for TOP LEFT microphone *******************/
  hDmaTopLeft.Init.Request             = DMA_REQUEST_DFSDM1_FLT0;
 8001b46:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b48:	2265      	movs	r2, #101	; 0x65
 8001b4a:	605a      	str	r2, [r3, #4]
  hDmaTopLeft.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001b4c:	4b6d      	ldr	r3, [pc, #436]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hDmaTopLeft.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001b52:	4b6c      	ldr	r3, [pc, #432]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	60da      	str	r2, [r3, #12]
  hDmaTopLeft.Init.MemInc              = DMA_MINC_ENABLE;
 8001b58:	4b6a      	ldr	r3, [pc, #424]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b5e:	611a      	str	r2, [r3, #16]
  hDmaTopLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8001b60:	4b68      	ldr	r3, [pc, #416]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b66:	615a      	str	r2, [r3, #20]
  hDmaTopLeft.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8001b68:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6e:	619a      	str	r2, [r3, #24]
  hDmaTopLeft.Init.Mode                = DMA_CIRCULAR;
 8001b70:	4b64      	ldr	r3, [pc, #400]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b76:	61da      	str	r2, [r3, #28]
  hDmaTopLeft.Init.Priority            = DMA_PRIORITY_HIGH;
 8001b78:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b7e:	621a      	str	r2, [r3, #32]
  hDmaTopLeft.Instance                 = AUDIO_DFSDMx_DMAx_TOP_LEFT_STREAM;
 8001b80:	4b60      	ldr	r3, [pc, #384]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b82:	4a61      	ldr	r2, [pc, #388]	; (8001d08 <DFSDMx_FilterMspInit+0x204>)
 8001b84:	601a      	str	r2, [r3, #0]


  /* Associate the DMA handle */
  __HAL_LINKDMA(&hAudioInTopLeftFilter, hdmaReg, hDmaTopLeft);
 8001b86:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <DFSDMx_FilterMspInit+0x208>)
 8001b88:	4a5e      	ldr	r2, [pc, #376]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001b8c:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b8e:	4a5f      	ldr	r2, [pc, #380]	; (8001d0c <DFSDMx_FilterMspInit+0x208>)
 8001b90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset DMA handle state */
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopLeft);
 8001b92:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DMA Channel */
  HAL_DMA_Init(&hDmaTopLeft);
 8001b9a:	485a      	ldr	r0, [pc, #360]	; (8001d04 <DFSDMx_FilterMspInit+0x200>)
 8001b9c:	f000 fdfa 	bl	8002794 <HAL_DMA_Init>

  /* DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	200b      	movs	r0, #11
 8001ba6:	f000 fa64 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ);
 8001baa:	200b      	movs	r0, #11
 8001bac:	f000 fa7b 	bl	80020a6 <HAL_NVIC_EnableIRQ>


  /*********** Configure DMA stream for TOP RIGHT microphone ******************/
  hDmaTopRight.Init.Request             = DMA_REQUEST_DFSDM1_FLT1;
 8001bb0:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001bb2:	2266      	movs	r2, #102	; 0x66
 8001bb4:	605a      	str	r2, [r3, #4]
  hDmaTopRight.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001bb6:	4b56      	ldr	r3, [pc, #344]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  hDmaTopRight.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001bbc:	4b54      	ldr	r3, [pc, #336]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  hDmaTopRight.Init.MemInc              = DMA_MINC_ENABLE;
 8001bc2:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc8:	611a      	str	r2, [r3, #16]
  hDmaTopRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8001bca:	4b51      	ldr	r3, [pc, #324]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001bcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd0:	615a      	str	r2, [r3, #20]
  hDmaTopRight.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8001bd2:	4b4f      	ldr	r3, [pc, #316]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001bd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bd8:	619a      	str	r2, [r3, #24]
  hDmaTopRight.Init.Mode                = DMA_CIRCULAR;
 8001bda:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be0:	61da      	str	r2, [r3, #28]
  hDmaTopRight.Init.Priority            = DMA_PRIORITY_HIGH;
 8001be2:	4b4b      	ldr	r3, [pc, #300]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001be4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001be8:	621a      	str	r2, [r3, #32]
  hDmaTopRight.Instance                 = AUDIO_DFSDMx_DMAx_TOP_RIGHT_STREAM;
 8001bea:	4b49      	ldr	r3, [pc, #292]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001bec:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <DFSDMx_FilterMspInit+0x210>)
 8001bee:	601a      	str	r2, [r3, #0]

  /* Associate the DMA handle */
  __HAL_LINKDMA(&hAudioInTopRightFilter, hdmaReg, hDmaTopRight);
 8001bf0:	4b49      	ldr	r3, [pc, #292]	; (8001d18 <DFSDMx_FilterMspInit+0x214>)
 8001bf2:	4a47      	ldr	r2, [pc, #284]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001bf8:	4a47      	ldr	r2, [pc, #284]	; (8001d18 <DFSDMx_FilterMspInit+0x214>)
 8001bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset DMA handle state */
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopRight);
 8001bfc:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Configure the DMA Channel */
  HAL_DMA_Init(&hDmaTopRight);
 8001c04:	4842      	ldr	r0, [pc, #264]	; (8001d10 <DFSDMx_FilterMspInit+0x20c>)
 8001c06:	f000 fdc5 	bl	8002794 <HAL_DMA_Init>

  /* DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	2010      	movs	r0, #16
 8001c10:	f000 fa2f 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ);
 8001c14:	2010      	movs	r0, #16
 8001c16:	f000 fa46 	bl	80020a6 <HAL_NVIC_EnableIRQ>

  if(AudioIn_ChannelNumber > 2)
 8001c1a:	4b40      	ldr	r3, [pc, #256]	; (8001d1c <DFSDMx_FilterMspInit+0x218>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d969      	bls.n	8001cf6 <DFSDMx_FilterMspInit+0x1f2>
  {
    /*********** Configure DMA stream for BUTTOM LEFT microphone ****************/
	hDmaButtomLeft.Init.Request             = DMA_REQUEST_DFSDM1_FLT2;
 8001c22:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c24:	2267      	movs	r2, #103	; 0x67
 8001c26:	605a      	str	r2, [r3, #4]
    hDmaButtomLeft.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001c28:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
    hDmaButtomLeft.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001c2e:	4b3c      	ldr	r3, [pc, #240]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	60da      	str	r2, [r3, #12]
    hDmaButtomLeft.Init.MemInc              = DMA_MINC_ENABLE;
 8001c34:	4b3a      	ldr	r3, [pc, #232]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c3a:	611a      	str	r2, [r3, #16]
    hDmaButtomLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8001c3c:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c42:	615a      	str	r2, [r3, #20]
    hDmaButtomLeft.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8001c44:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c4a:	619a      	str	r2, [r3, #24]
    hDmaButtomLeft.Init.Mode                = DMA_CIRCULAR;
 8001c4c:	4b34      	ldr	r3, [pc, #208]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c52:	61da      	str	r2, [r3, #28]
    hDmaButtomLeft.Init.Priority            = DMA_PRIORITY_HIGH;
 8001c54:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c5a:	621a      	str	r2, [r3, #32]
    hDmaButtomLeft.Instance                 = AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_STREAM;
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c5e:	4a31      	ldr	r2, [pc, #196]	; (8001d24 <DFSDMx_FilterMspInit+0x220>)
 8001c60:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&hAudioInButtomLeftFilter, hdmaReg, hDmaButtomLeft);
 8001c62:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <DFSDMx_FilterMspInit+0x224>)
 8001c64:	4a2e      	ldr	r2, [pc, #184]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c6a:	4a2f      	ldr	r2, [pc, #188]	; (8001d28 <DFSDMx_FilterMspInit+0x224>)
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomLeft);
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Configure the DMA Channel */
    HAL_DMA_Init(&hDmaButtomLeft);
 8001c76:	482a      	ldr	r0, [pc, #168]	; (8001d20 <DFSDMx_FilterMspInit+0x21c>)
 8001c78:	f000 fd8c 	bl	8002794 <HAL_DMA_Init>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2104      	movs	r1, #4
 8001c80:	2011      	movs	r0, #17
 8001c82:	f000 f9f6 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ);
 8001c86:	2011      	movs	r0, #17
 8001c88:	f000 fa0d 	bl	80020a6 <HAL_NVIC_EnableIRQ>


    /*********** Configure DMA stream for BUTTOM RIGHT microphone ***************/
    hDmaButtomRight.Init.Request             = DMA_REQUEST_DFSDM1_FLT3;
 8001c8c:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001c8e:	2268      	movs	r2, #104	; 0x68
 8001c90:	605a      	str	r2, [r3, #4]
    hDmaButtomRight.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
    hDmaButtomRight.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
    hDmaButtomRight.Init.MemInc              = DMA_MINC_ENABLE;
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca4:	611a      	str	r2, [r3, #16]
    hDmaButtomRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001ca8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cac:	615a      	str	r2, [r3, #20]
    hDmaButtomRight.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
 8001cae:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001cb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cb4:	619a      	str	r2, [r3, #24]
    hDmaButtomRight.Init.Mode                = DMA_CIRCULAR;
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001cb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cbc:	61da      	str	r2, [r3, #28]
    hDmaButtomRight.Init.Priority            = DMA_PRIORITY_HIGH;
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001cc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cc4:	621a      	str	r2, [r3, #32]
    hDmaButtomRight.Instance                 = AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_STREAM;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <DFSDMx_FilterMspInit+0x22c>)
 8001cca:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&hAudioInButtomRightFilter, hdmaReg, hDmaButtomRight);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <DFSDMx_FilterMspInit+0x230>)
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001cd4:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <DFSDMx_FilterMspInit+0x230>)
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomRight);
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Configure the DMA Channel */
    HAL_DMA_Init(&hDmaButtomRight);
 8001ce0:	4812      	ldr	r0, [pc, #72]	; (8001d2c <DFSDMx_FilterMspInit+0x228>)
 8001ce2:	f000 fd57 	bl	8002794 <HAL_DMA_Init>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2104      	movs	r1, #4
 8001cea:	202f      	movs	r0, #47	; 0x2f
 8001cec:	f000 f9c1 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ);
 8001cf0:	202f      	movs	r0, #47	; 0x2f
 8001cf2:	f000 f9d8 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	58024400 	.word	0x58024400
 8001d04:	20000ae0 	.word	0x20000ae0
 8001d08:	40020010 	.word	0x40020010
 8001d0c:	20000a14 	.word	0x20000a14
 8001d10:	20000a68 	.word	0x20000a68
 8001d14:	40020088 	.word	0x40020088
 8001d18:	20000c54 	.word	0x20000c54
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000904 	.word	0x20000904
 8001d24:	400200a0 	.word	0x400200a0
 8001d28:	20000bc8 	.word	0x20000bc8
 8001d2c:	20000ce0 	.word	0x20000ce0
 8001d30:	400200b8 	.word	0x400200b8
 8001d34:	20000818 	.word	0x20000818

08001d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f000 f98c 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d44:	f005 f988 	bl	8007058 <HAL_RCC_GetSysClockFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_Init+0x68>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	4913      	ldr	r1, [pc, #76]	; (8001da4 <HAL_Init+0x6c>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_Init+0x68>)
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <HAL_Init+0x6c>)
 8001d6c:	5cd3      	ldrb	r3, [r2, r3]
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <HAL_Init+0x70>)
 8001d7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <HAL_Init+0x74>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d82:	2000      	movs	r0, #0
 8001d84:	f000 f814 	bl	8001db0 <HAL_InitTick>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e002      	b.n	8001d98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d92:	f7fe fcb5 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	58024400 	.word	0x58024400
 8001da4:	0800dd58 	.word	0x0800dd58
 8001da8:	20000004 	.word	0x20000004
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_InitTick+0x60>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e021      	b.n	8001e08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001dc4:	4b13      	ldr	r3, [pc, #76]	; (8001e14 <HAL_InitTick+0x64>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_InitTick+0x60>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f971 	bl	80020c2 <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f000 f93b 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <HAL_InitTick+0x68>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000010 	.word	0x20000010
 8001e14:	20000000 	.word	0x20000000
 8001e18:	2000000c 	.word	0x2000000c

08001e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_IncTick+0x20>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x24>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <HAL_IncTick+0x24>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000010 	.word	0x20000010
 8001e40:	20000d58 	.word	0x20000d58

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000d58 	.word	0x20000d58

08001e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff ffee 	bl	8001e44 <HAL_GetTick>
 8001e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d005      	beq.n	8001e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <HAL_Delay+0x44>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e82:	bf00      	nop
 8001e84:	f7ff ffde 	bl	8001e44 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d8f7      	bhi.n	8001e84 <HAL_Delay+0x28>
  {
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000010 	.word	0x20000010

08001ea4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ea8:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <HAL_GetREVID+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0c1b      	lsrs	r3, r3, #16
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	5c001000 	.word	0x5c001000

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <__NVIC_SetPriorityGrouping+0x40>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eea:	4a04      	ldr	r2, [pc, #16]	; (8001efc <__NVIC_SetPriorityGrouping+0x40>)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	60d3      	str	r3, [r2, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00
 8001f00:	05fa0000 	.word	0x05fa0000

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff29 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff40 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff90 	bl	8001fb0 <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5f 	bl	8001f5c <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff33 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffa4 	bl	8002018 <SysTick_Config>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0b4      	b.n	8002258 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80020ee:	4b5c      	ldr	r3, [pc, #368]	; (8002260 <HAL_DFSDM_ChannelInit+0x184>)
 80020f0:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 80020f2:	4b5c      	ldr	r3, [pc, #368]	; (8002264 <HAL_DFSDM_ChannelInit+0x188>)
 80020f4:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 80020f6:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <HAL_DFSDM_ChannelInit+0x18c>)
 80020f8:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 faa6 	bl	8002650 <DFSDM_GetChannelFromInstance>
 8002104:	4603      	mov	r3, r0
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0a0      	b.n	8002258 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f8a8 	bl	800226c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d125      	bne.n	800217a <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	431a      	orrs	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	791b      	ldrb	r3, [r3, #4]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d108      	bne.n	800216e <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	3b01      	subs	r3, #1
 8002166:	041b      	lsls	r3, r3, #16
 8002168:	431a      	orrs	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002188:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6819      	ldr	r1, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002198:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800219e:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 020f 	bic.w	r2, r2, #15
 80021b6:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80021de:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6899      	ldr	r1, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	3b01      	subs	r3, #1
 80021f0:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f002 0207 	and.w	r2, r2, #7
 800220a:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6859      	ldr	r1, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002236:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fa03 	bl	8002650 <DFSDM_GetChannelFromInstance>
 800224a:	4603      	mov	r3, r0
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4413      	add	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000264 	.word	0x20000264
 8002264:	20000268 	.word	0x20000268
 8002268:	40017000 	.word	0x40017000

0800226c <HAL_DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_ChannelMspInit could be implemented in the user file.
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e0c8      	b.n	8002424 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 8002292:	4b66      	ldr	r3, [pc, #408]	; (800242c <HAL_DFSDM_FilterInit+0x1ac>)
 8002294:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d109      	bne.n	80022b4 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d003      	beq.n	80022b0 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0b7      	b.n	8002424 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f8b3 	bl	8002438 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80022e0:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7a1b      	ldrb	r3, [r3, #8]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d108      	bne.n	80022fc <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e007      	b.n	800230c <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800230a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7a5b      	ldrb	r3, [r3, #9]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d108      	bne.n	8002326 <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e007      	b.n	8002336 <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HAL_DFSDM_FilterInit+0x1b0>)
 8002342:	400b      	ands	r3, r1
 8002344:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d108      	bne.n	8002360 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7c1b      	ldrb	r3, [r3, #16]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d108      	bne.n	800237a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0210 	orr.w	r2, r2, #16
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e007      	b.n	800238a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0210 	bic.w	r2, r2, #16
 8002388:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7c5b      	ldrb	r3, [r3, #17]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d108      	bne.n	80023a4 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0220 	orr.w	r2, r2, #32
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e007      	b.n	80023b4 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0220 	bic.w	r2, r2, #32
 80023b2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6959      	ldr	r1, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HAL_DFSDM_FilterInit+0x1b4>)
 80023c0:	400b      	ands	r3, r1
 80023c2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6959      	ldr	r1, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80023d6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80023de:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7c1a      	ldrb	r2, [r3, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f042 0201 	orr.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40017100 	.word	0x40017100
 8002430:	ffff80f7 	.word	0xffff80f7
 8002434:	1c00ff00 	.word	0x1c00ff00

08002438 <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d02c      	beq.n	80024c0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800246c:	2bff      	cmp	r3, #255	; 0xff
 800246e:	d027      	beq.n	80024c0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 800247c:	400b      	ands	r3, r1
 800247e:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d10d      	bne.n	80024a2 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002494:	431a      	orrs	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e00a      	b.n	80024b8 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
 80024be:	e001      	b.n	80024c4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	f8fbffff 	.word	0xf8fbffff

080024d8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	75fb      	strb	r3, [r7, #23]
 80024f8:	e066      	b.n	80025c8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002504:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002508:	d002      	beq.n	8002510 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
 800250e:	e05b      	b.n	80025c8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10e      	bne.n	8002536 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10a      	bne.n	8002536 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d002      	beq.n	8002536 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	75fb      	strb	r3, [r7, #23]
 8002534:	e048      	b.n	80025c8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10c      	bne.n	8002558 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002542:	2b00      	cmp	r3, #0
 8002544:	d108      	bne.n	8002558 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800254c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002550:	d102      	bne.n	8002558 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	75fb      	strb	r3, [r7, #23]
 8002556:	e037      	b.n	80025c8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800255e:	2b01      	cmp	r3, #1
 8002560:	d004      	beq.n	800256c <HAL_DFSDM_FilterRegularStart_DMA+0x94>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002568:	2b03      	cmp	r3, #3
 800256a:	d12b      	bne.n	80025c4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002572:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800257a:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002586:	d101      	bne.n	800258c <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8002588:	4a14      	ldr	r2, [pc, #80]	; (80025dc <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 800258a:	e000      	b.n	800258e <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 800258c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	331c      	adds	r3, #28
 800259e:	4619      	mov	r1, r3
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f000 fe08 	bl	80031b8 <HAL_DMA_Start_IT>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	22ff      	movs	r2, #255	; 0xff
 80025b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80025ba:	e005      	b.n	80025c8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f893 	bl	80026e8 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80025c2:	e001      	b.n	80025c8 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	08002611 	.word	0x08002611
 80025d8:	0800262d 	.word	0x0800262d
 80025dc:	080025f5 	.word	0x080025f5

080025e0 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002600:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7fe fbc6 	bl	8000d94 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261c:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7fe fb52 	bl	8000cc8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2203      	movs	r2, #3
 800263e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7ff ffcd 	bl	80025e0 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <DFSDM_GetChannelFromInstance+0x7c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d102      	bne.n	8002666 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e02b      	b.n	80026be <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <DFSDM_GetChannelFromInstance+0x80>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d102      	bne.n	8002674 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	e024      	b.n	80026be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <DFSDM_GetChannelFromInstance+0x84>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d102      	bne.n	8002682 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800267c:	2302      	movs	r3, #2
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e01d      	b.n	80026be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <DFSDM_GetChannelFromInstance+0x88>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d102      	bne.n	8002690 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800268a:	2303      	movs	r3, #3
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e016      	b.n	80026be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a12      	ldr	r2, [pc, #72]	; (80026dc <DFSDM_GetChannelFromInstance+0x8c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d102      	bne.n	800269e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002698:	2304      	movs	r3, #4
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	e00f      	b.n	80026be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a0f      	ldr	r2, [pc, #60]	; (80026e0 <DFSDM_GetChannelFromInstance+0x90>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d102      	bne.n	80026ac <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80026a6:	2305      	movs	r3, #5
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e008      	b.n	80026be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <DFSDM_GetChannelFromInstance+0x94>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d102      	bne.n	80026ba <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80026b4:	2306      	movs	r3, #6
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	e001      	b.n	80026be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80026ba:	2307      	movs	r3, #7
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80026be:	68fb      	ldr	r3, [r7, #12]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40017000 	.word	0x40017000
 80026d0:	40017020 	.word	0x40017020
 80026d4:	40017040 	.word	0x40017040
 80026d8:	40017060 	.word	0x40017060
 80026dc:	40017080 	.word	0x40017080
 80026e0:	400170a0 	.word	0x400170a0
 80026e4:	400170c0 	.word	0x400170c0

080026e8 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d108      	bne.n	800270a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e033      	b.n	8002772 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002728:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0201 	orr.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002740:	2b03      	cmp	r3, #3
 8002742:	d116      	bne.n	8002772 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	2b00      	cmp	r3, #0
 800274a:	d107      	bne.n	800275c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0202 	orr.w	r2, r2, #2
 800275a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002762:	2b01      	cmp	r3, #1
 8002764:	d102      	bne.n	800276c <DFSDM_RegConvStart+0x84>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	e000      	b.n	800276e <DFSDM_RegConvStart+0x86>
 800276c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <DFSDM_RegConvStart+0x98>
 800277c:	2202      	movs	r2, #2
 800277e:	e000      	b.n	8002782 <DFSDM_RegConvStart+0x9a>
 8002780:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff fb52 	bl	8001e44 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e316      	b.n	8002dda <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a66      	ldr	r2, [pc, #408]	; (800294c <HAL_DMA_Init+0x1b8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d04a      	beq.n	800284c <HAL_DMA_Init+0xb8>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a65      	ldr	r2, [pc, #404]	; (8002950 <HAL_DMA_Init+0x1bc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d045      	beq.n	800284c <HAL_DMA_Init+0xb8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a63      	ldr	r2, [pc, #396]	; (8002954 <HAL_DMA_Init+0x1c0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d040      	beq.n	800284c <HAL_DMA_Init+0xb8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a62      	ldr	r2, [pc, #392]	; (8002958 <HAL_DMA_Init+0x1c4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d03b      	beq.n	800284c <HAL_DMA_Init+0xb8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a60      	ldr	r2, [pc, #384]	; (800295c <HAL_DMA_Init+0x1c8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d036      	beq.n	800284c <HAL_DMA_Init+0xb8>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5f      	ldr	r2, [pc, #380]	; (8002960 <HAL_DMA_Init+0x1cc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d031      	beq.n	800284c <HAL_DMA_Init+0xb8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a5d      	ldr	r2, [pc, #372]	; (8002964 <HAL_DMA_Init+0x1d0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d02c      	beq.n	800284c <HAL_DMA_Init+0xb8>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a5c      	ldr	r2, [pc, #368]	; (8002968 <HAL_DMA_Init+0x1d4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d027      	beq.n	800284c <HAL_DMA_Init+0xb8>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a5a      	ldr	r2, [pc, #360]	; (800296c <HAL_DMA_Init+0x1d8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d022      	beq.n	800284c <HAL_DMA_Init+0xb8>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a59      	ldr	r2, [pc, #356]	; (8002970 <HAL_DMA_Init+0x1dc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d01d      	beq.n	800284c <HAL_DMA_Init+0xb8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_DMA_Init+0x1e0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d018      	beq.n	800284c <HAL_DMA_Init+0xb8>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a56      	ldr	r2, [pc, #344]	; (8002978 <HAL_DMA_Init+0x1e4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d013      	beq.n	800284c <HAL_DMA_Init+0xb8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a54      	ldr	r2, [pc, #336]	; (800297c <HAL_DMA_Init+0x1e8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00e      	beq.n	800284c <HAL_DMA_Init+0xb8>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a53      	ldr	r2, [pc, #332]	; (8002980 <HAL_DMA_Init+0x1ec>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d009      	beq.n	800284c <HAL_DMA_Init+0xb8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a51      	ldr	r2, [pc, #324]	; (8002984 <HAL_DMA_Init+0x1f0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <HAL_DMA_Init+0xb8>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a50      	ldr	r2, [pc, #320]	; (8002988 <HAL_DMA_Init+0x1f4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_DMA_Init+0xbc>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_DMA_Init+0xbe>
 8002850:	2300      	movs	r3, #0
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 813b 	beq.w	8002ace <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a37      	ldr	r2, [pc, #220]	; (800294c <HAL_DMA_Init+0x1b8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d04a      	beq.n	8002908 <HAL_DMA_Init+0x174>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a36      	ldr	r2, [pc, #216]	; (8002950 <HAL_DMA_Init+0x1bc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d045      	beq.n	8002908 <HAL_DMA_Init+0x174>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a34      	ldr	r2, [pc, #208]	; (8002954 <HAL_DMA_Init+0x1c0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d040      	beq.n	8002908 <HAL_DMA_Init+0x174>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a33      	ldr	r2, [pc, #204]	; (8002958 <HAL_DMA_Init+0x1c4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d03b      	beq.n	8002908 <HAL_DMA_Init+0x174>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a31      	ldr	r2, [pc, #196]	; (800295c <HAL_DMA_Init+0x1c8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d036      	beq.n	8002908 <HAL_DMA_Init+0x174>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a30      	ldr	r2, [pc, #192]	; (8002960 <HAL_DMA_Init+0x1cc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d031      	beq.n	8002908 <HAL_DMA_Init+0x174>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <HAL_DMA_Init+0x1d0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d02c      	beq.n	8002908 <HAL_DMA_Init+0x174>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <HAL_DMA_Init+0x1d4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d027      	beq.n	8002908 <HAL_DMA_Init+0x174>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2b      	ldr	r2, [pc, #172]	; (800296c <HAL_DMA_Init+0x1d8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d022      	beq.n	8002908 <HAL_DMA_Init+0x174>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <HAL_DMA_Init+0x1dc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d01d      	beq.n	8002908 <HAL_DMA_Init+0x174>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a28      	ldr	r2, [pc, #160]	; (8002974 <HAL_DMA_Init+0x1e0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d018      	beq.n	8002908 <HAL_DMA_Init+0x174>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_DMA_Init+0x1e4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d013      	beq.n	8002908 <HAL_DMA_Init+0x174>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a25      	ldr	r2, [pc, #148]	; (800297c <HAL_DMA_Init+0x1e8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00e      	beq.n	8002908 <HAL_DMA_Init+0x174>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a24      	ldr	r2, [pc, #144]	; (8002980 <HAL_DMA_Init+0x1ec>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d009      	beq.n	8002908 <HAL_DMA_Init+0x174>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a22      	ldr	r2, [pc, #136]	; (8002984 <HAL_DMA_Init+0x1f0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_DMA_Init+0x174>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a21      	ldr	r2, [pc, #132]	; (8002988 <HAL_DMA_Init+0x1f4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d108      	bne.n	800291a <HAL_DMA_Init+0x186>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e007      	b.n	800292a <HAL_DMA_Init+0x196>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800292a:	e02f      	b.n	800298c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800292c:	f7ff fa8a 	bl	8001e44 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b05      	cmp	r3, #5
 8002938:	d928      	bls.n	800298c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2220      	movs	r2, #32
 800293e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2203      	movs	r2, #3
 8002944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e246      	b.n	8002dda <HAL_DMA_Init+0x646>
 800294c:	40020010 	.word	0x40020010
 8002950:	40020028 	.word	0x40020028
 8002954:	40020040 	.word	0x40020040
 8002958:	40020058 	.word	0x40020058
 800295c:	40020070 	.word	0x40020070
 8002960:	40020088 	.word	0x40020088
 8002964:	400200a0 	.word	0x400200a0
 8002968:	400200b8 	.word	0x400200b8
 800296c:	40020410 	.word	0x40020410
 8002970:	40020428 	.word	0x40020428
 8002974:	40020440 	.word	0x40020440
 8002978:	40020458 	.word	0x40020458
 800297c:	40020470 	.word	0x40020470
 8002980:	40020488 	.word	0x40020488
 8002984:	400204a0 	.word	0x400204a0
 8002988:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1c8      	bne.n	800292c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4b83      	ldr	r3, [pc, #524]	; (8002bb4 <HAL_DMA_Init+0x420>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80029b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d107      	bne.n	80029f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4313      	orrs	r3, r2
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80029f0:	4b71      	ldr	r3, [pc, #452]	; (8002bb8 <HAL_DMA_Init+0x424>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b71      	ldr	r3, [pc, #452]	; (8002bbc <HAL_DMA_Init+0x428>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029fc:	d328      	bcc.n	8002a50 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b28      	cmp	r3, #40	; 0x28
 8002a04:	d903      	bls.n	8002a0e <HAL_DMA_Init+0x27a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002a0c:	d917      	bls.n	8002a3e <HAL_DMA_Init+0x2aa>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b3e      	cmp	r3, #62	; 0x3e
 8002a14:	d903      	bls.n	8002a1e <HAL_DMA_Init+0x28a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b42      	cmp	r3, #66	; 0x42
 8002a1c:	d90f      	bls.n	8002a3e <HAL_DMA_Init+0x2aa>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b46      	cmp	r3, #70	; 0x46
 8002a24:	d903      	bls.n	8002a2e <HAL_DMA_Init+0x29a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b48      	cmp	r3, #72	; 0x48
 8002a2c:	d907      	bls.n	8002a3e <HAL_DMA_Init+0x2aa>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b4e      	cmp	r3, #78	; 0x4e
 8002a34:	d905      	bls.n	8002a42 <HAL_DMA_Init+0x2ae>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b52      	cmp	r3, #82	; 0x52
 8002a3c:	d801      	bhi.n	8002a42 <HAL_DMA_Init+0x2ae>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_DMA_Init+0x2b0>
 8002a42:	2300      	movs	r3, #0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a4e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f023 0307 	bic.w	r3, r3, #7
 8002a66:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d117      	bne.n	8002aaa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00e      	beq.n	8002aaa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f001 ff91 	bl	80049b4 <DMA_CheckFifoParam>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2240      	movs	r2, #64	; 0x40
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e197      	b.n	8002dda <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f001 fecc 	bl	8004850 <DMA_CalcBaseAndBitshift>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	223f      	movs	r2, #63	; 0x3f
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	e0cd      	b.n	8002c6a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <HAL_DMA_Init+0x42c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d022      	beq.n	8002b1e <HAL_DMA_Init+0x38a>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a39      	ldr	r2, [pc, #228]	; (8002bc4 <HAL_DMA_Init+0x430>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01d      	beq.n	8002b1e <HAL_DMA_Init+0x38a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a38      	ldr	r2, [pc, #224]	; (8002bc8 <HAL_DMA_Init+0x434>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d018      	beq.n	8002b1e <HAL_DMA_Init+0x38a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a36      	ldr	r2, [pc, #216]	; (8002bcc <HAL_DMA_Init+0x438>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_DMA_Init+0x38a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a35      	ldr	r2, [pc, #212]	; (8002bd0 <HAL_DMA_Init+0x43c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00e      	beq.n	8002b1e <HAL_DMA_Init+0x38a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a33      	ldr	r2, [pc, #204]	; (8002bd4 <HAL_DMA_Init+0x440>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d009      	beq.n	8002b1e <HAL_DMA_Init+0x38a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a32      	ldr	r2, [pc, #200]	; (8002bd8 <HAL_DMA_Init+0x444>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_DMA_Init+0x38a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a30      	ldr	r2, [pc, #192]	; (8002bdc <HAL_DMA_Init+0x448>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_DMA_Init+0x38e>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_DMA_Init+0x390>
 8002b22:	2300      	movs	r3, #0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8097 	beq.w	8002c58 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <HAL_DMA_Init+0x42c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d021      	beq.n	8002b78 <HAL_DMA_Init+0x3e4>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <HAL_DMA_Init+0x430>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01c      	beq.n	8002b78 <HAL_DMA_Init+0x3e4>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a21      	ldr	r2, [pc, #132]	; (8002bc8 <HAL_DMA_Init+0x434>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d017      	beq.n	8002b78 <HAL_DMA_Init+0x3e4>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_DMA_Init+0x438>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d012      	beq.n	8002b78 <HAL_DMA_Init+0x3e4>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <HAL_DMA_Init+0x43c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00d      	beq.n	8002b78 <HAL_DMA_Init+0x3e4>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_DMA_Init+0x440>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d008      	beq.n	8002b78 <HAL_DMA_Init+0x3e4>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a1b      	ldr	r2, [pc, #108]	; (8002bd8 <HAL_DMA_Init+0x444>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <HAL_DMA_Init+0x3e4>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <HAL_DMA_Init+0x448>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_DMA_Init+0x44c>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d020      	beq.n	8002be4 <HAL_DMA_Init+0x450>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b80      	cmp	r3, #128	; 0x80
 8002ba8:	d102      	bne.n	8002bb0 <HAL_DMA_Init+0x41c>
 8002baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bae:	e01a      	b.n	8002be6 <HAL_DMA_Init+0x452>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e018      	b.n	8002be6 <HAL_DMA_Init+0x452>
 8002bb4:	fe10803f 	.word	0xfe10803f
 8002bb8:	5c001000 	.word	0x5c001000
 8002bbc:	ffff0000 	.word	0xffff0000
 8002bc0:	58025408 	.word	0x58025408
 8002bc4:	5802541c 	.word	0x5802541c
 8002bc8:	58025430 	.word	0x58025430
 8002bcc:	58025444 	.word	0x58025444
 8002bd0:	58025458 	.word	0x58025458
 8002bd4:	5802546c 	.word	0x5802546c
 8002bd8:	58025480 	.word	0x58025480
 8002bdc:	58025494 	.word	0x58025494
 8002be0:	fffe000f 	.word	0xfffe000f
 8002be4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68d2      	ldr	r2, [r2, #12]
 8002bea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b6e      	ldr	r3, [pc, #440]	; (8002de4 <HAL_DMA_Init+0x650>)
 8002c2c:	4413      	add	r3, r2
 8002c2e:	4a6e      	ldr	r2, [pc, #440]	; (8002de8 <HAL_DMA_Init+0x654>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	009a      	lsls	r2, r3, #2
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f001 fe07 	bl	8004850 <DMA_CalcBaseAndBitshift>
 8002c42:	4603      	mov	r3, r0
 8002c44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	2201      	movs	r2, #1
 8002c50:	409a      	lsls	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	e008      	b.n	8002c6a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2240      	movs	r2, #64	; 0x40
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2203      	movs	r2, #3
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0b7      	b.n	8002dda <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a5f      	ldr	r2, [pc, #380]	; (8002dec <HAL_DMA_Init+0x658>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d072      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a5d      	ldr	r2, [pc, #372]	; (8002df0 <HAL_DMA_Init+0x65c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d06d      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a5c      	ldr	r2, [pc, #368]	; (8002df4 <HAL_DMA_Init+0x660>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d068      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5a      	ldr	r2, [pc, #360]	; (8002df8 <HAL_DMA_Init+0x664>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d063      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a59      	ldr	r2, [pc, #356]	; (8002dfc <HAL_DMA_Init+0x668>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d05e      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a57      	ldr	r2, [pc, #348]	; (8002e00 <HAL_DMA_Init+0x66c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d059      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a56      	ldr	r2, [pc, #344]	; (8002e04 <HAL_DMA_Init+0x670>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d054      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a54      	ldr	r2, [pc, #336]	; (8002e08 <HAL_DMA_Init+0x674>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d04f      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a53      	ldr	r2, [pc, #332]	; (8002e0c <HAL_DMA_Init+0x678>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d04a      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a51      	ldr	r2, [pc, #324]	; (8002e10 <HAL_DMA_Init+0x67c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d045      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a50      	ldr	r2, [pc, #320]	; (8002e14 <HAL_DMA_Init+0x680>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d040      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a4e      	ldr	r2, [pc, #312]	; (8002e18 <HAL_DMA_Init+0x684>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d03b      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a4d      	ldr	r2, [pc, #308]	; (8002e1c <HAL_DMA_Init+0x688>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d036      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a4b      	ldr	r2, [pc, #300]	; (8002e20 <HAL_DMA_Init+0x68c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d031      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a4a      	ldr	r2, [pc, #296]	; (8002e24 <HAL_DMA_Init+0x690>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d02c      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a48      	ldr	r2, [pc, #288]	; (8002e28 <HAL_DMA_Init+0x694>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d027      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a47      	ldr	r2, [pc, #284]	; (8002e2c <HAL_DMA_Init+0x698>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d022      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a45      	ldr	r2, [pc, #276]	; (8002e30 <HAL_DMA_Init+0x69c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01d      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a44      	ldr	r2, [pc, #272]	; (8002e34 <HAL_DMA_Init+0x6a0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d018      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a42      	ldr	r2, [pc, #264]	; (8002e38 <HAL_DMA_Init+0x6a4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a41      	ldr	r2, [pc, #260]	; (8002e3c <HAL_DMA_Init+0x6a8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00e      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a3f      	ldr	r2, [pc, #252]	; (8002e40 <HAL_DMA_Init+0x6ac>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a3e      	ldr	r2, [pc, #248]	; (8002e44 <HAL_DMA_Init+0x6b0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_DMA_Init+0x5c6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a3c      	ldr	r2, [pc, #240]	; (8002e48 <HAL_DMA_Init+0x6b4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d101      	bne.n	8002d5e <HAL_DMA_Init+0x5ca>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_DMA_Init+0x5cc>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d032      	beq.n	8002dca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f001 fea1 	bl	8004aac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b80      	cmp	r3, #128	; 0x80
 8002d70:	d102      	bne.n	8002d78 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d010      	beq.n	8002db8 <HAL_DMA_Init+0x624>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d80c      	bhi.n	8002db8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f001 ff1e 	bl	8004be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	e008      	b.n	8002dca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	a7fdabf8 	.word	0xa7fdabf8
 8002de8:	cccccccd 	.word	0xcccccccd
 8002dec:	40020010 	.word	0x40020010
 8002df0:	40020028 	.word	0x40020028
 8002df4:	40020040 	.word	0x40020040
 8002df8:	40020058 	.word	0x40020058
 8002dfc:	40020070 	.word	0x40020070
 8002e00:	40020088 	.word	0x40020088
 8002e04:	400200a0 	.word	0x400200a0
 8002e08:	400200b8 	.word	0x400200b8
 8002e0c:	40020410 	.word	0x40020410
 8002e10:	40020428 	.word	0x40020428
 8002e14:	40020440 	.word	0x40020440
 8002e18:	40020458 	.word	0x40020458
 8002e1c:	40020470 	.word	0x40020470
 8002e20:	40020488 	.word	0x40020488
 8002e24:	400204a0 	.word	0x400204a0
 8002e28:	400204b8 	.word	0x400204b8
 8002e2c:	58025408 	.word	0x58025408
 8002e30:	5802541c 	.word	0x5802541c
 8002e34:	58025430 	.word	0x58025430
 8002e38:	58025444 	.word	0x58025444
 8002e3c:	58025458 	.word	0x58025458
 8002e40:	5802546c 	.word	0x5802546c
 8002e44:	58025480 	.word	0x58025480
 8002e48:	58025494 	.word	0x58025494

08002e4c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e1a8      	b.n	80031b0 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a82      	ldr	r2, [pc, #520]	; (800306c <HAL_DMA_DeInit+0x220>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d04a      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a80      	ldr	r2, [pc, #512]	; (8003070 <HAL_DMA_DeInit+0x224>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d045      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a7f      	ldr	r2, [pc, #508]	; (8003074 <HAL_DMA_DeInit+0x228>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d040      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a7d      	ldr	r2, [pc, #500]	; (8003078 <HAL_DMA_DeInit+0x22c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d03b      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7c      	ldr	r2, [pc, #496]	; (800307c <HAL_DMA_DeInit+0x230>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d036      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a7a      	ldr	r2, [pc, #488]	; (8003080 <HAL_DMA_DeInit+0x234>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d031      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a79      	ldr	r2, [pc, #484]	; (8003084 <HAL_DMA_DeInit+0x238>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d02c      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a77      	ldr	r2, [pc, #476]	; (8003088 <HAL_DMA_DeInit+0x23c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d027      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a76      	ldr	r2, [pc, #472]	; (800308c <HAL_DMA_DeInit+0x240>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d022      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a74      	ldr	r2, [pc, #464]	; (8003090 <HAL_DMA_DeInit+0x244>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01d      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a73      	ldr	r2, [pc, #460]	; (8003094 <HAL_DMA_DeInit+0x248>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d018      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a71      	ldr	r2, [pc, #452]	; (8003098 <HAL_DMA_DeInit+0x24c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a70      	ldr	r2, [pc, #448]	; (800309c <HAL_DMA_DeInit+0x250>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00e      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_DMA_DeInit+0x254>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d009      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a6d      	ldr	r2, [pc, #436]	; (80030a4 <HAL_DMA_DeInit+0x258>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_DMA_DeInit+0xb2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6b      	ldr	r2, [pc, #428]	; (80030a8 <HAL_DMA_DeInit+0x25c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d108      	bne.n	8002f10 <HAL_DMA_DeInit+0xc4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e007      	b.n	8002f20 <HAL_DMA_DeInit+0xd4>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a51      	ldr	r2, [pc, #324]	; (800306c <HAL_DMA_DeInit+0x220>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d04a      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a50      	ldr	r2, [pc, #320]	; (8003070 <HAL_DMA_DeInit+0x224>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d045      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a4e      	ldr	r2, [pc, #312]	; (8003074 <HAL_DMA_DeInit+0x228>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d040      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a4d      	ldr	r2, [pc, #308]	; (8003078 <HAL_DMA_DeInit+0x22c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d03b      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a4b      	ldr	r2, [pc, #300]	; (800307c <HAL_DMA_DeInit+0x230>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d036      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a4a      	ldr	r2, [pc, #296]	; (8003080 <HAL_DMA_DeInit+0x234>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d031      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a48      	ldr	r2, [pc, #288]	; (8003084 <HAL_DMA_DeInit+0x238>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d02c      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a47      	ldr	r2, [pc, #284]	; (8003088 <HAL_DMA_DeInit+0x23c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d027      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a45      	ldr	r2, [pc, #276]	; (800308c <HAL_DMA_DeInit+0x240>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d022      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a44      	ldr	r2, [pc, #272]	; (8003090 <HAL_DMA_DeInit+0x244>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d01d      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a42      	ldr	r2, [pc, #264]	; (8003094 <HAL_DMA_DeInit+0x248>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d018      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a41      	ldr	r2, [pc, #260]	; (8003098 <HAL_DMA_DeInit+0x24c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d013      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a3f      	ldr	r2, [pc, #252]	; (800309c <HAL_DMA_DeInit+0x250>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00e      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a3e      	ldr	r2, [pc, #248]	; (80030a0 <HAL_DMA_DeInit+0x254>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <HAL_DMA_DeInit+0x258>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_DMA_DeInit+0x174>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a3b      	ldr	r2, [pc, #236]	; (80030a8 <HAL_DMA_DeInit+0x25c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d101      	bne.n	8002fc4 <HAL_DMA_DeInit+0x178>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <HAL_DMA_DeInit+0x17a>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d025      	beq.n	8003016 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2221      	movs	r2, #33	; 0x21
 8002ff8:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f001 fc28 	bl	8004850 <DMA_CalcBaseAndBitshift>
 8003000:	4603      	mov	r3, r0
 8003002:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	223f      	movs	r2, #63	; 0x3f
 800300e:	409a      	lsls	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	e081      	b.n	800311a <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a24      	ldr	r2, [pc, #144]	; (80030ac <HAL_DMA_DeInit+0x260>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d022      	beq.n	8003066 <HAL_DMA_DeInit+0x21a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <HAL_DMA_DeInit+0x264>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01d      	beq.n	8003066 <HAL_DMA_DeInit+0x21a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a21      	ldr	r2, [pc, #132]	; (80030b4 <HAL_DMA_DeInit+0x268>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d018      	beq.n	8003066 <HAL_DMA_DeInit+0x21a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_DMA_DeInit+0x26c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_DMA_DeInit+0x21a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <HAL_DMA_DeInit+0x270>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00e      	beq.n	8003066 <HAL_DMA_DeInit+0x21a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_DMA_DeInit+0x274>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_DMA_DeInit+0x21a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <HAL_DMA_DeInit+0x278>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_DMA_DeInit+0x21a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_DMA_DeInit+0x27c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d132      	bne.n	80030cc <HAL_DMA_DeInit+0x280>
 8003066:	2301      	movs	r3, #1
 8003068:	e031      	b.n	80030ce <HAL_DMA_DeInit+0x282>
 800306a:	bf00      	nop
 800306c:	40020010 	.word	0x40020010
 8003070:	40020028 	.word	0x40020028
 8003074:	40020040 	.word	0x40020040
 8003078:	40020058 	.word	0x40020058
 800307c:	40020070 	.word	0x40020070
 8003080:	40020088 	.word	0x40020088
 8003084:	400200a0 	.word	0x400200a0
 8003088:	400200b8 	.word	0x400200b8
 800308c:	40020410 	.word	0x40020410
 8003090:	40020428 	.word	0x40020428
 8003094:	40020440 	.word	0x40020440
 8003098:	40020458 	.word	0x40020458
 800309c:	40020470 	.word	0x40020470
 80030a0:	40020488 	.word	0x40020488
 80030a4:	400204a0 	.word	0x400204a0
 80030a8:	400204b8 	.word	0x400204b8
 80030ac:	58025408 	.word	0x58025408
 80030b0:	5802541c 	.word	0x5802541c
 80030b4:	58025430 	.word	0x58025430
 80030b8:	58025444 	.word	0x58025444
 80030bc:	58025458 	.word	0x58025458
 80030c0:	5802546c 	.word	0x5802546c
 80030c4:	58025480 	.word	0x58025480
 80030c8:	58025494 	.word	0x58025494
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d021      	beq.n	8003116 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2200      	movs	r2, #0
 80030e0:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f001 fba8 	bl	8004850 <DMA_CalcBaseAndBitshift>
 8003100:	4603      	mov	r3, r0
 8003102:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	2201      	movs	r2, #1
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	e001      	b.n	800311a <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e04a      	b.n	80031b0 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f001 fcc6 	bl	8004aac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003138:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00f      	beq.n	8003162 <HAL_DMA_DeInit+0x316>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b08      	cmp	r3, #8
 8003148:	d80b      	bhi.n	8003162 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f001 fd48 	bl	8004be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003160:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e226      	b.n	8003622 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_DMA_Start_IT+0x2a>
 80031de:	2302      	movs	r3, #2
 80031e0:	e21f      	b.n	8003622 <HAL_DMA_Start_IT+0x46a>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	f040 820a 	bne.w	800360c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a68      	ldr	r2, [pc, #416]	; (80033ac <HAL_DMA_Start_IT+0x1f4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d04a      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a66      	ldr	r2, [pc, #408]	; (80033b0 <HAL_DMA_Start_IT+0x1f8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d045      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a65      	ldr	r2, [pc, #404]	; (80033b4 <HAL_DMA_Start_IT+0x1fc>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d040      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a63      	ldr	r2, [pc, #396]	; (80033b8 <HAL_DMA_Start_IT+0x200>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d03b      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a62      	ldr	r2, [pc, #392]	; (80033bc <HAL_DMA_Start_IT+0x204>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d036      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a60      	ldr	r2, [pc, #384]	; (80033c0 <HAL_DMA_Start_IT+0x208>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d031      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a5f      	ldr	r2, [pc, #380]	; (80033c4 <HAL_DMA_Start_IT+0x20c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d02c      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5d      	ldr	r2, [pc, #372]	; (80033c8 <HAL_DMA_Start_IT+0x210>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d027      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a5c      	ldr	r2, [pc, #368]	; (80033cc <HAL_DMA_Start_IT+0x214>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d022      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a5a      	ldr	r2, [pc, #360]	; (80033d0 <HAL_DMA_Start_IT+0x218>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01d      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a59      	ldr	r2, [pc, #356]	; (80033d4 <HAL_DMA_Start_IT+0x21c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d018      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a57      	ldr	r2, [pc, #348]	; (80033d8 <HAL_DMA_Start_IT+0x220>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a56      	ldr	r2, [pc, #344]	; (80033dc <HAL_DMA_Start_IT+0x224>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00e      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a54      	ldr	r2, [pc, #336]	; (80033e0 <HAL_DMA_Start_IT+0x228>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d009      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a53      	ldr	r2, [pc, #332]	; (80033e4 <HAL_DMA_Start_IT+0x22c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d004      	beq.n	80032a6 <HAL_DMA_Start_IT+0xee>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a51      	ldr	r2, [pc, #324]	; (80033e8 <HAL_DMA_Start_IT+0x230>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d108      	bne.n	80032b8 <HAL_DMA_Start_IT+0x100>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e007      	b.n	80032c8 <HAL_DMA_Start_IT+0x110>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f001 f912 	bl	80044f8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a34      	ldr	r2, [pc, #208]	; (80033ac <HAL_DMA_Start_IT+0x1f4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d04a      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a33      	ldr	r2, [pc, #204]	; (80033b0 <HAL_DMA_Start_IT+0x1f8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d045      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <HAL_DMA_Start_IT+0x1fc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d040      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a30      	ldr	r2, [pc, #192]	; (80033b8 <HAL_DMA_Start_IT+0x200>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d03b      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2e      	ldr	r2, [pc, #184]	; (80033bc <HAL_DMA_Start_IT+0x204>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d036      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2d      	ldr	r2, [pc, #180]	; (80033c0 <HAL_DMA_Start_IT+0x208>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d031      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2b      	ldr	r2, [pc, #172]	; (80033c4 <HAL_DMA_Start_IT+0x20c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02c      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2a      	ldr	r2, [pc, #168]	; (80033c8 <HAL_DMA_Start_IT+0x210>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d027      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a28      	ldr	r2, [pc, #160]	; (80033cc <HAL_DMA_Start_IT+0x214>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d022      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a27      	ldr	r2, [pc, #156]	; (80033d0 <HAL_DMA_Start_IT+0x218>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d01d      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <HAL_DMA_Start_IT+0x21c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d018      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <HAL_DMA_Start_IT+0x220>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a22      	ldr	r2, [pc, #136]	; (80033dc <HAL_DMA_Start_IT+0x224>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00e      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <HAL_DMA_Start_IT+0x228>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <HAL_DMA_Start_IT+0x22c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_DMA_Start_IT+0x1bc>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_DMA_Start_IT+0x230>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d101      	bne.n	8003378 <HAL_DMA_Start_IT+0x1c0>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <HAL_DMA_Start_IT+0x1c2>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d036      	beq.n	80033ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f023 021e 	bic.w	r2, r3, #30
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0216 	orr.w	r2, r2, #22
 8003390:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d03e      	beq.n	8003418 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0208 	orr.w	r2, r2, #8
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e035      	b.n	8003418 <HAL_DMA_Start_IT+0x260>
 80033ac:	40020010 	.word	0x40020010
 80033b0:	40020028 	.word	0x40020028
 80033b4:	40020040 	.word	0x40020040
 80033b8:	40020058 	.word	0x40020058
 80033bc:	40020070 	.word	0x40020070
 80033c0:	40020088 	.word	0x40020088
 80033c4:	400200a0 	.word	0x400200a0
 80033c8:	400200b8 	.word	0x400200b8
 80033cc:	40020410 	.word	0x40020410
 80033d0:	40020428 	.word	0x40020428
 80033d4:	40020440 	.word	0x40020440
 80033d8:	40020458 	.word	0x40020458
 80033dc:	40020470 	.word	0x40020470
 80033e0:	40020488 	.word	0x40020488
 80033e4:	400204a0 	.word	0x400204a0
 80033e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 020e 	bic.w	r2, r3, #14
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 020a 	orr.w	r2, r2, #10
 80033fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0204 	orr.w	r2, r2, #4
 8003416:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a83      	ldr	r2, [pc, #524]	; (800362c <HAL_DMA_Start_IT+0x474>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d072      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a82      	ldr	r2, [pc, #520]	; (8003630 <HAL_DMA_Start_IT+0x478>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d06d      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a80      	ldr	r2, [pc, #512]	; (8003634 <HAL_DMA_Start_IT+0x47c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d068      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7f      	ldr	r2, [pc, #508]	; (8003638 <HAL_DMA_Start_IT+0x480>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d063      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a7d      	ldr	r2, [pc, #500]	; (800363c <HAL_DMA_Start_IT+0x484>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d05e      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a7c      	ldr	r2, [pc, #496]	; (8003640 <HAL_DMA_Start_IT+0x488>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d059      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a7a      	ldr	r2, [pc, #488]	; (8003644 <HAL_DMA_Start_IT+0x48c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d054      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a79      	ldr	r2, [pc, #484]	; (8003648 <HAL_DMA_Start_IT+0x490>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04f      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a77      	ldr	r2, [pc, #476]	; (800364c <HAL_DMA_Start_IT+0x494>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d04a      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a76      	ldr	r2, [pc, #472]	; (8003650 <HAL_DMA_Start_IT+0x498>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d045      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a74      	ldr	r2, [pc, #464]	; (8003654 <HAL_DMA_Start_IT+0x49c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d040      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a73      	ldr	r2, [pc, #460]	; (8003658 <HAL_DMA_Start_IT+0x4a0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d03b      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a71      	ldr	r2, [pc, #452]	; (800365c <HAL_DMA_Start_IT+0x4a4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d036      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a70      	ldr	r2, [pc, #448]	; (8003660 <HAL_DMA_Start_IT+0x4a8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d031      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a6e      	ldr	r2, [pc, #440]	; (8003664 <HAL_DMA_Start_IT+0x4ac>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d02c      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6d      	ldr	r2, [pc, #436]	; (8003668 <HAL_DMA_Start_IT+0x4b0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d027      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a6b      	ldr	r2, [pc, #428]	; (800366c <HAL_DMA_Start_IT+0x4b4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d022      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6a      	ldr	r2, [pc, #424]	; (8003670 <HAL_DMA_Start_IT+0x4b8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d01d      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a68      	ldr	r2, [pc, #416]	; (8003674 <HAL_DMA_Start_IT+0x4bc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d018      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a67      	ldr	r2, [pc, #412]	; (8003678 <HAL_DMA_Start_IT+0x4c0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d013      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a65      	ldr	r2, [pc, #404]	; (800367c <HAL_DMA_Start_IT+0x4c4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00e      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a64      	ldr	r2, [pc, #400]	; (8003680 <HAL_DMA_Start_IT+0x4c8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d009      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a62      	ldr	r2, [pc, #392]	; (8003684 <HAL_DMA_Start_IT+0x4cc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <HAL_DMA_Start_IT+0x350>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a61      	ldr	r2, [pc, #388]	; (8003688 <HAL_DMA_Start_IT+0x4d0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_DMA_Start_IT+0x354>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <HAL_DMA_Start_IT+0x356>
 800350c:	2300      	movs	r3, #0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01a      	beq.n	8003548 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800352e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003546:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a37      	ldr	r2, [pc, #220]	; (800362c <HAL_DMA_Start_IT+0x474>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d04a      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a36      	ldr	r2, [pc, #216]	; (8003630 <HAL_DMA_Start_IT+0x478>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d045      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a34      	ldr	r2, [pc, #208]	; (8003634 <HAL_DMA_Start_IT+0x47c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d040      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a33      	ldr	r2, [pc, #204]	; (8003638 <HAL_DMA_Start_IT+0x480>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d03b      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a31      	ldr	r2, [pc, #196]	; (800363c <HAL_DMA_Start_IT+0x484>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d036      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a30      	ldr	r2, [pc, #192]	; (8003640 <HAL_DMA_Start_IT+0x488>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d031      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2e      	ldr	r2, [pc, #184]	; (8003644 <HAL_DMA_Start_IT+0x48c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02c      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2d      	ldr	r2, [pc, #180]	; (8003648 <HAL_DMA_Start_IT+0x490>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d027      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a2b      	ldr	r2, [pc, #172]	; (800364c <HAL_DMA_Start_IT+0x494>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d022      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <HAL_DMA_Start_IT+0x498>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d01d      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a28      	ldr	r2, [pc, #160]	; (8003654 <HAL_DMA_Start_IT+0x49c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d018      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a27      	ldr	r2, [pc, #156]	; (8003658 <HAL_DMA_Start_IT+0x4a0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a25      	ldr	r2, [pc, #148]	; (800365c <HAL_DMA_Start_IT+0x4a4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00e      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a24      	ldr	r2, [pc, #144]	; (8003660 <HAL_DMA_Start_IT+0x4a8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d009      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a22      	ldr	r2, [pc, #136]	; (8003664 <HAL_DMA_Start_IT+0x4ac>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_DMA_Start_IT+0x430>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a21      	ldr	r2, [pc, #132]	; (8003668 <HAL_DMA_Start_IT+0x4b0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d108      	bne.n	80035fa <HAL_DMA_Start_IT+0x442>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e012      	b.n	8003620 <HAL_DMA_Start_IT+0x468>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0201 	orr.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e009      	b.n	8003620 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800361a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003620:	7dfb      	ldrb	r3, [r7, #23]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40020010 	.word	0x40020010
 8003630:	40020028 	.word	0x40020028
 8003634:	40020040 	.word	0x40020040
 8003638:	40020058 	.word	0x40020058
 800363c:	40020070 	.word	0x40020070
 8003640:	40020088 	.word	0x40020088
 8003644:	400200a0 	.word	0x400200a0
 8003648:	400200b8 	.word	0x400200b8
 800364c:	40020410 	.word	0x40020410
 8003650:	40020428 	.word	0x40020428
 8003654:	40020440 	.word	0x40020440
 8003658:	40020458 	.word	0x40020458
 800365c:	40020470 	.word	0x40020470
 8003660:	40020488 	.word	0x40020488
 8003664:	400204a0 	.word	0x400204a0
 8003668:	400204b8 	.word	0x400204b8
 800366c:	58025408 	.word	0x58025408
 8003670:	5802541c 	.word	0x5802541c
 8003674:	58025430 	.word	0x58025430
 8003678:	58025444 	.word	0x58025444
 800367c:	58025458 	.word	0x58025458
 8003680:	5802546c 	.word	0x5802546c
 8003684:	58025480 	.word	0x58025480
 8003688:	58025494 	.word	0x58025494

0800368c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003698:	4b67      	ldr	r3, [pc, #412]	; (8003838 <HAL_DMA_IRQHandler+0x1ac>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a67      	ldr	r2, [pc, #412]	; (800383c <HAL_DMA_IRQHandler+0x1b0>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	0a9b      	lsrs	r3, r3, #10
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a5f      	ldr	r2, [pc, #380]	; (8003840 <HAL_DMA_IRQHandler+0x1b4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d04a      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a5d      	ldr	r2, [pc, #372]	; (8003844 <HAL_DMA_IRQHandler+0x1b8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d045      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a5c      	ldr	r2, [pc, #368]	; (8003848 <HAL_DMA_IRQHandler+0x1bc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d040      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a5a      	ldr	r2, [pc, #360]	; (800384c <HAL_DMA_IRQHandler+0x1c0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d03b      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a59      	ldr	r2, [pc, #356]	; (8003850 <HAL_DMA_IRQHandler+0x1c4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d036      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a57      	ldr	r2, [pc, #348]	; (8003854 <HAL_DMA_IRQHandler+0x1c8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d031      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a56      	ldr	r2, [pc, #344]	; (8003858 <HAL_DMA_IRQHandler+0x1cc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d02c      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a54      	ldr	r2, [pc, #336]	; (800385c <HAL_DMA_IRQHandler+0x1d0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d027      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a53      	ldr	r2, [pc, #332]	; (8003860 <HAL_DMA_IRQHandler+0x1d4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d022      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a51      	ldr	r2, [pc, #324]	; (8003864 <HAL_DMA_IRQHandler+0x1d8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01d      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a50      	ldr	r2, [pc, #320]	; (8003868 <HAL_DMA_IRQHandler+0x1dc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d018      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a4e      	ldr	r2, [pc, #312]	; (800386c <HAL_DMA_IRQHandler+0x1e0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a4d      	ldr	r2, [pc, #308]	; (8003870 <HAL_DMA_IRQHandler+0x1e4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00e      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a4b      	ldr	r2, [pc, #300]	; (8003874 <HAL_DMA_IRQHandler+0x1e8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d009      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a4a      	ldr	r2, [pc, #296]	; (8003878 <HAL_DMA_IRQHandler+0x1ec>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_DMA_IRQHandler+0xd2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a48      	ldr	r2, [pc, #288]	; (800387c <HAL_DMA_IRQHandler+0x1f0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_DMA_IRQHandler+0xd6>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_DMA_IRQHandler+0xd8>
 8003762:	2300      	movs	r3, #0
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 842b 	beq.w	8003fc0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	2208      	movs	r2, #8
 8003774:	409a      	lsls	r2, r3
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80a2 	beq.w	80038c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a2e      	ldr	r2, [pc, #184]	; (8003840 <HAL_DMA_IRQHandler+0x1b4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d04a      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2d      	ldr	r2, [pc, #180]	; (8003844 <HAL_DMA_IRQHandler+0x1b8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d045      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <HAL_DMA_IRQHandler+0x1bc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d040      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a2a      	ldr	r2, [pc, #168]	; (800384c <HAL_DMA_IRQHandler+0x1c0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d03b      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a28      	ldr	r2, [pc, #160]	; (8003850 <HAL_DMA_IRQHandler+0x1c4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d036      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a27      	ldr	r2, [pc, #156]	; (8003854 <HAL_DMA_IRQHandler+0x1c8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d031      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a25      	ldr	r2, [pc, #148]	; (8003858 <HAL_DMA_IRQHandler+0x1cc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d02c      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a24      	ldr	r2, [pc, #144]	; (800385c <HAL_DMA_IRQHandler+0x1d0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d027      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a22      	ldr	r2, [pc, #136]	; (8003860 <HAL_DMA_IRQHandler+0x1d4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d022      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a21      	ldr	r2, [pc, #132]	; (8003864 <HAL_DMA_IRQHandler+0x1d8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d01d      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <HAL_DMA_IRQHandler+0x1dc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d018      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_DMA_IRQHandler+0x1e0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <HAL_DMA_IRQHandler+0x1e4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00e      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1b      	ldr	r2, [pc, #108]	; (8003874 <HAL_DMA_IRQHandler+0x1e8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a19      	ldr	r2, [pc, #100]	; (8003878 <HAL_DMA_IRQHandler+0x1ec>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_DMA_IRQHandler+0x194>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a18      	ldr	r2, [pc, #96]	; (800387c <HAL_DMA_IRQHandler+0x1f0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d12f      	bne.n	8003880 <HAL_DMA_IRQHandler+0x1f4>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf14      	ite	ne
 800382e:	2301      	movne	r3, #1
 8003830:	2300      	moveq	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	e02e      	b.n	8003894 <HAL_DMA_IRQHandler+0x208>
 8003836:	bf00      	nop
 8003838:	20000000 	.word	0x20000000
 800383c:	1b4e81b5 	.word	0x1b4e81b5
 8003840:	40020010 	.word	0x40020010
 8003844:	40020028 	.word	0x40020028
 8003848:	40020040 	.word	0x40020040
 800384c:	40020058 	.word	0x40020058
 8003850:	40020070 	.word	0x40020070
 8003854:	40020088 	.word	0x40020088
 8003858:	400200a0 	.word	0x400200a0
 800385c:	400200b8 	.word	0x400200b8
 8003860:	40020410 	.word	0x40020410
 8003864:	40020428 	.word	0x40020428
 8003868:	40020440 	.word	0x40020440
 800386c:	40020458 	.word	0x40020458
 8003870:	40020470 	.word	0x40020470
 8003874:	40020488 	.word	0x40020488
 8003878:	400204a0 	.word	0x400204a0
 800387c:	400204b8 	.word	0x400204b8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d015      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0204 	bic.w	r2, r2, #4
 80038a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2208      	movs	r2, #8
 80038b2:	409a      	lsls	r2, r3
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038bc:	f043 0201 	orr.w	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c8:	f003 031f 	and.w	r3, r3, #31
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d06e      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a69      	ldr	r2, [pc, #420]	; (8003a84 <HAL_DMA_IRQHandler+0x3f8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d04a      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a67      	ldr	r2, [pc, #412]	; (8003a88 <HAL_DMA_IRQHandler+0x3fc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d045      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a66      	ldr	r2, [pc, #408]	; (8003a8c <HAL_DMA_IRQHandler+0x400>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d040      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a64      	ldr	r2, [pc, #400]	; (8003a90 <HAL_DMA_IRQHandler+0x404>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d03b      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a63      	ldr	r2, [pc, #396]	; (8003a94 <HAL_DMA_IRQHandler+0x408>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d036      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a61      	ldr	r2, [pc, #388]	; (8003a98 <HAL_DMA_IRQHandler+0x40c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d031      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a60      	ldr	r2, [pc, #384]	; (8003a9c <HAL_DMA_IRQHandler+0x410>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d02c      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5e      	ldr	r2, [pc, #376]	; (8003aa0 <HAL_DMA_IRQHandler+0x414>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d027      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a5d      	ldr	r2, [pc, #372]	; (8003aa4 <HAL_DMA_IRQHandler+0x418>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d022      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a5b      	ldr	r2, [pc, #364]	; (8003aa8 <HAL_DMA_IRQHandler+0x41c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d01d      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a5a      	ldr	r2, [pc, #360]	; (8003aac <HAL_DMA_IRQHandler+0x420>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d018      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a58      	ldr	r2, [pc, #352]	; (8003ab0 <HAL_DMA_IRQHandler+0x424>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d013      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a57      	ldr	r2, [pc, #348]	; (8003ab4 <HAL_DMA_IRQHandler+0x428>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00e      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a55      	ldr	r2, [pc, #340]	; (8003ab8 <HAL_DMA_IRQHandler+0x42c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d009      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a54      	ldr	r2, [pc, #336]	; (8003abc <HAL_DMA_IRQHandler+0x430>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d004      	beq.n	800397a <HAL_DMA_IRQHandler+0x2ee>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a52      	ldr	r2, [pc, #328]	; (8003ac0 <HAL_DMA_IRQHandler+0x434>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d10a      	bne.n	8003990 <HAL_DMA_IRQHandler+0x304>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e003      	b.n	8003998 <HAL_DMA_IRQHandler+0x30c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00d      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	2201      	movs	r2, #1
 80039a6:	409a      	lsls	r2, r3
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f043 0202 	orr.w	r2, r3, #2
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2204      	movs	r2, #4
 80039c2:	409a      	lsls	r2, r3
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 808f 	beq.w	8003aec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2c      	ldr	r2, [pc, #176]	; (8003a84 <HAL_DMA_IRQHandler+0x3f8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d04a      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <HAL_DMA_IRQHandler+0x3fc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d045      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <HAL_DMA_IRQHandler+0x400>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d040      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a27      	ldr	r2, [pc, #156]	; (8003a90 <HAL_DMA_IRQHandler+0x404>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d03b      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a26      	ldr	r2, [pc, #152]	; (8003a94 <HAL_DMA_IRQHandler+0x408>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d036      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <HAL_DMA_IRQHandler+0x40c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d031      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a23      	ldr	r2, [pc, #140]	; (8003a9c <HAL_DMA_IRQHandler+0x410>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d02c      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <HAL_DMA_IRQHandler+0x414>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d027      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <HAL_DMA_IRQHandler+0x418>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d022      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <HAL_DMA_IRQHandler+0x41c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d01d      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1d      	ldr	r2, [pc, #116]	; (8003aac <HAL_DMA_IRQHandler+0x420>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d018      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <HAL_DMA_IRQHandler+0x424>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <HAL_DMA_IRQHandler+0x428>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00e      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_DMA_IRQHandler+0x42c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d009      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a17      	ldr	r2, [pc, #92]	; (8003abc <HAL_DMA_IRQHandler+0x430>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x3e2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a15      	ldr	r2, [pc, #84]	; (8003ac0 <HAL_DMA_IRQHandler+0x434>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d12a      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x438>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e023      	b.n	8003acc <HAL_DMA_IRQHandler+0x440>
 8003a84:	40020010 	.word	0x40020010
 8003a88:	40020028 	.word	0x40020028
 8003a8c:	40020040 	.word	0x40020040
 8003a90:	40020058 	.word	0x40020058
 8003a94:	40020070 	.word	0x40020070
 8003a98:	40020088 	.word	0x40020088
 8003a9c:	400200a0 	.word	0x400200a0
 8003aa0:	400200b8 	.word	0x400200b8
 8003aa4:	40020410 	.word	0x40020410
 8003aa8:	40020428 	.word	0x40020428
 8003aac:	40020440 	.word	0x40020440
 8003ab0:	40020458 	.word	0x40020458
 8003ab4:	40020470 	.word	0x40020470
 8003ab8:	40020488 	.word	0x40020488
 8003abc:	400204a0 	.word	0x400204a0
 8003ac0:	400204b8 	.word	0x400204b8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2300      	movs	r3, #0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00d      	beq.n	8003aec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	2204      	movs	r2, #4
 8003ada:	409a      	lsls	r2, r3
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	f043 0204 	orr.w	r2, r3, #4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	2210      	movs	r2, #16
 8003af6:	409a      	lsls	r2, r3
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 80a6 	beq.w	8003c4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a85      	ldr	r2, [pc, #532]	; (8003d1c <HAL_DMA_IRQHandler+0x690>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d04a      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a83      	ldr	r2, [pc, #524]	; (8003d20 <HAL_DMA_IRQHandler+0x694>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d045      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a82      	ldr	r2, [pc, #520]	; (8003d24 <HAL_DMA_IRQHandler+0x698>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d040      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a80      	ldr	r2, [pc, #512]	; (8003d28 <HAL_DMA_IRQHandler+0x69c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d03b      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a7f      	ldr	r2, [pc, #508]	; (8003d2c <HAL_DMA_IRQHandler+0x6a0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d036      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a7d      	ldr	r2, [pc, #500]	; (8003d30 <HAL_DMA_IRQHandler+0x6a4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d031      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a7c      	ldr	r2, [pc, #496]	; (8003d34 <HAL_DMA_IRQHandler+0x6a8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d02c      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a7a      	ldr	r2, [pc, #488]	; (8003d38 <HAL_DMA_IRQHandler+0x6ac>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d027      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a79      	ldr	r2, [pc, #484]	; (8003d3c <HAL_DMA_IRQHandler+0x6b0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d022      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a77      	ldr	r2, [pc, #476]	; (8003d40 <HAL_DMA_IRQHandler+0x6b4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01d      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a76      	ldr	r2, [pc, #472]	; (8003d44 <HAL_DMA_IRQHandler+0x6b8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d018      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a74      	ldr	r2, [pc, #464]	; (8003d48 <HAL_DMA_IRQHandler+0x6bc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a73      	ldr	r2, [pc, #460]	; (8003d4c <HAL_DMA_IRQHandler+0x6c0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a71      	ldr	r2, [pc, #452]	; (8003d50 <HAL_DMA_IRQHandler+0x6c4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a70      	ldr	r2, [pc, #448]	; (8003d54 <HAL_DMA_IRQHandler+0x6c8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x516>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a6e      	ldr	r2, [pc, #440]	; (8003d58 <HAL_DMA_IRQHandler+0x6cc>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x52c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	e009      	b.n	8003bcc <HAL_DMA_IRQHandler+0x540>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf14      	ite	ne
 8003bc6:	2301      	movne	r3, #1
 8003bc8:	2300      	moveq	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d03e      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2210      	movs	r2, #16
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d018      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d108      	bne.n	8003c0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d024      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
 8003c0c:	e01f      	b.n	8003c4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01b      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
 8003c1e:	e016      	b.n	8003c4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d107      	bne.n	8003c3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0208 	bic.w	r2, r2, #8
 8003c3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2220      	movs	r2, #32
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8110 	beq.w	8003e84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	; (8003d1c <HAL_DMA_IRQHandler+0x690>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d04a      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a2b      	ldr	r2, [pc, #172]	; (8003d20 <HAL_DMA_IRQHandler+0x694>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d045      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a29      	ldr	r2, [pc, #164]	; (8003d24 <HAL_DMA_IRQHandler+0x698>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d040      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a28      	ldr	r2, [pc, #160]	; (8003d28 <HAL_DMA_IRQHandler+0x69c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d03b      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a26      	ldr	r2, [pc, #152]	; (8003d2c <HAL_DMA_IRQHandler+0x6a0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d036      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <HAL_DMA_IRQHandler+0x6a4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d031      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <HAL_DMA_IRQHandler+0x6a8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d02c      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <HAL_DMA_IRQHandler+0x6ac>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d027      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a20      	ldr	r2, [pc, #128]	; (8003d3c <HAL_DMA_IRQHandler+0x6b0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d022      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	; (8003d40 <HAL_DMA_IRQHandler+0x6b4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d01d      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_DMA_IRQHandler+0x6b8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d018      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <HAL_DMA_IRQHandler+0x6bc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1a      	ldr	r2, [pc, #104]	; (8003d4c <HAL_DMA_IRQHandler+0x6c0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <HAL_DMA_IRQHandler+0x6c4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d009      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <HAL_DMA_IRQHandler+0x6c8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x678>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <HAL_DMA_IRQHandler+0x6cc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d12b      	bne.n	8003d5c <HAL_DMA_IRQHandler+0x6d0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e02a      	b.n	8003d70 <HAL_DMA_IRQHandler+0x6e4>
 8003d1a:	bf00      	nop
 8003d1c:	40020010 	.word	0x40020010
 8003d20:	40020028 	.word	0x40020028
 8003d24:	40020040 	.word	0x40020040
 8003d28:	40020058 	.word	0x40020058
 8003d2c:	40020070 	.word	0x40020070
 8003d30:	40020088 	.word	0x40020088
 8003d34:	400200a0 	.word	0x400200a0
 8003d38:	400200b8 	.word	0x400200b8
 8003d3c:	40020410 	.word	0x40020410
 8003d40:	40020428 	.word	0x40020428
 8003d44:	40020440 	.word	0x40020440
 8003d48:	40020458 	.word	0x40020458
 8003d4c:	40020470 	.word	0x40020470
 8003d50:	40020488 	.word	0x40020488
 8003d54:	400204a0 	.word	0x400204a0
 8003d58:	400204b8 	.word	0x400204b8
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf14      	ite	ne
 8003d6a:	2301      	movne	r3, #1
 8003d6c:	2300      	moveq	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8087 	beq.w	8003e84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	2220      	movs	r2, #32
 8003d80:	409a      	lsls	r2, r3
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d139      	bne.n	8003e06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0216 	bic.w	r2, r2, #22
 8003da0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d103      	bne.n	8003dc2 <HAL_DMA_IRQHandler+0x736>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0208 	bic.w	r2, r2, #8
 8003dd0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	223f      	movs	r2, #63	; 0x3f
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 834a 	beq.w	8004490 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
          }
          return;
 8003e04:	e344      	b.n	8004490 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d018      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d108      	bne.n	8003e34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d02c      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
 8003e32:	e027      	b.n	8003e84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d023      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
 8003e44:	e01e      	b.n	8003e84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10f      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0210 	bic.w	r2, r2, #16
 8003e62:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8306 	beq.w	800449a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8088 	beq.w	8003fac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2204      	movs	r2, #4
 8003ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a7a      	ldr	r2, [pc, #488]	; (8004094 <HAL_DMA_IRQHandler+0xa08>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d04a      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a79      	ldr	r2, [pc, #484]	; (8004098 <HAL_DMA_IRQHandler+0xa0c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d045      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a77      	ldr	r2, [pc, #476]	; (800409c <HAL_DMA_IRQHandler+0xa10>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d040      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a76      	ldr	r2, [pc, #472]	; (80040a0 <HAL_DMA_IRQHandler+0xa14>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d03b      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a74      	ldr	r2, [pc, #464]	; (80040a4 <HAL_DMA_IRQHandler+0xa18>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d036      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a73      	ldr	r2, [pc, #460]	; (80040a8 <HAL_DMA_IRQHandler+0xa1c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d031      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a71      	ldr	r2, [pc, #452]	; (80040ac <HAL_DMA_IRQHandler+0xa20>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02c      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a70      	ldr	r2, [pc, #448]	; (80040b0 <HAL_DMA_IRQHandler+0xa24>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d027      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6e      	ldr	r2, [pc, #440]	; (80040b4 <HAL_DMA_IRQHandler+0xa28>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a6d      	ldr	r2, [pc, #436]	; (80040b8 <HAL_DMA_IRQHandler+0xa2c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01d      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a6b      	ldr	r2, [pc, #428]	; (80040bc <HAL_DMA_IRQHandler+0xa30>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a6a      	ldr	r2, [pc, #424]	; (80040c0 <HAL_DMA_IRQHandler+0xa34>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a68      	ldr	r2, [pc, #416]	; (80040c4 <HAL_DMA_IRQHandler+0xa38>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a67      	ldr	r2, [pc, #412]	; (80040c8 <HAL_DMA_IRQHandler+0xa3c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a65      	ldr	r2, [pc, #404]	; (80040cc <HAL_DMA_IRQHandler+0xa40>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x8b8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a64      	ldr	r2, [pc, #400]	; (80040d0 <HAL_DMA_IRQHandler+0xa44>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d108      	bne.n	8003f56 <HAL_DMA_IRQHandler+0x8ca>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <HAL_DMA_IRQHandler+0x8da>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d307      	bcc.n	8003f82 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f2      	bne.n	8003f66 <HAL_DMA_IRQHandler+0x8da>
 8003f80:	e000      	b.n	8003f84 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003f82:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003fa2:	e003      	b.n	8003fac <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8272 	beq.w	800449a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
 8003fbe:	e26c      	b.n	800449a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a43      	ldr	r2, [pc, #268]	; (80040d4 <HAL_DMA_IRQHandler+0xa48>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d022      	beq.n	8004010 <HAL_DMA_IRQHandler+0x984>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a42      	ldr	r2, [pc, #264]	; (80040d8 <HAL_DMA_IRQHandler+0xa4c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d01d      	beq.n	8004010 <HAL_DMA_IRQHandler+0x984>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a40      	ldr	r2, [pc, #256]	; (80040dc <HAL_DMA_IRQHandler+0xa50>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <HAL_DMA_IRQHandler+0x984>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a3f      	ldr	r2, [pc, #252]	; (80040e0 <HAL_DMA_IRQHandler+0xa54>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_DMA_IRQHandler+0x984>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a3d      	ldr	r2, [pc, #244]	; (80040e4 <HAL_DMA_IRQHandler+0xa58>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <HAL_DMA_IRQHandler+0x984>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a3c      	ldr	r2, [pc, #240]	; (80040e8 <HAL_DMA_IRQHandler+0xa5c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_DMA_IRQHandler+0x984>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a3a      	ldr	r2, [pc, #232]	; (80040ec <HAL_DMA_IRQHandler+0xa60>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_DMA_IRQHandler+0x984>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a39      	ldr	r2, [pc, #228]	; (80040f0 <HAL_DMA_IRQHandler+0xa64>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_DMA_IRQHandler+0x988>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_DMA_IRQHandler+0x98a>
 8004014:	2300      	movs	r3, #0
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 823f 	beq.w	800449a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	2204      	movs	r2, #4
 800402e:	409a      	lsls	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	4013      	ands	r3, r2
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80cd 	beq.w	80041d4 <HAL_DMA_IRQHandler+0xb48>
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80c7 	beq.w	80041d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2204      	movs	r2, #4
 8004050:	409a      	lsls	r2, r3
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d049      	beq.n	80040f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 8210 	beq.w	8004494 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800407c:	e20a      	b.n	8004494 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 8206 	beq.w	8004494 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004090:	e200      	b.n	8004494 <HAL_DMA_IRQHandler+0xe08>
 8004092:	bf00      	nop
 8004094:	40020010 	.word	0x40020010
 8004098:	40020028 	.word	0x40020028
 800409c:	40020040 	.word	0x40020040
 80040a0:	40020058 	.word	0x40020058
 80040a4:	40020070 	.word	0x40020070
 80040a8:	40020088 	.word	0x40020088
 80040ac:	400200a0 	.word	0x400200a0
 80040b0:	400200b8 	.word	0x400200b8
 80040b4:	40020410 	.word	0x40020410
 80040b8:	40020428 	.word	0x40020428
 80040bc:	40020440 	.word	0x40020440
 80040c0:	40020458 	.word	0x40020458
 80040c4:	40020470 	.word	0x40020470
 80040c8:	40020488 	.word	0x40020488
 80040cc:	400204a0 	.word	0x400204a0
 80040d0:	400204b8 	.word	0x400204b8
 80040d4:	58025408 	.word	0x58025408
 80040d8:	5802541c 	.word	0x5802541c
 80040dc:	58025430 	.word	0x58025430
 80040e0:	58025444 	.word	0x58025444
 80040e4:	58025458 	.word	0x58025458
 80040e8:	5802546c 	.word	0x5802546c
 80040ec:	58025480 	.word	0x58025480
 80040f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d160      	bne.n	80041c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a8c      	ldr	r2, [pc, #560]	; (8004334 <HAL_DMA_IRQHandler+0xca8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d04a      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a8a      	ldr	r2, [pc, #552]	; (8004338 <HAL_DMA_IRQHandler+0xcac>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d045      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a89      	ldr	r2, [pc, #548]	; (800433c <HAL_DMA_IRQHandler+0xcb0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d040      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a87      	ldr	r2, [pc, #540]	; (8004340 <HAL_DMA_IRQHandler+0xcb4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d03b      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a86      	ldr	r2, [pc, #536]	; (8004344 <HAL_DMA_IRQHandler+0xcb8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d036      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a84      	ldr	r2, [pc, #528]	; (8004348 <HAL_DMA_IRQHandler+0xcbc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d031      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a83      	ldr	r2, [pc, #524]	; (800434c <HAL_DMA_IRQHandler+0xcc0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d02c      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a81      	ldr	r2, [pc, #516]	; (8004350 <HAL_DMA_IRQHandler+0xcc4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d027      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a80      	ldr	r2, [pc, #512]	; (8004354 <HAL_DMA_IRQHandler+0xcc8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d022      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a7e      	ldr	r2, [pc, #504]	; (8004358 <HAL_DMA_IRQHandler+0xccc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d01d      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a7d      	ldr	r2, [pc, #500]	; (800435c <HAL_DMA_IRQHandler+0xcd0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d018      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a7b      	ldr	r2, [pc, #492]	; (8004360 <HAL_DMA_IRQHandler+0xcd4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7a      	ldr	r2, [pc, #488]	; (8004364 <HAL_DMA_IRQHandler+0xcd8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d00e      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a78      	ldr	r2, [pc, #480]	; (8004368 <HAL_DMA_IRQHandler+0xcdc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d009      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a77      	ldr	r2, [pc, #476]	; (800436c <HAL_DMA_IRQHandler+0xce0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d004      	beq.n	800419e <HAL_DMA_IRQHandler+0xb12>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a75      	ldr	r2, [pc, #468]	; (8004370 <HAL_DMA_IRQHandler+0xce4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d108      	bne.n	80041b0 <HAL_DMA_IRQHandler+0xb24>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0208 	bic.w	r2, r2, #8
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e007      	b.n	80041c0 <HAL_DMA_IRQHandler+0xb34>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8165 	beq.w	8004494 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041d2:	e15f      	b.n	8004494 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2202      	movs	r2, #2
 80041de:	409a      	lsls	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 80c5 	beq.w	8004374 <HAL_DMA_IRQHandler+0xce8>
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80bf 	beq.w	8004374 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	2202      	movs	r2, #2
 8004200:	409a      	lsls	r2, r3
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d018      	beq.n	8004242 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 813a 	beq.w	8004498 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800422c:	e134      	b.n	8004498 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8130 	beq.w	8004498 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004240:	e12a      	b.n	8004498 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d168      	bne.n	800431e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a38      	ldr	r2, [pc, #224]	; (8004334 <HAL_DMA_IRQHandler+0xca8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d04a      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a37      	ldr	r2, [pc, #220]	; (8004338 <HAL_DMA_IRQHandler+0xcac>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d045      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a35      	ldr	r2, [pc, #212]	; (800433c <HAL_DMA_IRQHandler+0xcb0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d040      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a34      	ldr	r2, [pc, #208]	; (8004340 <HAL_DMA_IRQHandler+0xcb4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d03b      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a32      	ldr	r2, [pc, #200]	; (8004344 <HAL_DMA_IRQHandler+0xcb8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d036      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a31      	ldr	r2, [pc, #196]	; (8004348 <HAL_DMA_IRQHandler+0xcbc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d031      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a2f      	ldr	r2, [pc, #188]	; (800434c <HAL_DMA_IRQHandler+0xcc0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d02c      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2e      	ldr	r2, [pc, #184]	; (8004350 <HAL_DMA_IRQHandler+0xcc4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d027      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <HAL_DMA_IRQHandler+0xcc8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d022      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2b      	ldr	r2, [pc, #172]	; (8004358 <HAL_DMA_IRQHandler+0xccc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d01d      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a29      	ldr	r2, [pc, #164]	; (800435c <HAL_DMA_IRQHandler+0xcd0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d018      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a28      	ldr	r2, [pc, #160]	; (8004360 <HAL_DMA_IRQHandler+0xcd4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d013      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a26      	ldr	r2, [pc, #152]	; (8004364 <HAL_DMA_IRQHandler+0xcd8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00e      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a25      	ldr	r2, [pc, #148]	; (8004368 <HAL_DMA_IRQHandler+0xcdc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d009      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a23      	ldr	r2, [pc, #140]	; (800436c <HAL_DMA_IRQHandler+0xce0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d004      	beq.n	80042ec <HAL_DMA_IRQHandler+0xc60>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a22      	ldr	r2, [pc, #136]	; (8004370 <HAL_DMA_IRQHandler+0xce4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d108      	bne.n	80042fe <HAL_DMA_IRQHandler+0xc72>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0214 	bic.w	r2, r2, #20
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e007      	b.n	800430e <HAL_DMA_IRQHandler+0xc82>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 020a 	bic.w	r2, r2, #10
 800430c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80b8 	beq.w	8004498 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004330:	e0b2      	b.n	8004498 <HAL_DMA_IRQHandler+0xe0c>
 8004332:	bf00      	nop
 8004334:	40020010 	.word	0x40020010
 8004338:	40020028 	.word	0x40020028
 800433c:	40020040 	.word	0x40020040
 8004340:	40020058 	.word	0x40020058
 8004344:	40020070 	.word	0x40020070
 8004348:	40020088 	.word	0x40020088
 800434c:	400200a0 	.word	0x400200a0
 8004350:	400200b8 	.word	0x400200b8
 8004354:	40020410 	.word	0x40020410
 8004358:	40020428 	.word	0x40020428
 800435c:	40020440 	.word	0x40020440
 8004360:	40020458 	.word	0x40020458
 8004364:	40020470 	.word	0x40020470
 8004368:	40020488 	.word	0x40020488
 800436c:	400204a0 	.word	0x400204a0
 8004370:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	2208      	movs	r2, #8
 800437e:	409a      	lsls	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8088 	beq.w	800449a <HAL_DMA_IRQHandler+0xe0e>
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 8082 	beq.w	800449a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a41      	ldr	r2, [pc, #260]	; (80044a0 <HAL_DMA_IRQHandler+0xe14>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d04a      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a3f      	ldr	r2, [pc, #252]	; (80044a4 <HAL_DMA_IRQHandler+0xe18>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d045      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a3e      	ldr	r2, [pc, #248]	; (80044a8 <HAL_DMA_IRQHandler+0xe1c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d040      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a3c      	ldr	r2, [pc, #240]	; (80044ac <HAL_DMA_IRQHandler+0xe20>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d03b      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3b      	ldr	r2, [pc, #236]	; (80044b0 <HAL_DMA_IRQHandler+0xe24>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d036      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a39      	ldr	r2, [pc, #228]	; (80044b4 <HAL_DMA_IRQHandler+0xe28>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d031      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a38      	ldr	r2, [pc, #224]	; (80044b8 <HAL_DMA_IRQHandler+0xe2c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d02c      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a36      	ldr	r2, [pc, #216]	; (80044bc <HAL_DMA_IRQHandler+0xe30>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d027      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a35      	ldr	r2, [pc, #212]	; (80044c0 <HAL_DMA_IRQHandler+0xe34>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d022      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a33      	ldr	r2, [pc, #204]	; (80044c4 <HAL_DMA_IRQHandler+0xe38>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01d      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a32      	ldr	r2, [pc, #200]	; (80044c8 <HAL_DMA_IRQHandler+0xe3c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d018      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a30      	ldr	r2, [pc, #192]	; (80044cc <HAL_DMA_IRQHandler+0xe40>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2f      	ldr	r2, [pc, #188]	; (80044d0 <HAL_DMA_IRQHandler+0xe44>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00e      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a2d      	ldr	r2, [pc, #180]	; (80044d4 <HAL_DMA_IRQHandler+0xe48>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d009      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a2c      	ldr	r2, [pc, #176]	; (80044d8 <HAL_DMA_IRQHandler+0xe4c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d004      	beq.n	8004436 <HAL_DMA_IRQHandler+0xdaa>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a2a      	ldr	r2, [pc, #168]	; (80044dc <HAL_DMA_IRQHandler+0xe50>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d108      	bne.n	8004448 <HAL_DMA_IRQHandler+0xdbc>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 021c 	bic.w	r2, r2, #28
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	e007      	b.n	8004458 <HAL_DMA_IRQHandler+0xdcc>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 020e 	bic.w	r2, r2, #14
 8004456:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	2201      	movs	r2, #1
 8004462:	409a      	lsls	r2, r3
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	4798      	blx	r3
 800448e:	e004      	b.n	800449a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004490:	bf00      	nop
 8004492:	e002      	b.n	800449a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004498:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800449a:	3728      	adds	r7, #40	; 0x28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40020010 	.word	0x40020010
 80044a4:	40020028 	.word	0x40020028
 80044a8:	40020040 	.word	0x40020040
 80044ac:	40020058 	.word	0x40020058
 80044b0:	40020070 	.word	0x40020070
 80044b4:	40020088 	.word	0x40020088
 80044b8:	400200a0 	.word	0x400200a0
 80044bc:	400200b8 	.word	0x400200b8
 80044c0:	40020410 	.word	0x40020410
 80044c4:	40020428 	.word	0x40020428
 80044c8:	40020440 	.word	0x40020440
 80044cc:	40020458 	.word	0x40020458
 80044d0:	40020470 	.word	0x40020470
 80044d4:	40020488 	.word	0x40020488
 80044d8:	400204a0 	.word	0x400204a0
 80044dc:	400204b8 	.word	0x400204b8

080044e0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a84      	ldr	r2, [pc, #528]	; (8004728 <DMA_SetConfig+0x230>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d072      	beq.n	8004602 <DMA_SetConfig+0x10a>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a82      	ldr	r2, [pc, #520]	; (800472c <DMA_SetConfig+0x234>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d06d      	beq.n	8004602 <DMA_SetConfig+0x10a>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a81      	ldr	r2, [pc, #516]	; (8004730 <DMA_SetConfig+0x238>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d068      	beq.n	8004602 <DMA_SetConfig+0x10a>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a7f      	ldr	r2, [pc, #508]	; (8004734 <DMA_SetConfig+0x23c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d063      	beq.n	8004602 <DMA_SetConfig+0x10a>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7e      	ldr	r2, [pc, #504]	; (8004738 <DMA_SetConfig+0x240>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d05e      	beq.n	8004602 <DMA_SetConfig+0x10a>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a7c      	ldr	r2, [pc, #496]	; (800473c <DMA_SetConfig+0x244>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d059      	beq.n	8004602 <DMA_SetConfig+0x10a>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a7b      	ldr	r2, [pc, #492]	; (8004740 <DMA_SetConfig+0x248>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d054      	beq.n	8004602 <DMA_SetConfig+0x10a>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a79      	ldr	r2, [pc, #484]	; (8004744 <DMA_SetConfig+0x24c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d04f      	beq.n	8004602 <DMA_SetConfig+0x10a>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a78      	ldr	r2, [pc, #480]	; (8004748 <DMA_SetConfig+0x250>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d04a      	beq.n	8004602 <DMA_SetConfig+0x10a>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a76      	ldr	r2, [pc, #472]	; (800474c <DMA_SetConfig+0x254>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d045      	beq.n	8004602 <DMA_SetConfig+0x10a>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a75      	ldr	r2, [pc, #468]	; (8004750 <DMA_SetConfig+0x258>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d040      	beq.n	8004602 <DMA_SetConfig+0x10a>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a73      	ldr	r2, [pc, #460]	; (8004754 <DMA_SetConfig+0x25c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d03b      	beq.n	8004602 <DMA_SetConfig+0x10a>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a72      	ldr	r2, [pc, #456]	; (8004758 <DMA_SetConfig+0x260>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d036      	beq.n	8004602 <DMA_SetConfig+0x10a>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a70      	ldr	r2, [pc, #448]	; (800475c <DMA_SetConfig+0x264>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d031      	beq.n	8004602 <DMA_SetConfig+0x10a>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6f      	ldr	r2, [pc, #444]	; (8004760 <DMA_SetConfig+0x268>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d02c      	beq.n	8004602 <DMA_SetConfig+0x10a>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a6d      	ldr	r2, [pc, #436]	; (8004764 <DMA_SetConfig+0x26c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d027      	beq.n	8004602 <DMA_SetConfig+0x10a>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6c      	ldr	r2, [pc, #432]	; (8004768 <DMA_SetConfig+0x270>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <DMA_SetConfig+0x10a>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6a      	ldr	r2, [pc, #424]	; (800476c <DMA_SetConfig+0x274>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01d      	beq.n	8004602 <DMA_SetConfig+0x10a>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a69      	ldr	r2, [pc, #420]	; (8004770 <DMA_SetConfig+0x278>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <DMA_SetConfig+0x10a>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a67      	ldr	r2, [pc, #412]	; (8004774 <DMA_SetConfig+0x27c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <DMA_SetConfig+0x10a>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a66      	ldr	r2, [pc, #408]	; (8004778 <DMA_SetConfig+0x280>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <DMA_SetConfig+0x10a>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a64      	ldr	r2, [pc, #400]	; (800477c <DMA_SetConfig+0x284>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <DMA_SetConfig+0x10a>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a63      	ldr	r2, [pc, #396]	; (8004780 <DMA_SetConfig+0x288>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <DMA_SetConfig+0x10a>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a61      	ldr	r2, [pc, #388]	; (8004784 <DMA_SetConfig+0x28c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <DMA_SetConfig+0x10e>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <DMA_SetConfig+0x110>
 8004606:	2300      	movs	r3, #0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00d      	beq.n	8004628 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004614:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004626:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a3e      	ldr	r2, [pc, #248]	; (8004728 <DMA_SetConfig+0x230>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d04a      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a3d      	ldr	r2, [pc, #244]	; (800472c <DMA_SetConfig+0x234>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d045      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a3b      	ldr	r2, [pc, #236]	; (8004730 <DMA_SetConfig+0x238>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d040      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a3a      	ldr	r2, [pc, #232]	; (8004734 <DMA_SetConfig+0x23c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d03b      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a38      	ldr	r2, [pc, #224]	; (8004738 <DMA_SetConfig+0x240>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d036      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a37      	ldr	r2, [pc, #220]	; (800473c <DMA_SetConfig+0x244>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d031      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a35      	ldr	r2, [pc, #212]	; (8004740 <DMA_SetConfig+0x248>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d02c      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a34      	ldr	r2, [pc, #208]	; (8004744 <DMA_SetConfig+0x24c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d027      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a32      	ldr	r2, [pc, #200]	; (8004748 <DMA_SetConfig+0x250>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d022      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a31      	ldr	r2, [pc, #196]	; (800474c <DMA_SetConfig+0x254>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d01d      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2f      	ldr	r2, [pc, #188]	; (8004750 <DMA_SetConfig+0x258>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d018      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2e      	ldr	r2, [pc, #184]	; (8004754 <DMA_SetConfig+0x25c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a2c      	ldr	r2, [pc, #176]	; (8004758 <DMA_SetConfig+0x260>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00e      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2b      	ldr	r2, [pc, #172]	; (800475c <DMA_SetConfig+0x264>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d009      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a29      	ldr	r2, [pc, #164]	; (8004760 <DMA_SetConfig+0x268>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <DMA_SetConfig+0x1d0>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a28      	ldr	r2, [pc, #160]	; (8004764 <DMA_SetConfig+0x26c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <DMA_SetConfig+0x1d4>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <DMA_SetConfig+0x1d6>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d05a      	beq.n	8004788 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	223f      	movs	r2, #63	; 0x3f
 80046dc:	409a      	lsls	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046f0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b40      	cmp	r3, #64	; 0x40
 8004700:	d108      	bne.n	8004714 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004712:	e087      	b.n	8004824 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]
}
 8004724:	e07e      	b.n	8004824 <DMA_SetConfig+0x32c>
 8004726:	bf00      	nop
 8004728:	40020010 	.word	0x40020010
 800472c:	40020028 	.word	0x40020028
 8004730:	40020040 	.word	0x40020040
 8004734:	40020058 	.word	0x40020058
 8004738:	40020070 	.word	0x40020070
 800473c:	40020088 	.word	0x40020088
 8004740:	400200a0 	.word	0x400200a0
 8004744:	400200b8 	.word	0x400200b8
 8004748:	40020410 	.word	0x40020410
 800474c:	40020428 	.word	0x40020428
 8004750:	40020440 	.word	0x40020440
 8004754:	40020458 	.word	0x40020458
 8004758:	40020470 	.word	0x40020470
 800475c:	40020488 	.word	0x40020488
 8004760:	400204a0 	.word	0x400204a0
 8004764:	400204b8 	.word	0x400204b8
 8004768:	58025408 	.word	0x58025408
 800476c:	5802541c 	.word	0x5802541c
 8004770:	58025430 	.word	0x58025430
 8004774:	58025444 	.word	0x58025444
 8004778:	58025458 	.word	0x58025458
 800477c:	5802546c 	.word	0x5802546c
 8004780:	58025480 	.word	0x58025480
 8004784:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a28      	ldr	r2, [pc, #160]	; (8004830 <DMA_SetConfig+0x338>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d022      	beq.n	80047d8 <DMA_SetConfig+0x2e0>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a27      	ldr	r2, [pc, #156]	; (8004834 <DMA_SetConfig+0x33c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d01d      	beq.n	80047d8 <DMA_SetConfig+0x2e0>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a25      	ldr	r2, [pc, #148]	; (8004838 <DMA_SetConfig+0x340>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d018      	beq.n	80047d8 <DMA_SetConfig+0x2e0>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a24      	ldr	r2, [pc, #144]	; (800483c <DMA_SetConfig+0x344>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d013      	beq.n	80047d8 <DMA_SetConfig+0x2e0>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a22      	ldr	r2, [pc, #136]	; (8004840 <DMA_SetConfig+0x348>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <DMA_SetConfig+0x2e0>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a21      	ldr	r2, [pc, #132]	; (8004844 <DMA_SetConfig+0x34c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d009      	beq.n	80047d8 <DMA_SetConfig+0x2e0>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1f      	ldr	r2, [pc, #124]	; (8004848 <DMA_SetConfig+0x350>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <DMA_SetConfig+0x2e0>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1e      	ldr	r2, [pc, #120]	; (800484c <DMA_SetConfig+0x354>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d101      	bne.n	80047dc <DMA_SetConfig+0x2e4>
 80047d8:	2301      	movs	r3, #1
 80047da:	e000      	b.n	80047de <DMA_SetConfig+0x2e6>
 80047dc:	2300      	movs	r3, #0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d020      	beq.n	8004824 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	f003 031f 	and.w	r3, r3, #31
 80047ea:	2201      	movs	r2, #1
 80047ec:	409a      	lsls	r2, r3
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b40      	cmp	r3, #64	; 0x40
 8004800:	d108      	bne.n	8004814 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	60da      	str	r2, [r3, #12]
}
 8004812:	e007      	b.n	8004824 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	60da      	str	r2, [r3, #12]
}
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	58025408 	.word	0x58025408
 8004834:	5802541c 	.word	0x5802541c
 8004838:	58025430 	.word	0x58025430
 800483c:	58025444 	.word	0x58025444
 8004840:	58025458 	.word	0x58025458
 8004844:	5802546c 	.word	0x5802546c
 8004848:	58025480 	.word	0x58025480
 800484c:	58025494 	.word	0x58025494

08004850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a42      	ldr	r2, [pc, #264]	; (8004968 <DMA_CalcBaseAndBitshift+0x118>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d04a      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a41      	ldr	r2, [pc, #260]	; (800496c <DMA_CalcBaseAndBitshift+0x11c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d045      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a3f      	ldr	r2, [pc, #252]	; (8004970 <DMA_CalcBaseAndBitshift+0x120>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d040      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3e      	ldr	r2, [pc, #248]	; (8004974 <DMA_CalcBaseAndBitshift+0x124>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d03b      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a3c      	ldr	r2, [pc, #240]	; (8004978 <DMA_CalcBaseAndBitshift+0x128>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d036      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a3b      	ldr	r2, [pc, #236]	; (800497c <DMA_CalcBaseAndBitshift+0x12c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d031      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a39      	ldr	r2, [pc, #228]	; (8004980 <DMA_CalcBaseAndBitshift+0x130>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d02c      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a38      	ldr	r2, [pc, #224]	; (8004984 <DMA_CalcBaseAndBitshift+0x134>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d027      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a36      	ldr	r2, [pc, #216]	; (8004988 <DMA_CalcBaseAndBitshift+0x138>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d022      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a35      	ldr	r2, [pc, #212]	; (800498c <DMA_CalcBaseAndBitshift+0x13c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d01d      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a33      	ldr	r2, [pc, #204]	; (8004990 <DMA_CalcBaseAndBitshift+0x140>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d018      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a32      	ldr	r2, [pc, #200]	; (8004994 <DMA_CalcBaseAndBitshift+0x144>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a30      	ldr	r2, [pc, #192]	; (8004998 <DMA_CalcBaseAndBitshift+0x148>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2f      	ldr	r2, [pc, #188]	; (800499c <DMA_CalcBaseAndBitshift+0x14c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d009      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a2d      	ldr	r2, [pc, #180]	; (80049a0 <DMA_CalcBaseAndBitshift+0x150>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <DMA_CalcBaseAndBitshift+0xa8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a2c      	ldr	r2, [pc, #176]	; (80049a4 <DMA_CalcBaseAndBitshift+0x154>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d101      	bne.n	80048fc <DMA_CalcBaseAndBitshift+0xac>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <DMA_CalcBaseAndBitshift+0xae>
 80048fc:	2300      	movs	r3, #0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d024      	beq.n	800494c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	3b10      	subs	r3, #16
 800490a:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <DMA_CalcBaseAndBitshift+0x158>)
 800490c:	fba2 2303 	umull	r2, r3, r2, r3
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	4a24      	ldr	r2, [pc, #144]	; (80049ac <DMA_CalcBaseAndBitshift+0x15c>)
 800491c:	5cd3      	ldrb	r3, [r2, r3]
 800491e:	461a      	mov	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b03      	cmp	r3, #3
 8004928:	d908      	bls.n	800493c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <DMA_CalcBaseAndBitshift+0x160>)
 8004932:	4013      	ands	r3, r2
 8004934:	1d1a      	adds	r2, r3, #4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	659a      	str	r2, [r3, #88]	; 0x58
 800493a:	e00d      	b.n	8004958 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <DMA_CalcBaseAndBitshift+0x160>)
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6593      	str	r3, [r2, #88]	; 0x58
 800494a:	e005      	b.n	8004958 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	40020010 	.word	0x40020010
 800496c:	40020028 	.word	0x40020028
 8004970:	40020040 	.word	0x40020040
 8004974:	40020058 	.word	0x40020058
 8004978:	40020070 	.word	0x40020070
 800497c:	40020088 	.word	0x40020088
 8004980:	400200a0 	.word	0x400200a0
 8004984:	400200b8 	.word	0x400200b8
 8004988:	40020410 	.word	0x40020410
 800498c:	40020428 	.word	0x40020428
 8004990:	40020440 	.word	0x40020440
 8004994:	40020458 	.word	0x40020458
 8004998:	40020470 	.word	0x40020470
 800499c:	40020488 	.word	0x40020488
 80049a0:	400204a0 	.word	0x400204a0
 80049a4:	400204b8 	.word	0x400204b8
 80049a8:	aaaaaaab 	.word	0xaaaaaaab
 80049ac:	0800dd68 	.word	0x0800dd68
 80049b0:	fffffc00 	.word	0xfffffc00

080049b4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d120      	bne.n	8004a0a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d858      	bhi.n	8004a82 <DMA_CheckFifoParam+0xce>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <DMA_CheckFifoParam+0x24>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049fb 	.word	0x080049fb
 80049e0:	080049e9 	.word	0x080049e9
 80049e4:	08004a83 	.word	0x08004a83
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d048      	beq.n	8004a86 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80049f8:	e045      	b.n	8004a86 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a02:	d142      	bne.n	8004a8a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a08:	e03f      	b.n	8004a8a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a12:	d123      	bne.n	8004a5c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d838      	bhi.n	8004a8e <DMA_CheckFifoParam+0xda>
 8004a1c:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <DMA_CheckFifoParam+0x70>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a35 	.word	0x08004a35
 8004a28:	08004a3b 	.word	0x08004a3b
 8004a2c:	08004a35 	.word	0x08004a35
 8004a30:	08004a4d 	.word	0x08004a4d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
        break;
 8004a38:	e030      	b.n	8004a9c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d025      	beq.n	8004a92 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a4a:	e022      	b.n	8004a92 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a54:	d11f      	bne.n	8004a96 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a5a:	e01c      	b.n	8004a96 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d902      	bls.n	8004a6a <DMA_CheckFifoParam+0xb6>
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d003      	beq.n	8004a70 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a68:	e018      	b.n	8004a9c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a6e:	e015      	b.n	8004a9c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00e      	beq.n	8004a9a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8004a80:	e00b      	b.n	8004a9a <DMA_CheckFifoParam+0xe6>
        break;
 8004a82:	bf00      	nop
 8004a84:	e00a      	b.n	8004a9c <DMA_CheckFifoParam+0xe8>
        break;
 8004a86:	bf00      	nop
 8004a88:	e008      	b.n	8004a9c <DMA_CheckFifoParam+0xe8>
        break;
 8004a8a:	bf00      	nop
 8004a8c:	e006      	b.n	8004a9c <DMA_CheckFifoParam+0xe8>
        break;
 8004a8e:	bf00      	nop
 8004a90:	e004      	b.n	8004a9c <DMA_CheckFifoParam+0xe8>
        break;
 8004a92:	bf00      	nop
 8004a94:	e002      	b.n	8004a9c <DMA_CheckFifoParam+0xe8>
        break;
 8004a96:	bf00      	nop
 8004a98:	e000      	b.n	8004a9c <DMA_CheckFifoParam+0xe8>
    break;
 8004a9a:	bf00      	nop
    }
  }

  return status;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop

08004aac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a38      	ldr	r2, [pc, #224]	; (8004ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d022      	beq.n	8004b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a36      	ldr	r2, [pc, #216]	; (8004ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01d      	beq.n	8004b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a35      	ldr	r2, [pc, #212]	; (8004ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a33      	ldr	r2, [pc, #204]	; (8004bac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a32      	ldr	r2, [pc, #200]	; (8004bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a30      	ldr	r2, [pc, #192]	; (8004bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a2f      	ldr	r2, [pc, #188]	; (8004bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a2d      	ldr	r2, [pc, #180]	; (8004bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d101      	bne.n	8004b0e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01a      	beq.n	8004b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	3b08      	subs	r3, #8
 8004b1c:	4a28      	ldr	r2, [pc, #160]	; (8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	461a      	mov	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a24      	ldr	r2, [pc, #144]	; (8004bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b38:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	2201      	movs	r2, #1
 8004b42:	409a      	lsls	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b48:	e024      	b.n	8004b94 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	3b10      	subs	r3, #16
 8004b52:	4a1e      	ldr	r2, [pc, #120]	; (8004bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d806      	bhi.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4a1b      	ldr	r2, [pc, #108]	; (8004bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d902      	bls.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4b18      	ldr	r3, [pc, #96]	; (8004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a16      	ldr	r2, [pc, #88]	; (8004bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004b84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	409a      	lsls	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	58025408 	.word	0x58025408
 8004ba4:	5802541c 	.word	0x5802541c
 8004ba8:	58025430 	.word	0x58025430
 8004bac:	58025444 	.word	0x58025444
 8004bb0:	58025458 	.word	0x58025458
 8004bb4:	5802546c 	.word	0x5802546c
 8004bb8:	58025480 	.word	0x58025480
 8004bbc:	58025494 	.word	0x58025494
 8004bc0:	cccccccd 	.word	0xcccccccd
 8004bc4:	16009600 	.word	0x16009600
 8004bc8:	58025880 	.word	0x58025880
 8004bcc:	aaaaaaab 	.word	0xaaaaaaab
 8004bd0:	400204b8 	.word	0x400204b8
 8004bd4:	4002040f 	.word	0x4002040f
 8004bd8:	10008200 	.word	0x10008200
 8004bdc:	40020880 	.word	0x40020880

08004be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d04a      	beq.n	8004c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d847      	bhi.n	8004c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d022      	beq.n	8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d01d      	beq.n	8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a22      	ldr	r2, [pc, #136]	; (8004ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d018      	beq.n	8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a21      	ldr	r2, [pc, #132]	; (8004ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d013      	beq.n	8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00e      	beq.n	8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d009      	beq.n	8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1b      	ldr	r2, [pc, #108]	; (8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d101      	bne.n	8004c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c50:	2300      	movs	r3, #0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00a      	beq.n	8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	461a      	mov	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a15      	ldr	r2, [pc, #84]	; (8004cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c68:	671a      	str	r2, [r3, #112]	; 0x70
 8004c6a:	e009      	b.n	8004c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	461a      	mov	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a11      	ldr	r2, [pc, #68]	; (8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c7e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	2201      	movs	r2, #1
 8004c86:	409a      	lsls	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	58025408 	.word	0x58025408
 8004c9c:	5802541c 	.word	0x5802541c
 8004ca0:	58025430 	.word	0x58025430
 8004ca4:	58025444 	.word	0x58025444
 8004ca8:	58025458 	.word	0x58025458
 8004cac:	5802546c 	.word	0x5802546c
 8004cb0:	58025480 	.word	0x58025480
 8004cb4:	58025494 	.word	0x58025494
 8004cb8:	1600963f 	.word	0x1600963f
 8004cbc:	58025940 	.word	0x58025940
 8004cc0:	1000823f 	.word	0x1000823f
 8004cc4:	40020940 	.word	0x40020940

08004cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004cd6:	4b89      	ldr	r3, [pc, #548]	; (8004efc <HAL_GPIO_Init+0x234>)
 8004cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cda:	e194      	b.n	8005006 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce8:	4013      	ands	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8186 	beq.w	8005000 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d00b      	beq.n	8004d14 <HAL_GPIO_Init+0x4c>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d007      	beq.n	8004d14 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d08:	2b11      	cmp	r3, #17
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b12      	cmp	r3, #18
 8004d12:	d130      	bne.n	8004d76 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	2203      	movs	r2, #3
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	091b      	lsrs	r3, r3, #4
 8004d60:	f003 0201 	and.w	r2, r3, #1
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	2203      	movs	r2, #3
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d003      	beq.n	8004db6 <HAL_GPIO_Init+0xee>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b12      	cmp	r3, #18
 8004db4:	d123      	bne.n	8004dfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	08da      	lsrs	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3208      	adds	r2, #8
 8004dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	220f      	movs	r2, #15
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	08da      	lsrs	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3208      	adds	r2, #8
 8004df8:	69b9      	ldr	r1, [r7, #24]
 8004dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	2203      	movs	r2, #3
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4013      	ands	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f003 0203 	and.w	r2, r3, #3
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80e0 	beq.w	8005000 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e40:	4b2f      	ldr	r3, [pc, #188]	; (8004f00 <HAL_GPIO_Init+0x238>)
 8004e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e46:	4a2e      	ldr	r2, [pc, #184]	; (8004f00 <HAL_GPIO_Init+0x238>)
 8004e48:	f043 0302 	orr.w	r3, r3, #2
 8004e4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e50:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <HAL_GPIO_Init+0x238>)
 8004e52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e5e:	4a29      	ldr	r2, [pc, #164]	; (8004f04 <HAL_GPIO_Init+0x23c>)
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	3302      	adds	r3, #2
 8004e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	220f      	movs	r2, #15
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <HAL_GPIO_Init+0x240>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d052      	beq.n	8004f30 <HAL_GPIO_Init+0x268>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <HAL_GPIO_Init+0x244>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d031      	beq.n	8004ef6 <HAL_GPIO_Init+0x22e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <HAL_GPIO_Init+0x248>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d02b      	beq.n	8004ef2 <HAL_GPIO_Init+0x22a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <HAL_GPIO_Init+0x24c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d025      	beq.n	8004eee <HAL_GPIO_Init+0x226>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a1c      	ldr	r2, [pc, #112]	; (8004f18 <HAL_GPIO_Init+0x250>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d01f      	beq.n	8004eea <HAL_GPIO_Init+0x222>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1b      	ldr	r2, [pc, #108]	; (8004f1c <HAL_GPIO_Init+0x254>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d019      	beq.n	8004ee6 <HAL_GPIO_Init+0x21e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1a      	ldr	r2, [pc, #104]	; (8004f20 <HAL_GPIO_Init+0x258>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_GPIO_Init+0x21a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <HAL_GPIO_Init+0x25c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00d      	beq.n	8004ede <HAL_GPIO_Init+0x216>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <HAL_GPIO_Init+0x260>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <HAL_GPIO_Init+0x212>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <HAL_GPIO_Init+0x264>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_GPIO_Init+0x20e>
 8004ed2:	2309      	movs	r3, #9
 8004ed4:	e02d      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ed6:	230a      	movs	r3, #10
 8004ed8:	e02b      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004eda:	2308      	movs	r3, #8
 8004edc:	e029      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ede:	2307      	movs	r3, #7
 8004ee0:	e027      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ee2:	2306      	movs	r3, #6
 8004ee4:	e025      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ee6:	2305      	movs	r3, #5
 8004ee8:	e023      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004eea:	2304      	movs	r3, #4
 8004eec:	e021      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e01f      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e01d      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e01b      	b.n	8004f32 <HAL_GPIO_Init+0x26a>
 8004efa:	bf00      	nop
 8004efc:	58000080 	.word	0x58000080
 8004f00:	58024400 	.word	0x58024400
 8004f04:	58000400 	.word	0x58000400
 8004f08:	58020000 	.word	0x58020000
 8004f0c:	58020400 	.word	0x58020400
 8004f10:	58020800 	.word	0x58020800
 8004f14:	58020c00 	.word	0x58020c00
 8004f18:	58021000 	.word	0x58021000
 8004f1c:	58021400 	.word	0x58021400
 8004f20:	58021800 	.word	0x58021800
 8004f24:	58021c00 	.word	0x58021c00
 8004f28:	58022000 	.word	0x58022000
 8004f2c:	58022400 	.word	0x58022400
 8004f30:	2300      	movs	r3, #0
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	f002 0203 	and.w	r2, r2, #3
 8004f38:	0092      	lsls	r2, r2, #2
 8004f3a:	4093      	lsls	r3, r2
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f42:	4938      	ldr	r1, [pc, #224]	; (8005024 <HAL_GPIO_Init+0x35c>)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	089b      	lsrs	r3, r3, #2
 8004f48:	3302      	adds	r3, #2
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	3301      	adds	r3, #1
 8005004:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	f47f ae63 	bne.w	8004cdc <HAL_GPIO_Init+0x14>
  }
}
 8005016:	bf00      	nop
 8005018:	bf00      	nop
 800501a:	3724      	adds	r7, #36	; 0x24
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	58000400 	.word	0x58000400

08005028 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800502a:	b08f      	sub	sp, #60	; 0x3c
 800502c:	af0a      	add	r7, sp, #40	; 0x28
 800502e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e116      	b.n	8005268 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f008 f9e1 	bl	800d41c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2203      	movs	r2, #3
 800505e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d102      	bne.n	8005074 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f003 fe46 	bl	8008d0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	687e      	ldr	r6, [r7, #4]
 8005086:	466d      	mov	r5, sp
 8005088:	f106 0410 	add.w	r4, r6, #16
 800508c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800508e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005094:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005098:	e885 0003 	stmia.w	r5, {r0, r1}
 800509c:	1d33      	adds	r3, r6, #4
 800509e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050a0:	6838      	ldr	r0, [r7, #0]
 80050a2:	f003 fd11 	bl	8008ac8 <USB_CoreInit>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0d7      	b.n	8005268 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2100      	movs	r1, #0
 80050be:	4618      	mov	r0, r3
 80050c0:	f003 fe34 	bl	8008d2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]
 80050c8:	e04a      	b.n	8005160 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050ca:	7bfa      	ldrb	r2, [r7, #15]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	333d      	adds	r3, #61	; 0x3d
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050de:	7bfa      	ldrb	r2, [r7, #15]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	1a9b      	subs	r3, r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	333c      	adds	r3, #60	; 0x3c
 80050ee:	7bfa      	ldrb	r2, [r7, #15]
 80050f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050f2:	7bfa      	ldrb	r2, [r7, #15]
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	b298      	uxth	r0, r3
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	440b      	add	r3, r1
 8005104:	3342      	adds	r3, #66	; 0x42
 8005106:	4602      	mov	r2, r0
 8005108:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800510a:	7bfa      	ldrb	r2, [r7, #15]
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	333f      	adds	r3, #63	; 0x3f
 800511a:	2200      	movs	r2, #0
 800511c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800511e:	7bfa      	ldrb	r2, [r7, #15]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	3344      	adds	r3, #68	; 0x44
 800512e:	2200      	movs	r2, #0
 8005130:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005132:	7bfa      	ldrb	r2, [r7, #15]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	3348      	adds	r3, #72	; 0x48
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	3350      	adds	r3, #80	; 0x50
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	3301      	adds	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	429a      	cmp	r2, r3
 8005168:	d3af      	bcc.n	80050ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
 800516e:	e044      	b.n	80051fa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005170:	7bfa      	ldrb	r2, [r7, #15]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005186:	7bfa      	ldrb	r2, [r7, #15]
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005198:	7bfa      	ldrb	r2, [r7, #15]
 800519a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800519c:	7bfa      	ldrb	r2, [r7, #15]
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80051ae:	2200      	movs	r2, #0
 80051b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051b2:	7bfa      	ldrb	r2, [r7, #15]
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	1a9b      	subs	r3, r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	440b      	add	r3, r1
 80051c0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051c8:	7bfa      	ldrb	r2, [r7, #15]
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051de:	7bfa      	ldrb	r2, [r7, #15]
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	3301      	adds	r3, #1
 80051f8:	73fb      	strb	r3, [r7, #15]
 80051fa:	7bfa      	ldrb	r2, [r7, #15]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d3b5      	bcc.n	8005170 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	687e      	ldr	r6, [r7, #4]
 800520c:	466d      	mov	r5, sp
 800520e:	f106 0410 	add.w	r4, r6, #16
 8005212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800521a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800521e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005222:	1d33      	adds	r3, r6, #4
 8005224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005226:	6838      	ldr	r0, [r7, #0]
 8005228:	f003 fdaa 	bl	8008d80 <USB_DevInit>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e014      	b.n	8005268 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b01      	cmp	r3, #1
 8005254:	d102      	bne.n	800525c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f001 f8be 	bl	80063d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f004 fe2a 	bl	8009eba <USB_DevDisconnect>

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005270 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005284:	2b01      	cmp	r3, #1
 8005286:	d101      	bne.n	800528c <HAL_PCD_Start+0x1c>
 8005288:	2302      	movs	r3, #2
 800528a:	e020      	b.n	80052ce <HAL_PCD_Start+0x5e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	2b01      	cmp	r3, #1
 800529a:	d109      	bne.n	80052b0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d005      	beq.n	80052b0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f003 fd17 	bl	8008ce8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f004 fdda 	bl	8009e78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052d6:	b590      	push	{r4, r7, lr}
 80052d8:	b08d      	sub	sp, #52	; 0x34
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f004 fe98 	bl	800a022 <USB_GetMode>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 83ca 	bne.w	8005a8e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f004 fdfc 	bl	8009efc <USB_ReadInterrupts>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 83c0 	beq.w	8005a8c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f004 fdf3 	bl	8009efc <USB_ReadInterrupts>
 8005316:	4603      	mov	r3, r0
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b02      	cmp	r3, #2
 800531e:	d107      	bne.n	8005330 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f002 0202 	and.w	r2, r2, #2
 800532e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f004 fde1 	bl	8009efc <USB_ReadInterrupts>
 800533a:	4603      	mov	r3, r0
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b10      	cmp	r3, #16
 8005342:	d161      	bne.n	8005408 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0210 	bic.w	r2, r2, #16
 8005352:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4413      	add	r3, r2
 8005370:	3304      	adds	r3, #4
 8005372:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	0c5b      	lsrs	r3, r3, #17
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	2b02      	cmp	r3, #2
 800537e:	d124      	bne.n	80053ca <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005386:	4013      	ands	r3, r2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d035      	beq.n	80053f8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	091b      	lsrs	r3, r3, #4
 8005394:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005396:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800539a:	b29b      	uxth	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	6a38      	ldr	r0, [r7, #32]
 80053a0:	f004 fc18 	bl	8009bd4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	091b      	lsrs	r3, r3, #4
 80053ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053b0:	441a      	add	r2, r3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053c2:	441a      	add	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	619a      	str	r2, [r3, #24]
 80053c8:	e016      	b.n	80053f8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	0c5b      	lsrs	r3, r3, #17
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	2b06      	cmp	r3, #6
 80053d4:	d110      	bne.n	80053f8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80053dc:	2208      	movs	r2, #8
 80053de:	4619      	mov	r1, r3
 80053e0:	6a38      	ldr	r0, [r7, #32]
 80053e2:	f004 fbf7 	bl	8009bd4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053f2:	441a      	add	r2, r3
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0210 	orr.w	r2, r2, #16
 8005406:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f004 fd75 	bl	8009efc <USB_ReadInterrupts>
 8005412:	4603      	mov	r3, r0
 8005414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005418:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800541c:	d16e      	bne.n	80054fc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f004 fd7b 	bl	8009f22 <USB_ReadDevAllOutEpInterrupt>
 800542c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800542e:	e062      	b.n	80054f6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d057      	beq.n	80054ea <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005440:	b2d2      	uxtb	r2, r2
 8005442:	4611      	mov	r1, r2
 8005444:	4618      	mov	r0, r3
 8005446:	f004 fda0 	bl	8009f8a <USB_ReadDevOutEPInterrupt>
 800544a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00c      	beq.n	8005470 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005462:	461a      	mov	r2, r3
 8005464:	2301      	movs	r3, #1
 8005466:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fe0a 	bl	8006084 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00c      	beq.n	8005494 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005486:	461a      	mov	r2, r3
 8005488:	2308      	movs	r3, #8
 800548a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800548c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 ff04 	bl	800629c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b00      	cmp	r3, #0
 800549c:	d008      	beq.n	80054b0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054aa:	461a      	mov	r2, r3
 80054ac:	2310      	movs	r3, #16
 80054ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	461a      	mov	r2, r3
 80054c8:	2320      	movs	r3, #32
 80054ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e2:	461a      	mov	r2, r3
 80054e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054e8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	3301      	adds	r3, #1
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	085b      	lsrs	r3, r3, #1
 80054f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d199      	bne.n	8005430 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f004 fcfb 	bl	8009efc <USB_ReadInterrupts>
 8005506:	4603      	mov	r3, r0
 8005508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800550c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005510:	f040 80c0 	bne.w	8005694 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f004 fd1c 	bl	8009f56 <USB_ReadDevAllInEpInterrupt>
 800551e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005524:	e0b2      	b.n	800568c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80a7 	beq.w	8005680 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005538:	b2d2      	uxtb	r2, r2
 800553a:	4611      	mov	r1, r2
 800553c:	4618      	mov	r0, r3
 800553e:	f004 fd42 	bl	8009fc6 <USB_ReadDevInEPInterrupt>
 8005542:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d057      	beq.n	80055fe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	2201      	movs	r2, #1
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	43db      	mvns	r3, r3
 8005568:	69f9      	ldr	r1, [r7, #28]
 800556a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800556e:	4013      	ands	r3, r2
 8005570:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	461a      	mov	r2, r3
 8005580:	2301      	movs	r3, #1
 8005582:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d132      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005590:	4613      	mov	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	3348      	adds	r3, #72	; 0x48
 800559c:	6819      	ldr	r1, [r3, #0]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a2:	4613      	mov	r3, r2
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	1a9b      	subs	r3, r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4403      	add	r3, r0
 80055ac:	3344      	adds	r3, #68	; 0x44
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4419      	add	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b6:	4613      	mov	r3, r2
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4403      	add	r3, r0
 80055c0:	3348      	adds	r3, #72	; 0x48
 80055c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d113      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x31c>
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ce:	4613      	mov	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	3350      	adds	r3, #80	; 0x50
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d108      	bne.n	80055f2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80055ea:	461a      	mov	r2, r3
 80055ec:	2101      	movs	r1, #1
 80055ee:	f004 fd4b 	bl	800a088 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f007 ffae 	bl	800d55a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	461a      	mov	r2, r3
 8005616:	2308      	movs	r3, #8
 8005618:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005630:	461a      	mov	r2, r3
 8005632:	2310      	movs	r3, #16
 8005634:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564c:	461a      	mov	r2, r3
 800564e:	2340      	movs	r3, #64	; 0x40
 8005650:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005668:	461a      	mov	r2, r3
 800566a:	2302      	movs	r3, #2
 800566c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fc75 	bl	8005f6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	3301      	adds	r3, #1
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	085b      	lsrs	r3, r3, #1
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	f47f af49 	bne.w	8005526 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f004 fc2f 	bl	8009efc <USB_ReadInterrupts>
 800569e:	4603      	mov	r3, r0
 80056a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a8:	d122      	bne.n	80056f0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056b8:	f023 0301 	bic.w	r3, r3, #1
 80056bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d108      	bne.n	80056da <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80056d0:	2100      	movs	r1, #0
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fea4 	bl	8006420 <HAL_PCDEx_LPM_Callback>
 80056d8:	e002      	b.n	80056e0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f007 ffb4 	bl	800d648 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80056ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f004 fc01 	bl	8009efc <USB_ReadInterrupts>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005704:	d112      	bne.n	800572c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b01      	cmp	r3, #1
 8005714:	d102      	bne.n	800571c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f007 ff70 	bl	800d5fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695a      	ldr	r2, [r3, #20]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800572a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4618      	mov	r0, r3
 8005732:	f004 fbe3 	bl	8009efc <USB_ReadInterrupts>
 8005736:	4603      	mov	r3, r0
 8005738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800573c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005740:	d121      	bne.n	8005786 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695a      	ldr	r2, [r3, #20]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005750:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d111      	bne.n	8005780 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576a:	089b      	lsrs	r3, r3, #2
 800576c:	f003 020f 	and.w	r2, r3, #15
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005776:	2101      	movs	r1, #1
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fe51 	bl	8006420 <HAL_PCDEx_LPM_Callback>
 800577e:	e002      	b.n	8005786 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f007 ff3b 	bl	800d5fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f004 fbb6 	bl	8009efc <USB_ReadInterrupts>
 8005790:	4603      	mov	r3, r0
 8005792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579a:	f040 80c7 	bne.w	800592c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2110      	movs	r1, #16
 80057b8:	4618      	mov	r0, r3
 80057ba:	f003 fc3f 	bl	800903c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c2:	e056      	b.n	8005872 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80057c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d0:	461a      	mov	r2, r3
 80057d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057f6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005812:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005816:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005824:	461a      	mov	r2, r3
 8005826:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800582a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800583c:	0151      	lsls	r1, r2, #5
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	440a      	add	r2, r1
 8005842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800584a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005866:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800586a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	3301      	adds	r3, #1
 8005870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005878:	429a      	cmp	r2, r3
 800587a:	d3a3      	bcc.n	80057c4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800588a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800588e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	2b00      	cmp	r3, #0
 8005896:	d016      	beq.n	80058c6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a8:	f043 030b 	orr.w	r3, r3, #11
 80058ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058be:	f043 030b 	orr.w	r3, r3, #11
 80058c2:	6453      	str	r3, [r2, #68]	; 0x44
 80058c4:	e015      	b.n	80058f2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d4:	4619      	mov	r1, r3
 80058d6:	f242 032b 	movw	r3, #8235	; 0x202b
 80058da:	4313      	orrs	r3, r2
 80058dc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ec:	f043 030b 	orr.w	r3, r3, #11
 80058f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005900:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005904:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005916:	461a      	mov	r2, r3
 8005918:	f004 fbb6 	bl	800a088 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695a      	ldr	r2, [r3, #20]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800592a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f004 fae3 	bl	8009efc <USB_ReadInterrupts>
 8005936:	4603      	mov	r3, r0
 8005938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800593c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005940:	d124      	bne.n	800598c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f004 fb7a 	bl	800a040 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	f003 fbd4 	bl	80090fe <USB_GetDevSpeed>
 8005956:	4603      	mov	r3, r0
 8005958:	461a      	mov	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681c      	ldr	r4, [r3, #0]
 8005962:	f001 fcf3 	bl	800734c <HAL_RCC_GetHCLKFreq>
 8005966:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800596c:	b2db      	uxtb	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	4620      	mov	r0, r4
 8005972:	f003 f917 	bl	8008ba4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f007 fe17 	bl	800d5aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800598a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f004 fab3 	bl	8009efc <USB_ReadInterrupts>
 8005996:	4603      	mov	r3, r0
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b08      	cmp	r3, #8
 800599e:	d10a      	bne.n	80059b6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f007 fdf4 	bl	800d58e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f002 0208 	and.w	r2, r2, #8
 80059b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f004 fa9e 	bl	8009efc <USB_ReadInterrupts>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ca:	d10f      	bne.n	80059ec <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	4619      	mov	r1, r3
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f007 fe56 	bl	800d688 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80059ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f004 fa83 	bl	8009efc <USB_ReadInterrupts>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a00:	d10f      	bne.n	8005a22 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f007 fe29 	bl	800d664 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695a      	ldr	r2, [r3, #20]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f004 fa68 	bl	8009efc <USB_ReadInterrupts>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a36:	d10a      	bne.n	8005a4e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f007 fe37 	bl	800d6ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695a      	ldr	r2, [r3, #20]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f004 fa52 	bl	8009efc <USB_ReadInterrupts>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d115      	bne.n	8005a8e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f007 fe27 	bl	800d6c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6859      	ldr	r1, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	e000      	b.n	8005a8e <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005a8c:	bf00      	nop
    }
  }
}
 8005a8e:	3734      	adds	r7, #52	; 0x34
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd90      	pop	{r4, r7, pc}

08005a94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_PCD_SetAddress+0x1a>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e013      	b.n	8005ad6 <HAL_PCD_SetAddress+0x42>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	78fa      	ldrb	r2, [r7, #3]
 8005aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f004 f9b0 	bl	8009e2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	4608      	mov	r0, r1
 8005ae8:	4611      	mov	r1, r2
 8005aea:	461a      	mov	r2, r3
 8005aec:	4603      	mov	r3, r0
 8005aee:	70fb      	strb	r3, [r7, #3]
 8005af0:	460b      	mov	r3, r1
 8005af2:	803b      	strh	r3, [r7, #0]
 8005af4:	4613      	mov	r3, r2
 8005af6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	da0f      	bge.n	8005b24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	f003 020f 	and.w	r2, r3, #15
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	3338      	adds	r3, #56	; 0x38
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	3304      	adds	r3, #4
 8005b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	705a      	strb	r2, [r3, #1]
 8005b22:	e00f      	b.n	8005b44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b24:	78fb      	ldrb	r3, [r7, #3]
 8005b26:	f003 020f 	and.w	r2, r3, #15
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b50:	883a      	ldrh	r2, [r7, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	78ba      	ldrb	r2, [r7, #2]
 8005b5a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b6e:	78bb      	ldrb	r3, [r7, #2]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d102      	bne.n	8005b7a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_PCD_EP_Open+0xaa>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e00e      	b.n	8005ba6 <HAL_PCD_EP_Open+0xc8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68f9      	ldr	r1, [r7, #12]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f003 fad6 	bl	8009148 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005ba4:	7afb      	ldrb	r3, [r7, #11]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	da0f      	bge.n	8005be2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	f003 020f 	and.w	r2, r3, #15
 8005bc8:	4613      	mov	r3, r2
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	3338      	adds	r3, #56	; 0x38
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	705a      	strb	r2, [r3, #1]
 8005be0:	e00f      	b.n	8005c02 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	f003 020f 	and.w	r2, r3, #15
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_PCD_EP_Close+0x6e>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e00e      	b.n	8005c3a <HAL_PCD_EP_Close+0x8c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68f9      	ldr	r1, [r7, #12]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f003 fb14 	bl	8009258 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b086      	sub	sp, #24
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c52:	7afb      	ldrb	r3, [r7, #11]
 8005c54:	f003 020f 	and.w	r2, r3, #15
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	3304      	adds	r3, #4
 8005c6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2200      	movs	r2, #0
 8005c82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c84:	7afb      	ldrb	r3, [r7, #11]
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d102      	bne.n	8005c9e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c9e:	7afb      	ldrb	r3, [r7, #11]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6979      	ldr	r1, [r7, #20]
 8005cb6:	f003 fdf7 	bl	80098a8 <USB_EP0StartXfer>
 8005cba:	e008      	b.n	8005cce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6979      	ldr	r1, [r7, #20]
 8005cca:	f003 fba1 	bl	8009410 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	f003 020f 	and.w	r2, r3, #15
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	4613      	mov	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005cfa:	681b      	ldr	r3, [r3, #0]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	460b      	mov	r3, r1
 8005d16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d18:	7afb      	ldrb	r3, [r7, #11]
 8005d1a:	f003 020f 	and.w	r2, r3, #15
 8005d1e:	4613      	mov	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	3338      	adds	r3, #56	; 0x38
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2201      	movs	r2, #1
 8005d46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d48:	7afb      	ldrb	r3, [r7, #11]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d102      	bne.n	8005d62 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d62:	7afb      	ldrb	r3, [r7, #11]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d109      	bne.n	8005d80 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	6979      	ldr	r1, [r7, #20]
 8005d7a:	f003 fd95 	bl	80098a8 <USB_EP0StartXfer>
 8005d7e:	e008      	b.n	8005d92 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6818      	ldr	r0, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6979      	ldr	r1, [r7, #20]
 8005d8e:	f003 fb3f 	bl	8009410 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	f003 020f 	and.w	r2, r3, #15
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d901      	bls.n	8005dba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e050      	b.n	8005e5c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	da0f      	bge.n	8005de2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	f003 020f 	and.w	r2, r3, #15
 8005dc8:	4613      	mov	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	3338      	adds	r3, #56	; 0x38
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	705a      	strb	r2, [r3, #1]
 8005de0:	e00d      	b.n	8005dfe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005de2:	78fa      	ldrb	r2, [r7, #3]
 8005de4:	4613      	mov	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	4413      	add	r3, r2
 8005df4:	3304      	adds	r3, #4
 8005df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_PCD_EP_SetStall+0x82>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e01e      	b.n	8005e5c <HAL_PCD_EP_SetStall+0xc0>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f003 ff29 	bl	8009c84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e32:	78fb      	ldrb	r3, [r7, #3]
 8005e34:	f003 030f 	and.w	r3, r3, #15
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	b2d9      	uxtb	r1, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f004 f91b 	bl	800a088 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	f003 020f 	and.w	r2, r3, #15
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d901      	bls.n	8005e82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e042      	b.n	8005f08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	da0f      	bge.n	8005eaa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	f003 020f 	and.w	r2, r3, #15
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	3338      	adds	r3, #56	; 0x38
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	705a      	strb	r2, [r3, #1]
 8005ea8:	e00f      	b.n	8005eca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	f003 020f 	and.w	r2, r3, #15
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_PCD_EP_ClrStall+0x86>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e00e      	b.n	8005f08 <HAL_PCD_EP_ClrStall+0xa4>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f003 ff31 	bl	8009d60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_PCD_EP_Flush+0x1a>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e01b      	b.n	8005f62 <HAL_PCD_EP_Flush+0x52>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8005f32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	da09      	bge.n	8005f4e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	4619      	mov	r1, r3
 8005f46:	4610      	mov	r0, r2
 8005f48:	f003 f878 	bl	800903c <USB_FlushTxFifo>
 8005f4c:	e004      	b.n	8005f58 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f003 f898 	bl	8009088 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b08a      	sub	sp, #40	; 0x28
 8005f6e:	af02      	add	r7, sp, #8
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	3338      	adds	r3, #56	; 0x38
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3304      	adds	r3, #4
 8005f90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d901      	bls.n	8005fa2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e06c      	b.n	800607c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	695a      	ldr	r2, [r3, #20]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d902      	bls.n	8005fbe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	3303      	adds	r3, #3
 8005fc2:	089b      	lsrs	r3, r3, #2
 8005fc4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fc6:	e02b      	b.n	8006020 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d902      	bls.n	8005fe4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	3303      	adds	r3, #3
 8005fe8:	089b      	lsrs	r3, r3, #2
 8005fea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	68d9      	ldr	r1, [r3, #12]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	b2da      	uxtb	r2, r3
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	4603      	mov	r3, r0
 8006002:	6978      	ldr	r0, [r7, #20]
 8006004:	f003 fda8 	bl	8009b58 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	441a      	add	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	441a      	add	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	b29b      	uxth	r3, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	429a      	cmp	r2, r3
 8006034:	d809      	bhi.n	800604a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800603e:	429a      	cmp	r2, r3
 8006040:	d203      	bcs.n	800604a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1be      	bne.n	8005fc8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	429a      	cmp	r2, r3
 8006054:	d811      	bhi.n	800607a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	2201      	movs	r2, #1
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	43db      	mvns	r3, r3
 8006070:	6939      	ldr	r1, [r7, #16]
 8006072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006076:	4013      	ands	r3, r2
 8006078:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	333c      	adds	r3, #60	; 0x3c
 800609c:	3304      	adds	r3, #4
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	f040 80a0 	bne.w	80061fc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d015      	beq.n	80060f2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4a72      	ldr	r2, [pc, #456]	; (8006294 <PCD_EP_OutXfrComplete_int+0x210>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	f240 80dd 	bls.w	800628a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 80d7 	beq.w	800628a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e8:	461a      	mov	r2, r3
 80060ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ee:	6093      	str	r3, [r2, #8]
 80060f0:	e0cb      	b.n	800628a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d009      	beq.n	8006110 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006108:	461a      	mov	r2, r3
 800610a:	2320      	movs	r3, #32
 800610c:	6093      	str	r3, [r2, #8]
 800610e:	e0bc      	b.n	800628a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006116:	2b00      	cmp	r3, #0
 8006118:	f040 80b7 	bne.w	800628a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4a5d      	ldr	r2, [pc, #372]	; (8006294 <PCD_EP_OutXfrComplete_int+0x210>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d90f      	bls.n	8006144 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006140:	6093      	str	r3, [r2, #8]
 8006142:	e0a2      	b.n	800628a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	1a9b      	subs	r3, r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006156:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	0159      	lsls	r1, r3, #5
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	440b      	add	r3, r1
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800616a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	4613      	mov	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4403      	add	r3, r0
 800617a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800617e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	1a9b      	subs	r3, r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4403      	add	r3, r0
 80061a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4419      	add	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4403      	add	r3, r0
 80061b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80061bc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d114      	bne.n	80061ee <PCD_EP_OutXfrComplete_int+0x16a>
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d108      	bne.n	80061ee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80061e6:	461a      	mov	r2, r3
 80061e8:	2101      	movs	r1, #1
 80061ea:	f003 ff4d 	bl	800a088 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f007 f995 	bl	800d524 <HAL_PCD_DataOutStageCallback>
 80061fa:	e046      	b.n	800628a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4a26      	ldr	r2, [pc, #152]	; (8006298 <PCD_EP_OutXfrComplete_int+0x214>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d124      	bne.n	800624e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	4413      	add	r3, r2
 8006216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621a:	461a      	mov	r2, r3
 800621c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006220:	6093      	str	r3, [r2, #8]
 8006222:	e032      	b.n	800628a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	d008      	beq.n	8006240 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623a:	461a      	mov	r2, r3
 800623c:	2320      	movs	r3, #32
 800623e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f007 f96c 	bl	800d524 <HAL_PCD_DataOutStageCallback>
 800624c:	e01d      	b.n	800628a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d114      	bne.n	800627e <PCD_EP_OutXfrComplete_int+0x1fa>
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d108      	bne.n	800627e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006276:	461a      	mov	r2, r3
 8006278:	2100      	movs	r1, #0
 800627a:	f003 ff05 	bl	800a088 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f007 f94d 	bl	800d524 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	4f54300a 	.word	0x4f54300a
 8006298:	4f54310a 	.word	0x4f54310a

0800629c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	333c      	adds	r3, #60	; 0x3c
 80062b4:	3304      	adds	r3, #4
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4a15      	ldr	r2, [pc, #84]	; (8006324 <PCD_EP_OutSetupPacket_int+0x88>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d90e      	bls.n	80062f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d009      	beq.n	80062f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e8:	461a      	mov	r2, r3
 80062ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f007 f905 	bl	800d500 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a0a      	ldr	r2, [pc, #40]	; (8006324 <PCD_EP_OutSetupPacket_int+0x88>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d90c      	bls.n	8006318 <PCD_EP_OutSetupPacket_int+0x7c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d108      	bne.n	8006318 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006310:	461a      	mov	r2, r3
 8006312:	2101      	movs	r1, #1
 8006314:	f003 feb8 	bl	800a088 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	4f54300a 	.word	0x4f54300a

08006328 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	70fb      	strb	r3, [r7, #3]
 8006334:	4613      	mov	r3, r2
 8006336:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d107      	bne.n	8006356 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006346:	883b      	ldrh	r3, [r7, #0]
 8006348:	0419      	lsls	r1, r3, #16
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	430a      	orrs	r2, r1
 8006352:	629a      	str	r2, [r3, #40]	; 0x28
 8006354:	e028      	b.n	80063a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	0c1b      	lsrs	r3, r3, #16
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	4413      	add	r3, r2
 8006362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]
 8006368:	e00d      	b.n	8006386 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	3340      	adds	r3, #64	; 0x40
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	0c1b      	lsrs	r3, r3, #16
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	4413      	add	r3, r2
 800637e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	3301      	adds	r3, #1
 8006384:	73fb      	strb	r3, [r7, #15]
 8006386:	7bfa      	ldrb	r2, [r7, #15]
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	3b01      	subs	r3, #1
 800638c:	429a      	cmp	r2, r3
 800638e:	d3ec      	bcc.n	800636a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006390:	883b      	ldrh	r3, [r7, #0]
 8006392:	0418      	lsls	r0, r3, #16
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6819      	ldr	r1, [r3, #0]
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	3b01      	subs	r3, #1
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	4302      	orrs	r2, r0
 80063a0:	3340      	adds	r3, #64	; 0x40
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	460b      	mov	r3, r1
 80063c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	887a      	ldrh	r2, [r7, #2]
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006406:	4b05      	ldr	r3, [pc, #20]	; (800641c <HAL_PCDEx_ActivateLPM+0x44>)
 8006408:	4313      	orrs	r3, r2
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	10000003 	.word	0x10000003

08006420 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006440:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <HAL_PWREx_ConfigSupply+0x70>)
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b04      	cmp	r3, #4
 800644a:	d00a      	beq.n	8006462 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800644c:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <HAL_PWREx_ConfigSupply+0x70>)
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d001      	beq.n	800645e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e01f      	b.n	800649e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	e01d      	b.n	800649e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006462:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <HAL_PWREx_ConfigSupply+0x70>)
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f023 0207 	bic.w	r2, r3, #7
 800646a:	490f      	ldr	r1, [pc, #60]	; (80064a8 <HAL_PWREx_ConfigSupply+0x70>)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4313      	orrs	r3, r2
 8006470:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006472:	f7fb fce7 	bl	8001e44 <HAL_GetTick>
 8006476:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006478:	e009      	b.n	800648e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800647a:	f7fb fce3 	bl	8001e44 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006488:	d901      	bls.n	800648e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e007      	b.n	800649e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800648e:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <HAL_PWREx_ConfigSupply+0x70>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649a:	d1ee      	bne.n	800647a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	58024800 	.word	0x58024800

080064ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80064b0:	4b05      	ldr	r3, [pc, #20]	; (80064c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	4a04      	ldr	r2, [pc, #16]	; (80064c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80064b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064ba:	60d3      	str	r3, [r2, #12]
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	58024800 	.word	0x58024800

080064cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08c      	sub	sp, #48	; 0x30
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e3ff      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 8087 	beq.w	80065fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ec:	4b99      	ldr	r3, [pc, #612]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064f6:	4b97      	ldr	r3, [pc, #604]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 80064f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80064fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fe:	2b10      	cmp	r3, #16
 8006500:	d007      	beq.n	8006512 <HAL_RCC_OscConfig+0x46>
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	2b18      	cmp	r3, #24
 8006506:	d110      	bne.n	800652a <HAL_RCC_OscConfig+0x5e>
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d10b      	bne.n	800652a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006512:	4b90      	ldr	r3, [pc, #576]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d06c      	beq.n	80065f8 <HAL_RCC_OscConfig+0x12c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d168      	bne.n	80065f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e3d9      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006532:	d106      	bne.n	8006542 <HAL_RCC_OscConfig+0x76>
 8006534:	4b87      	ldr	r3, [pc, #540]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a86      	ldr	r2, [pc, #536]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 800653a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	e02e      	b.n	80065a0 <HAL_RCC_OscConfig+0xd4>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10c      	bne.n	8006564 <HAL_RCC_OscConfig+0x98>
 800654a:	4b82      	ldr	r3, [pc, #520]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a81      	ldr	r2, [pc, #516]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	4b7f      	ldr	r3, [pc, #508]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a7e      	ldr	r2, [pc, #504]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 800655c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	e01d      	b.n	80065a0 <HAL_RCC_OscConfig+0xd4>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800656c:	d10c      	bne.n	8006588 <HAL_RCC_OscConfig+0xbc>
 800656e:	4b79      	ldr	r3, [pc, #484]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a78      	ldr	r2, [pc, #480]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	4b76      	ldr	r3, [pc, #472]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a75      	ldr	r2, [pc, #468]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	e00b      	b.n	80065a0 <HAL_RCC_OscConfig+0xd4>
 8006588:	4b72      	ldr	r3, [pc, #456]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a71      	ldr	r2, [pc, #452]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 800658e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	4b6f      	ldr	r3, [pc, #444]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a6e      	ldr	r2, [pc, #440]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 800659a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800659e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d013      	beq.n	80065d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a8:	f7fb fc4c 	bl	8001e44 <HAL_GetTick>
 80065ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065b0:	f7fb fc48 	bl	8001e44 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b64      	cmp	r3, #100	; 0x64
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e38d      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065c2:	4b64      	ldr	r3, [pc, #400]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0xe4>
 80065ce:	e014      	b.n	80065fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d0:	f7fb fc38 	bl	8001e44 <HAL_GetTick>
 80065d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065d8:	f7fb fc34 	bl	8001e44 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b64      	cmp	r3, #100	; 0x64
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e379      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065ea:	4b5a      	ldr	r3, [pc, #360]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f0      	bne.n	80065d8 <HAL_RCC_OscConfig+0x10c>
 80065f6:	e000      	b.n	80065fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 80ae 	beq.w	8006764 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006608:	4b52      	ldr	r3, [pc, #328]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006610:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006612:	4b50      	ldr	r3, [pc, #320]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006616:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <HAL_RCC_OscConfig+0x162>
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	2b18      	cmp	r3, #24
 8006622:	d13a      	bne.n	800669a <HAL_RCC_OscConfig+0x1ce>
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d135      	bne.n	800669a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800662e:	4b49      	ldr	r3, [pc, #292]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0304 	and.w	r3, r3, #4
 8006636:	2b00      	cmp	r3, #0
 8006638:	d005      	beq.n	8006646 <HAL_RCC_OscConfig+0x17a>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e34b      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006646:	f7fb fc2d 	bl	8001ea4 <HAL_GetREVID>
 800664a:	4603      	mov	r3, r0
 800664c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006650:	4293      	cmp	r3, r2
 8006652:	d817      	bhi.n	8006684 <HAL_RCC_OscConfig+0x1b8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b40      	cmp	r3, #64	; 0x40
 800665a:	d108      	bne.n	800666e <HAL_RCC_OscConfig+0x1a2>
 800665c:	4b3d      	ldr	r3, [pc, #244]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006664:	4a3b      	ldr	r2, [pc, #236]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800666a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800666c:	e07a      	b.n	8006764 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666e:	4b39      	ldr	r3, [pc, #228]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	031b      	lsls	r3, r3, #12
 800667c:	4935      	ldr	r1, [pc, #212]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 800667e:	4313      	orrs	r3, r2
 8006680:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006682:	e06f      	b.n	8006764 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006684:	4b33      	ldr	r3, [pc, #204]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	061b      	lsls	r3, r3, #24
 8006692:	4930      	ldr	r1, [pc, #192]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006694:	4313      	orrs	r3, r2
 8006696:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006698:	e064      	b.n	8006764 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d045      	beq.n	800672e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80066a2:	4b2c      	ldr	r3, [pc, #176]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f023 0219 	bic.w	r2, r3, #25
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	4929      	ldr	r1, [pc, #164]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b4:	f7fb fbc6 	bl	8001e44 <HAL_GetTick>
 80066b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066ba:	e008      	b.n	80066ce <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066bc:	f7fb fbc2 	bl	8001e44 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e307      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066ce:	4b21      	ldr	r3, [pc, #132]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d0f0      	beq.n	80066bc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066da:	f7fb fbe3 	bl	8001ea4 <HAL_GetREVID>
 80066de:	4603      	mov	r3, r0
 80066e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d817      	bhi.n	8006718 <HAL_RCC_OscConfig+0x24c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	d108      	bne.n	8006702 <HAL_RCC_OscConfig+0x236>
 80066f0:	4b18      	ldr	r3, [pc, #96]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80066f8:	4a16      	ldr	r2, [pc, #88]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 80066fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066fe:	6053      	str	r3, [r2, #4]
 8006700:	e030      	b.n	8006764 <HAL_RCC_OscConfig+0x298>
 8006702:	4b14      	ldr	r3, [pc, #80]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	031b      	lsls	r3, r3, #12
 8006710:	4910      	ldr	r1, [pc, #64]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006712:	4313      	orrs	r3, r2
 8006714:	604b      	str	r3, [r1, #4]
 8006716:	e025      	b.n	8006764 <HAL_RCC_OscConfig+0x298>
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	061b      	lsls	r3, r3, #24
 8006726:	490b      	ldr	r1, [pc, #44]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006728:	4313      	orrs	r3, r2
 800672a:	604b      	str	r3, [r1, #4]
 800672c:	e01a      	b.n	8006764 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a08      	ldr	r2, [pc, #32]	; (8006754 <HAL_RCC_OscConfig+0x288>)
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673a:	f7fb fb83 	bl	8001e44 <HAL_GetTick>
 800673e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006740:	e00a      	b.n	8006758 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006742:	f7fb fb7f 	bl	8001e44 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d903      	bls.n	8006758 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e2c4      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
 8006754:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006758:	4ba4      	ldr	r3, [pc, #656]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1ee      	bne.n	8006742 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80a9 	beq.w	80068c4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006772:	4b9e      	ldr	r3, [pc, #632]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800677a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800677c:	4b9b      	ldr	r3, [pc, #620]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 800677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006780:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b08      	cmp	r3, #8
 8006786:	d007      	beq.n	8006798 <HAL_RCC_OscConfig+0x2cc>
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	2b18      	cmp	r3, #24
 800678c:	d13a      	bne.n	8006804 <HAL_RCC_OscConfig+0x338>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	2b01      	cmp	r3, #1
 8006796:	d135      	bne.n	8006804 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006798:	4b94      	ldr	r3, [pc, #592]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_RCC_OscConfig+0x2e4>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	2b80      	cmp	r3, #128	; 0x80
 80067aa:	d001      	beq.n	80067b0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e296      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067b0:	f7fb fb78 	bl	8001ea4 <HAL_GetREVID>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d817      	bhi.n	80067ee <HAL_RCC_OscConfig+0x322>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	d108      	bne.n	80067d8 <HAL_RCC_OscConfig+0x30c>
 80067c6:	4b89      	ldr	r3, [pc, #548]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80067ce:	4a87      	ldr	r2, [pc, #540]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 80067d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067d6:	e075      	b.n	80068c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067d8:	4b84      	ldr	r3, [pc, #528]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	069b      	lsls	r3, r3, #26
 80067e6:	4981      	ldr	r1, [pc, #516]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80067ec:	e06a      	b.n	80068c4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067ee:	4b7f      	ldr	r3, [pc, #508]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	061b      	lsls	r3, r3, #24
 80067fc:	497b      	ldr	r1, [pc, #492]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006802:	e05f      	b.n	80068c4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d042      	beq.n	8006892 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800680c:	4b77      	ldr	r3, [pc, #476]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a76      	ldr	r2, [pc, #472]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fb fb14 	bl	8001e44 <HAL_GetTick>
 800681c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006820:	f7fb fb10 	bl	8001e44 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e255      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006832:	4b6e      	ldr	r3, [pc, #440]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f0      	beq.n	8006820 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800683e:	f7fb fb31 	bl	8001ea4 <HAL_GetREVID>
 8006842:	4603      	mov	r3, r0
 8006844:	f241 0203 	movw	r2, #4099	; 0x1003
 8006848:	4293      	cmp	r3, r2
 800684a:	d817      	bhi.n	800687c <HAL_RCC_OscConfig+0x3b0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	2b20      	cmp	r3, #32
 8006852:	d108      	bne.n	8006866 <HAL_RCC_OscConfig+0x39a>
 8006854:	4b65      	ldr	r3, [pc, #404]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800685c:	4a63      	ldr	r2, [pc, #396]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 800685e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006862:	6053      	str	r3, [r2, #4]
 8006864:	e02e      	b.n	80068c4 <HAL_RCC_OscConfig+0x3f8>
 8006866:	4b61      	ldr	r3, [pc, #388]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	069b      	lsls	r3, r3, #26
 8006874:	495d      	ldr	r1, [pc, #372]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006876:	4313      	orrs	r3, r2
 8006878:	604b      	str	r3, [r1, #4]
 800687a:	e023      	b.n	80068c4 <HAL_RCC_OscConfig+0x3f8>
 800687c:	4b5b      	ldr	r3, [pc, #364]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	061b      	lsls	r3, r3, #24
 800688a:	4958      	ldr	r1, [pc, #352]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 800688c:	4313      	orrs	r3, r2
 800688e:	60cb      	str	r3, [r1, #12]
 8006890:	e018      	b.n	80068c4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006892:	4b56      	ldr	r3, [pc, #344]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a55      	ldr	r2, [pc, #340]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800689c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689e:	f7fb fad1 	bl	8001e44 <HAL_GetTick>
 80068a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80068a6:	f7fb facd 	bl	8001e44 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e212      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80068b8:	4b4c      	ldr	r3, [pc, #304]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1f0      	bne.n	80068a6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d036      	beq.n	800693e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d019      	beq.n	800690c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068d8:	4b44      	ldr	r3, [pc, #272]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 80068da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068dc:	4a43      	ldr	r2, [pc, #268]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e4:	f7fb faae 	bl	8001e44 <HAL_GetTick>
 80068e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068ea:	e008      	b.n	80068fe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068ec:	f7fb faaa 	bl	8001e44 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e1ef      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068fe:	4b3b      	ldr	r3, [pc, #236]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0f0      	beq.n	80068ec <HAL_RCC_OscConfig+0x420>
 800690a:	e018      	b.n	800693e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800690c:	4b37      	ldr	r3, [pc, #220]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 800690e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006910:	4a36      	ldr	r2, [pc, #216]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006912:	f023 0301 	bic.w	r3, r3, #1
 8006916:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006918:	f7fb fa94 	bl	8001e44 <HAL_GetTick>
 800691c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006920:	f7fb fa90 	bl	8001e44 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e1d5      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006932:	4b2e      	ldr	r3, [pc, #184]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1f0      	bne.n	8006920 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d036      	beq.n	80069b8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d019      	beq.n	8006986 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006952:	4b26      	ldr	r3, [pc, #152]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a25      	ldr	r2, [pc, #148]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006958:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800695c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800695e:	f7fb fa71 	bl	8001e44 <HAL_GetTick>
 8006962:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006966:	f7fb fa6d 	bl	8001e44 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e1b2      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006978:	4b1c      	ldr	r3, [pc, #112]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0f0      	beq.n	8006966 <HAL_RCC_OscConfig+0x49a>
 8006984:	e018      	b.n	80069b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006986:	4b19      	ldr	r3, [pc, #100]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a18      	ldr	r2, [pc, #96]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 800698c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006990:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006992:	f7fb fa57 	bl	8001e44 <HAL_GetTick>
 8006996:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800699a:	f7fb fa53 	bl	8001e44 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e198      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80069ac:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <HAL_RCC_OscConfig+0x520>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f0      	bne.n	800699a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 8085 	beq.w	8006ad0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <HAL_RCC_OscConfig+0x524>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a09      	ldr	r2, [pc, #36]	; (80069f0 <HAL_RCC_OscConfig+0x524>)
 80069cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069d2:	f7fb fa37 	bl	8001e44 <HAL_GetTick>
 80069d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069d8:	e00c      	b.n	80069f4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069da:	f7fb fa33 	bl	8001e44 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b64      	cmp	r3, #100	; 0x64
 80069e6:	d905      	bls.n	80069f4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e178      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
 80069ec:	58024400 	.word	0x58024400
 80069f0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069f4:	4b96      	ldr	r3, [pc, #600]	; (8006c50 <HAL_RCC_OscConfig+0x784>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0ec      	beq.n	80069da <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d106      	bne.n	8006a16 <HAL_RCC_OscConfig+0x54a>
 8006a08:	4b92      	ldr	r3, [pc, #584]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0c:	4a91      	ldr	r2, [pc, #580]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a0e:	f043 0301 	orr.w	r3, r3, #1
 8006a12:	6713      	str	r3, [r2, #112]	; 0x70
 8006a14:	e02d      	b.n	8006a72 <HAL_RCC_OscConfig+0x5a6>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10c      	bne.n	8006a38 <HAL_RCC_OscConfig+0x56c>
 8006a1e:	4b8d      	ldr	r3, [pc, #564]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	4a8c      	ldr	r2, [pc, #560]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	6713      	str	r3, [r2, #112]	; 0x70
 8006a2a:	4b8a      	ldr	r3, [pc, #552]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2e:	4a89      	ldr	r2, [pc, #548]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a30:	f023 0304 	bic.w	r3, r3, #4
 8006a34:	6713      	str	r3, [r2, #112]	; 0x70
 8006a36:	e01c      	b.n	8006a72 <HAL_RCC_OscConfig+0x5a6>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	2b05      	cmp	r3, #5
 8006a3e:	d10c      	bne.n	8006a5a <HAL_RCC_OscConfig+0x58e>
 8006a40:	4b84      	ldr	r3, [pc, #528]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a44:	4a83      	ldr	r2, [pc, #524]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a46:	f043 0304 	orr.w	r3, r3, #4
 8006a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a4c:	4b81      	ldr	r3, [pc, #516]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a50:	4a80      	ldr	r2, [pc, #512]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a52:	f043 0301 	orr.w	r3, r3, #1
 8006a56:	6713      	str	r3, [r2, #112]	; 0x70
 8006a58:	e00b      	b.n	8006a72 <HAL_RCC_OscConfig+0x5a6>
 8006a5a:	4b7e      	ldr	r3, [pc, #504]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5e:	4a7d      	ldr	r2, [pc, #500]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a60:	f023 0301 	bic.w	r3, r3, #1
 8006a64:	6713      	str	r3, [r2, #112]	; 0x70
 8006a66:	4b7b      	ldr	r3, [pc, #492]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	4a7a      	ldr	r2, [pc, #488]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a6c:	f023 0304 	bic.w	r3, r3, #4
 8006a70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d015      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7a:	f7fb f9e3 	bl	8001e44 <HAL_GetTick>
 8006a7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a80:	e00a      	b.n	8006a98 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a82:	f7fb f9df 	bl	8001e44 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e122      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a98:	4b6e      	ldr	r3, [pc, #440]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d0ee      	beq.n	8006a82 <HAL_RCC_OscConfig+0x5b6>
 8006aa4:	e014      	b.n	8006ad0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa6:	f7fb f9cd 	bl	8001e44 <HAL_GetTick>
 8006aaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006aac:	e00a      	b.n	8006ac4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aae:	f7fb f9c9 	bl	8001e44 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e10c      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ac4:	4b63      	ldr	r3, [pc, #396]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1ee      	bne.n	8006aae <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 8101 	beq.w	8006cdc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006ada:	4b5e      	ldr	r3, [pc, #376]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ae2:	2b18      	cmp	r3, #24
 8006ae4:	f000 80bc 	beq.w	8006c60 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	f040 8095 	bne.w	8006c1c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006af2:	4b58      	ldr	r3, [pc, #352]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a57      	ldr	r2, [pc, #348]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afe:	f7fb f9a1 	bl	8001e44 <HAL_GetTick>
 8006b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b06:	f7fb f99d 	bl	8001e44 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e0e2      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b18:	4b4e      	ldr	r3, [pc, #312]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f0      	bne.n	8006b06 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b24:	4b4b      	ldr	r3, [pc, #300]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b28:	4b4b      	ldr	r3, [pc, #300]	; (8006c58 <HAL_RCC_OscConfig+0x78c>)
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006b34:	0112      	lsls	r2, r2, #4
 8006b36:	430a      	orrs	r2, r1
 8006b38:	4946      	ldr	r1, [pc, #280]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	628b      	str	r3, [r1, #40]	; 0x28
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	3b01      	subs	r3, #1
 8006b44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	025b      	lsls	r3, r3, #9
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	041b      	lsls	r3, r3, #16
 8006b5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b66:	3b01      	subs	r3, #1
 8006b68:	061b      	lsls	r3, r3, #24
 8006b6a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b6e:	4939      	ldr	r1, [pc, #228]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006b74:	4b37      	ldr	r3, [pc, #220]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	4a36      	ldr	r2, [pc, #216]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006b7a:	f023 0301 	bic.w	r3, r3, #1
 8006b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b80:	4b34      	ldr	r3, [pc, #208]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b84:	4b35      	ldr	r3, [pc, #212]	; (8006c5c <HAL_RCC_OscConfig+0x790>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006b8c:	00d2      	lsls	r2, r2, #3
 8006b8e:	4931      	ldr	r1, [pc, #196]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006b94:	4b2f      	ldr	r3, [pc, #188]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	f023 020c 	bic.w	r2, r3, #12
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	492c      	ldr	r1, [pc, #176]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ba6:	4b2b      	ldr	r3, [pc, #172]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006baa:	f023 0202 	bic.w	r2, r3, #2
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bb2:	4928      	ldr	r1, [pc, #160]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006bb8:	4b26      	ldr	r3, [pc, #152]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	4a25      	ldr	r2, [pc, #148]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc4:	4b23      	ldr	r3, [pc, #140]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	4a22      	ldr	r2, [pc, #136]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006bd0:	4b20      	ldr	r3, [pc, #128]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	4a1f      	ldr	r2, [pc, #124]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006bd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	4a1c      	ldr	r2, [pc, #112]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006be8:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a19      	ldr	r2, [pc, #100]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf4:	f7fb f926 	bl	8001e44 <HAL_GetTick>
 8006bf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bfc:	f7fb f922 	bl	8001e44 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e067      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c0e:	4b11      	ldr	r3, [pc, #68]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0f0      	beq.n	8006bfc <HAL_RCC_OscConfig+0x730>
 8006c1a:	e05f      	b.n	8006cdc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a0c      	ldr	r2, [pc, #48]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c28:	f7fb f90c 	bl	8001e44 <HAL_GetTick>
 8006c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c30:	f7fb f908 	bl	8001e44 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e04d      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c42:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <HAL_RCC_OscConfig+0x788>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0x764>
 8006c4e:	e045      	b.n	8006cdc <HAL_RCC_OscConfig+0x810>
 8006c50:	58024800 	.word	0x58024800
 8006c54:	58024400 	.word	0x58024400
 8006c58:	fffffc0c 	.word	0xfffffc0c
 8006c5c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006c60:	4b21      	ldr	r3, [pc, #132]	; (8006ce8 <HAL_RCC_OscConfig+0x81c>)
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006c66:	4b20      	ldr	r3, [pc, #128]	; (8006ce8 <HAL_RCC_OscConfig+0x81c>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d031      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f003 0203 	and.w	r2, r3, #3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d12a      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	091b      	lsrs	r3, r3, #4
 8006c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d122      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d11a      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	0a5b      	lsrs	r3, r3, #9
 8006ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d111      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	0c1b      	lsrs	r3, r3, #16
 8006cb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d108      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	0e1b      	lsrs	r3, r3, #24
 8006cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d001      	beq.n	8006cdc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3730      	adds	r7, #48	; 0x30
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	58024400 	.word	0x58024400

08006cec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e19c      	b.n	800703a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d00:	4b8a      	ldr	r3, [pc, #552]	; (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d910      	bls.n	8006d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d0e:	4b87      	ldr	r3, [pc, #540]	; (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f023 020f 	bic.w	r2, r3, #15
 8006d16:	4985      	ldr	r1, [pc, #532]	; (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1e:	4b83      	ldr	r3, [pc, #524]	; (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d001      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e184      	b.n	800703a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d010      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	4b7b      	ldr	r3, [pc, #492]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d908      	bls.n	8006d5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006d4c:	4b78      	ldr	r3, [pc, #480]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	4975      	ldr	r1, [pc, #468]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d010      	beq.n	8006d8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	4b70      	ldr	r3, [pc, #448]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d908      	bls.n	8006d8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d7a:	4b6d      	ldr	r3, [pc, #436]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	496a      	ldr	r1, [pc, #424]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0310 	and.w	r3, r3, #16
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d010      	beq.n	8006dba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699a      	ldr	r2, [r3, #24]
 8006d9c:	4b64      	ldr	r3, [pc, #400]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d908      	bls.n	8006dba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006da8:	4b61      	ldr	r3, [pc, #388]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	495e      	ldr	r1, [pc, #376]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d010      	beq.n	8006de8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	4b59      	ldr	r3, [pc, #356]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d908      	bls.n	8006de8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006dd6:	4b56      	ldr	r3, [pc, #344]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	4953      	ldr	r1, [pc, #332]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d010      	beq.n	8006e16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68da      	ldr	r2, [r3, #12]
 8006df8:	4b4d      	ldr	r3, [pc, #308]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	f003 030f 	and.w	r3, r3, #15
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d908      	bls.n	8006e16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e04:	4b4a      	ldr	r3, [pc, #296]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	f023 020f 	bic.w	r2, r3, #15
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	4947      	ldr	r1, [pc, #284]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d055      	beq.n	8006ece <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006e22:	4b43      	ldr	r3, [pc, #268]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	4940      	ldr	r1, [pc, #256]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d107      	bne.n	8006e4c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e3c:	4b3c      	ldr	r3, [pc, #240]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d121      	bne.n	8006e8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e0f6      	b.n	800703a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d107      	bne.n	8006e64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e54:	4b36      	ldr	r3, [pc, #216]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d115      	bne.n	8006e8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0ea      	b.n	800703a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d107      	bne.n	8006e7c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e6c:	4b30      	ldr	r3, [pc, #192]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d109      	bne.n	8006e8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e0de      	b.n	800703a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e7c:	4b2c      	ldr	r3, [pc, #176]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e0d6      	b.n	800703a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e8c:	4b28      	ldr	r3, [pc, #160]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f023 0207 	bic.w	r2, r3, #7
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4925      	ldr	r1, [pc, #148]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e9e:	f7fa ffd1 	bl	8001e44 <HAL_GetTick>
 8006ea2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ea4:	e00a      	b.n	8006ebc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ea6:	f7fa ffcd 	bl	8001e44 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e0be      	b.n	800703a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ebc:	4b1c      	ldr	r3, [pc, #112]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d1eb      	bne.n	8006ea6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d010      	beq.n	8006efc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	4b14      	ldr	r3, [pc, #80]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d208      	bcs.n	8006efc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eea:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f023 020f 	bic.w	r2, r3, #15
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	490e      	ldr	r1, [pc, #56]	; (8006f30 <HAL_RCC_ClockConfig+0x244>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 030f 	and.w	r3, r3, #15
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d214      	bcs.n	8006f34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0a:	4b08      	ldr	r3, [pc, #32]	; (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f023 020f 	bic.w	r2, r3, #15
 8006f12:	4906      	ldr	r1, [pc, #24]	; (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1a:	4b04      	ldr	r3, [pc, #16]	; (8006f2c <HAL_RCC_ClockConfig+0x240>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 030f 	and.w	r3, r3, #15
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d005      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e086      	b.n	800703a <HAL_RCC_ClockConfig+0x34e>
 8006f2c:	52002000 	.word	0x52002000
 8006f30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d010      	beq.n	8006f62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	4b3f      	ldr	r3, [pc, #252]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d208      	bcs.n	8006f62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f50:	4b3c      	ldr	r3, [pc, #240]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	4939      	ldr	r1, [pc, #228]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0308 	and.w	r3, r3, #8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d010      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	695a      	ldr	r2, [r3, #20]
 8006f72:	4b34      	ldr	r3, [pc, #208]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d208      	bcs.n	8006f90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	492e      	ldr	r1, [pc, #184]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0310 	and.w	r3, r3, #16
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d010      	beq.n	8006fbe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	4b28      	ldr	r3, [pc, #160]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006fa2:	69db      	ldr	r3, [r3, #28]
 8006fa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d208      	bcs.n	8006fbe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fac:	4b25      	ldr	r3, [pc, #148]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	699b      	ldr	r3, [r3, #24]
 8006fb8:	4922      	ldr	r1, [pc, #136]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d010      	beq.n	8006fec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	69da      	ldr	r2, [r3, #28]
 8006fce:	4b1d      	ldr	r3, [pc, #116]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d208      	bcs.n	8006fec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006fda:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	4917      	ldr	r1, [pc, #92]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fec:	f000 f834 	bl	8007058 <HAL_RCC_GetSysClockFreq>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	4b14      	ldr	r3, [pc, #80]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	0a1b      	lsrs	r3, r3, #8
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	4912      	ldr	r1, [pc, #72]	; (8007048 <HAL_RCC_ClockConfig+0x35c>)
 8006ffe:	5ccb      	ldrb	r3, [r1, r3]
 8007000:	f003 031f 	and.w	r3, r3, #31
 8007004:	fa22 f303 	lsr.w	r3, r2, r3
 8007008:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800700a:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <HAL_RCC_ClockConfig+0x358>)
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	4a0d      	ldr	r2, [pc, #52]	; (8007048 <HAL_RCC_ClockConfig+0x35c>)
 8007014:	5cd3      	ldrb	r3, [r2, r3]
 8007016:	f003 031f 	and.w	r3, r3, #31
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	fa22 f303 	lsr.w	r3, r2, r3
 8007020:	4a0a      	ldr	r2, [pc, #40]	; (800704c <HAL_RCC_ClockConfig+0x360>)
 8007022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007024:	4a0a      	ldr	r2, [pc, #40]	; (8007050 <HAL_RCC_ClockConfig+0x364>)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800702a:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <HAL_RCC_ClockConfig+0x368>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4618      	mov	r0, r3
 8007030:	f7fa febe 	bl	8001db0 <HAL_InitTick>
 8007034:	4603      	mov	r3, r0
 8007036:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	58024400 	.word	0x58024400
 8007048:	0800dd58 	.word	0x0800dd58
 800704c:	20000004 	.word	0x20000004
 8007050:	20000000 	.word	0x20000000
 8007054:	2000000c 	.word	0x2000000c

08007058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007058:	b480      	push	{r7}
 800705a:	b089      	sub	sp, #36	; 0x24
 800705c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800705e:	4bb3      	ldr	r3, [pc, #716]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007066:	2b18      	cmp	r3, #24
 8007068:	f200 8155 	bhi.w	8007316 <HAL_RCC_GetSysClockFreq+0x2be>
 800706c:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <HAL_RCC_GetSysClockFreq+0x1c>)
 800706e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007072:	bf00      	nop
 8007074:	080070d9 	.word	0x080070d9
 8007078:	08007317 	.word	0x08007317
 800707c:	08007317 	.word	0x08007317
 8007080:	08007317 	.word	0x08007317
 8007084:	08007317 	.word	0x08007317
 8007088:	08007317 	.word	0x08007317
 800708c:	08007317 	.word	0x08007317
 8007090:	08007317 	.word	0x08007317
 8007094:	080070ff 	.word	0x080070ff
 8007098:	08007317 	.word	0x08007317
 800709c:	08007317 	.word	0x08007317
 80070a0:	08007317 	.word	0x08007317
 80070a4:	08007317 	.word	0x08007317
 80070a8:	08007317 	.word	0x08007317
 80070ac:	08007317 	.word	0x08007317
 80070b0:	08007317 	.word	0x08007317
 80070b4:	08007105 	.word	0x08007105
 80070b8:	08007317 	.word	0x08007317
 80070bc:	08007317 	.word	0x08007317
 80070c0:	08007317 	.word	0x08007317
 80070c4:	08007317 	.word	0x08007317
 80070c8:	08007317 	.word	0x08007317
 80070cc:	08007317 	.word	0x08007317
 80070d0:	08007317 	.word	0x08007317
 80070d4:	0800710b 	.word	0x0800710b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070d8:	4b94      	ldr	r3, [pc, #592]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d009      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070e4:	4b91      	ldr	r3, [pc, #580]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	08db      	lsrs	r3, r3, #3
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	4a90      	ldr	r2, [pc, #576]	; (8007330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
 80070f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80070f6:	e111      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80070f8:	4b8d      	ldr	r3, [pc, #564]	; (8007330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070fa:	61bb      	str	r3, [r7, #24]
    break;
 80070fc:	e10e      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80070fe:	4b8d      	ldr	r3, [pc, #564]	; (8007334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007100:	61bb      	str	r3, [r7, #24]
    break;
 8007102:	e10b      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007104:	4b8c      	ldr	r3, [pc, #560]	; (8007338 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007106:	61bb      	str	r3, [r7, #24]
    break;
 8007108:	e108      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800710a:	4b88      	ldr	r3, [pc, #544]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	f003 0303 	and.w	r3, r3, #3
 8007112:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007114:	4b85      	ldr	r3, [pc, #532]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	091b      	lsrs	r3, r3, #4
 800711a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800711e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007120:	4b82      	ldr	r3, [pc, #520]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800712a:	4b80      	ldr	r3, [pc, #512]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800712c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007142:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80e1 	beq.w	8007310 <HAL_RCC_GetSysClockFreq+0x2b8>
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b02      	cmp	r3, #2
 8007152:	f000 8083 	beq.w	800725c <HAL_RCC_GetSysClockFreq+0x204>
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b02      	cmp	r3, #2
 800715a:	f200 80a1 	bhi.w	80072a0 <HAL_RCC_GetSysClockFreq+0x248>
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_RCC_GetSysClockFreq+0x114>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d056      	beq.n	8007218 <HAL_RCC_GetSysClockFreq+0x1c0>
 800716a:	e099      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800716c:	4b6f      	ldr	r3, [pc, #444]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d02d      	beq.n	80071d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007178:	4b6c      	ldr	r3, [pc, #432]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	08db      	lsrs	r3, r3, #3
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	4a6b      	ldr	r2, [pc, #428]	; (8007330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
 8007188:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a2:	4b62      	ldr	r3, [pc, #392]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800733c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80071d2:	e087      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007340 <HAL_RCC_GetSysClockFreq+0x2e8>
 80071e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e6:	4b51      	ldr	r3, [pc, #324]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800733c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007216:	e065      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007222:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007344 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722a:	4b40      	ldr	r3, [pc, #256]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a02 	vldr	s12, [r7, #8]
 800723e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800733c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800725a:	e043      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007266:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007348 <HAL_RCC_GetSysClockFreq+0x2f0>
 800726a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726e:	4b2f      	ldr	r3, [pc, #188]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007282:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800733c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800729e:	e021      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007344 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b2:	4b1e      	ldr	r3, [pc, #120]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	ee07 3a90 	vmov	s15, r3
 80072be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800733c <HAL_RCC_GetSysClockFreq+0x2e4>
 80072ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80072e4:	4b11      	ldr	r3, [pc, #68]	; (800732c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	0a5b      	lsrs	r3, r3, #9
 80072ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ee:	3301      	adds	r3, #1
 80072f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	ee07 3a90 	vmov	s15, r3
 80072f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007308:	ee17 3a90 	vmov	r3, s15
 800730c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800730e:	e005      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	61bb      	str	r3, [r7, #24]
    break;
 8007314:	e002      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007316:	4b07      	ldr	r3, [pc, #28]	; (8007334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007318:	61bb      	str	r3, [r7, #24]
    break;
 800731a:	bf00      	nop
  }

  return sysclockfreq;
 800731c:	69bb      	ldr	r3, [r7, #24]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3724      	adds	r7, #36	; 0x24
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	58024400 	.word	0x58024400
 8007330:	03d09000 	.word	0x03d09000
 8007334:	003d0900 	.word	0x003d0900
 8007338:	017d7840 	.word	0x017d7840
 800733c:	46000000 	.word	0x46000000
 8007340:	4c742400 	.word	0x4c742400
 8007344:	4a742400 	.word	0x4a742400
 8007348:	4bbebc20 	.word	0x4bbebc20

0800734c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007352:	f7ff fe81 	bl	8007058 <HAL_RCC_GetSysClockFreq>
 8007356:	4602      	mov	r2, r0
 8007358:	4b10      	ldr	r3, [pc, #64]	; (800739c <HAL_RCC_GetHCLKFreq+0x50>)
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	0a1b      	lsrs	r3, r3, #8
 800735e:	f003 030f 	and.w	r3, r3, #15
 8007362:	490f      	ldr	r1, [pc, #60]	; (80073a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007364:	5ccb      	ldrb	r3, [r1, r3]
 8007366:	f003 031f 	and.w	r3, r3, #31
 800736a:	fa22 f303 	lsr.w	r3, r2, r3
 800736e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007370:	4b0a      	ldr	r3, [pc, #40]	; (800739c <HAL_RCC_GetHCLKFreq+0x50>)
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	f003 030f 	and.w	r3, r3, #15
 8007378:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800737a:	5cd3      	ldrb	r3, [r2, r3]
 800737c:	f003 031f 	and.w	r3, r3, #31
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	fa22 f303 	lsr.w	r3, r2, r3
 8007386:	4a07      	ldr	r2, [pc, #28]	; (80073a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007388:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800738a:	4a07      	ldr	r2, [pc, #28]	; (80073a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007390:	4b04      	ldr	r3, [pc, #16]	; (80073a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007392:	681b      	ldr	r3, [r3, #0]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	58024400 	.word	0x58024400
 80073a0:	0800dd58 	.word	0x0800dd58
 80073a4:	20000004 	.word	0x20000004
 80073a8:	20000000 	.word	0x20000000

080073ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073b4:	2300      	movs	r3, #0
 80073b6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073b8:	2300      	movs	r3, #0
 80073ba:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d03f      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073d0:	d02a      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80073d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073d6:	d824      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073dc:	d018      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073e2:	d81e      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80073e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ec:	d007      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80073ee:	e018      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f0:	4bab      	ldr	r3, [pc, #684]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	4aaa      	ldr	r2, [pc, #680]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073fc:	e015      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3304      	adds	r3, #4
 8007402:	2102      	movs	r1, #2
 8007404:	4618      	mov	r0, r3
 8007406:	f001 f87d 	bl	8008504 <RCCEx_PLL2_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800740e:	e00c      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3324      	adds	r3, #36	; 0x24
 8007414:	2102      	movs	r1, #2
 8007416:	4618      	mov	r0, r3
 8007418:	f001 f926 	bl	8008668 <RCCEx_PLL3_Config>
 800741c:	4603      	mov	r3, r0
 800741e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007420:	e003      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	75fb      	strb	r3, [r7, #23]
      break;
 8007426:	e000      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d109      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007430:	4b9b      	ldr	r3, [pc, #620]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800743c:	4998      	ldr	r1, [pc, #608]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800743e:	4313      	orrs	r3, r2
 8007440:	650b      	str	r3, [r1, #80]	; 0x50
 8007442:	e001      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007444:	7dfb      	ldrb	r3, [r7, #23]
 8007446:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007450:	2b00      	cmp	r3, #0
 8007452:	d03d      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007458:	2b04      	cmp	r3, #4
 800745a:	d826      	bhi.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800745c:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800745e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007462:	bf00      	nop
 8007464:	08007479 	.word	0x08007479
 8007468:	08007487 	.word	0x08007487
 800746c:	08007499 	.word	0x08007499
 8007470:	080074b1 	.word	0x080074b1
 8007474:	080074b1 	.word	0x080074b1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007478:	4b89      	ldr	r3, [pc, #548]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	4a88      	ldr	r2, [pc, #544]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800747e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007484:	e015      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3304      	adds	r3, #4
 800748a:	2100      	movs	r1, #0
 800748c:	4618      	mov	r0, r3
 800748e:	f001 f839 	bl	8008504 <RCCEx_PLL2_Config>
 8007492:	4603      	mov	r3, r0
 8007494:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007496:	e00c      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3324      	adds	r3, #36	; 0x24
 800749c:	2100      	movs	r1, #0
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 f8e2 	bl	8008668 <RCCEx_PLL3_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074a8:	e003      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	75fb      	strb	r3, [r7, #23]
      break;
 80074ae:	e000      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80074b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d109      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074b8:	4b79      	ldr	r3, [pc, #484]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074bc:	f023 0207 	bic.w	r2, r3, #7
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c4:	4976      	ldr	r1, [pc, #472]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	650b      	str	r3, [r1, #80]	; 0x50
 80074ca:	e001      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d042      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e4:	d02b      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80074e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ea:	d825      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80074ec:	2bc0      	cmp	r3, #192	; 0xc0
 80074ee:	d028      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80074f0:	2bc0      	cmp	r3, #192	; 0xc0
 80074f2:	d821      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80074f4:	2b80      	cmp	r3, #128	; 0x80
 80074f6:	d016      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80074f8:	2b80      	cmp	r3, #128	; 0x80
 80074fa:	d81d      	bhi.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007500:	2b40      	cmp	r3, #64	; 0x40
 8007502:	d007      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007504:	e018      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007506:	4b66      	ldr	r3, [pc, #408]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	4a65      	ldr	r2, [pc, #404]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800750c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007510:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007512:	e017      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3304      	adds	r3, #4
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f000 fff2 	bl	8008504 <RCCEx_PLL2_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007524:	e00e      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3324      	adds	r3, #36	; 0x24
 800752a:	2100      	movs	r1, #0
 800752c:	4618      	mov	r0, r3
 800752e:	f001 f89b 	bl	8008668 <RCCEx_PLL3_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007536:	e005      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	75fb      	strb	r3, [r7, #23]
      break;
 800753c:	e002      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800753e:	bf00      	nop
 8007540:	e000      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007544:	7dfb      	ldrb	r3, [r7, #23]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800754a:	4b55      	ldr	r3, [pc, #340]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800754c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007556:	4952      	ldr	r1, [pc, #328]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007558:	4313      	orrs	r3, r2
 800755a:	650b      	str	r3, [r1, #80]	; 0x50
 800755c:	e001      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800756a:	2b00      	cmp	r3, #0
 800756c:	d049      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007574:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007578:	d030      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800757a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800757e:	d82a      	bhi.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007580:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007584:	d02c      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007586:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800758a:	d824      	bhi.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800758c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007590:	d018      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007596:	d81e      	bhi.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800759c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075a0:	d007      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80075a2:	e018      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a4:	4b3e      	ldr	r3, [pc, #248]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	4a3d      	ldr	r2, [pc, #244]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075b0:	e017      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	3304      	adds	r3, #4
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 ffa3 	bl	8008504 <RCCEx_PLL2_Config>
 80075be:	4603      	mov	r3, r0
 80075c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075c2:	e00e      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3324      	adds	r3, #36	; 0x24
 80075c8:	2100      	movs	r1, #0
 80075ca:	4618      	mov	r0, r3
 80075cc:	f001 f84c 	bl	8008668 <RCCEx_PLL3_Config>
 80075d0:	4603      	mov	r3, r0
 80075d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075d4:	e005      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	75fb      	strb	r3, [r7, #23]
      break;
 80075da:	e002      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80075dc:	bf00      	nop
 80075de:	e000      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80075e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075e8:	4b2d      	ldr	r3, [pc, #180]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075f6:	492a      	ldr	r1, [pc, #168]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	658b      	str	r3, [r1, #88]	; 0x58
 80075fc:	e001      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800760a:	2b00      	cmp	r3, #0
 800760c:	d04c      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007614:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007618:	d030      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800761a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800761e:	d82a      	bhi.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007620:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007624:	d02c      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007626:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800762a:	d824      	bhi.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800762c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007630:	d018      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007636:	d81e      	bhi.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800763c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007640:	d007      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007642:	e018      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007644:	4b16      	ldr	r3, [pc, #88]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007648:	4a15      	ldr	r2, [pc, #84]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800764a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800764e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007650:	e017      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	3304      	adds	r3, #4
 8007656:	2100      	movs	r1, #0
 8007658:	4618      	mov	r0, r3
 800765a:	f000 ff53 	bl	8008504 <RCCEx_PLL2_Config>
 800765e:	4603      	mov	r3, r0
 8007660:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007662:	e00e      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3324      	adds	r3, #36	; 0x24
 8007668:	2100      	movs	r1, #0
 800766a:	4618      	mov	r0, r3
 800766c:	f000 fffc 	bl	8008668 <RCCEx_PLL3_Config>
 8007670:	4603      	mov	r3, r0
 8007672:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007674:	e005      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	75fb      	strb	r3, [r7, #23]
      break;
 800767a:	e002      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800767c:	bf00      	nop
 800767e:	e000      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007682:	7dfb      	ldrb	r3, [r7, #23]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10d      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007688:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800768a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007696:	4902      	ldr	r1, [pc, #8]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007698:	4313      	orrs	r3, r2
 800769a:	658b      	str	r3, [r1, #88]	; 0x58
 800769c:	e004      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800769e:	bf00      	nop
 80076a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d032      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076b8:	2b30      	cmp	r3, #48	; 0x30
 80076ba:	d01c      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80076bc:	2b30      	cmp	r3, #48	; 0x30
 80076be:	d817      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	d00c      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x332>
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d813      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d016      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80076cc:	2b10      	cmp	r3, #16
 80076ce:	d10f      	bne.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4baf      	ldr	r3, [pc, #700]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4aae      	ldr	r2, [pc, #696]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076dc:	e00e      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3304      	adds	r3, #4
 80076e2:	2102      	movs	r1, #2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 ff0d 	bl	8008504 <RCCEx_PLL2_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80076ee:	e005      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
      break;
 80076f4:	e002      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80076f6:	bf00      	nop
 80076f8:	e000      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80076fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d109      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007702:	4ba3      	ldr	r3, [pc, #652]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007706:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770e:	49a0      	ldr	r1, [pc, #640]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007710:	4313      	orrs	r3, r2
 8007712:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007714:	e001      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d047      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800772e:	d030      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007734:	d82a      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007736:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800773a:	d02c      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800773c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007740:	d824      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007746:	d018      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774c:	d81e      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007756:	d007      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007758:	e018      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800775a:	4b8d      	ldr	r3, [pc, #564]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	4a8c      	ldr	r2, [pc, #560]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007766:	e017      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3304      	adds	r3, #4
 800776c:	2100      	movs	r1, #0
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fec8 	bl	8008504 <RCCEx_PLL2_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007778:	e00e      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3324      	adds	r3, #36	; 0x24
 800777e:	2100      	movs	r1, #0
 8007780:	4618      	mov	r0, r3
 8007782:	f000 ff71 	bl	8008668 <RCCEx_PLL3_Config>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800778a:	e005      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	75fb      	strb	r3, [r7, #23]
      break;
 8007790:	e002      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007792:	bf00      	nop
 8007794:	e000      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d109      	bne.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800779e:	4b7c      	ldr	r3, [pc, #496]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077aa:	4979      	ldr	r1, [pc, #484]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	650b      	str	r3, [r1, #80]	; 0x50
 80077b0:	e001      	b.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b2:	7dfb      	ldrb	r3, [r7, #23]
 80077b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d049      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077ca:	d02e      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80077cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077d0:	d828      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80077d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077d6:	d02a      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80077d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077dc:	d822      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80077de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077e2:	d026      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80077e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077e8:	d81c      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80077ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077ee:	d010      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80077f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077f4:	d816      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01d      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80077fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077fe:	d111      	bne.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3304      	adds	r3, #4
 8007804:	2101      	movs	r1, #1
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fe7c 	bl	8008504 <RCCEx_PLL2_Config>
 800780c:	4603      	mov	r3, r0
 800780e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007810:	e012      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3324      	adds	r3, #36	; 0x24
 8007816:	2101      	movs	r1, #1
 8007818:	4618      	mov	r0, r3
 800781a:	f000 ff25 	bl	8008668 <RCCEx_PLL3_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007822:	e009      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	75fb      	strb	r3, [r7, #23]
      break;
 8007828:	e006      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800782a:	bf00      	nop
 800782c:	e004      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007838:	7dfb      	ldrb	r3, [r7, #23]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d109      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800783e:	4b54      	ldr	r3, [pc, #336]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007842:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784a:	4951      	ldr	r1, [pc, #324]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800784c:	4313      	orrs	r3, r2
 800784e:	650b      	str	r3, [r1, #80]	; 0x50
 8007850:	e001      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d04b      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800786c:	d02e      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x520>
 800786e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007872:	d828      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007878:	d02a      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800787a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800787e:	d822      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007880:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007884:	d026      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007886:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800788a:	d81c      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800788c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007890:	d010      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007896:	d816      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d01d      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800789c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078a0:	d111      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3304      	adds	r3, #4
 80078a6:	2101      	movs	r1, #1
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 fe2b 	bl	8008504 <RCCEx_PLL2_Config>
 80078ae:	4603      	mov	r3, r0
 80078b0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078b2:	e012      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3324      	adds	r3, #36	; 0x24
 80078b8:	2101      	movs	r1, #1
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fed4 	bl	8008668 <RCCEx_PLL3_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80078c4:	e009      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
      break;
 80078ca:	e006      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80078cc:	bf00      	nop
 80078ce:	e004      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80078d0:	bf00      	nop
 80078d2:	e002      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80078d4:	bf00      	nop
 80078d6:	e000      	b.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80078d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80078e0:	4b2b      	ldr	r3, [pc, #172]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078ee:	4928      	ldr	r1, [pc, #160]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	658b      	str	r3, [r1, #88]	; 0x58
 80078f4:	e001      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d02f      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800790a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800790e:	d00e      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007914:	d814      	bhi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d015      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800791a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800791e:	d10f      	bne.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007920:	4b1b      	ldr	r3, [pc, #108]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	4a1a      	ldr	r2, [pc, #104]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800792a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800792c:	e00c      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3304      	adds	r3, #4
 8007932:	2101      	movs	r1, #1
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fde5 	bl	8008504 <RCCEx_PLL2_Config>
 800793a:	4603      	mov	r3, r0
 800793c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800793e:	e003      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	75fb      	strb	r3, [r7, #23]
      break;
 8007944:	e000      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800794e:	4b10      	ldr	r3, [pc, #64]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007952:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800795a:	490d      	ldr	r1, [pc, #52]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800795c:	4313      	orrs	r3, r2
 800795e:	650b      	str	r3, [r1, #80]	; 0x50
 8007960:	e001      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007962:	7dfb      	ldrb	r3, [r7, #23]
 8007964:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d033      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	2b03      	cmp	r3, #3
 8007978:	d81c      	bhi.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	080079bb 	.word	0x080079bb
 8007984:	08007995 	.word	0x08007995
 8007988:	080079a3 	.word	0x080079a3
 800798c:	080079bb 	.word	0x080079bb
 8007990:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007994:	4bb8      	ldr	r3, [pc, #736]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	4ab7      	ldr	r2, [pc, #732]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800799a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800799e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079a0:	e00c      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3304      	adds	r3, #4
 80079a6:	2102      	movs	r1, #2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fdab 	bl	8008504 <RCCEx_PLL2_Config>
 80079ae:	4603      	mov	r3, r0
 80079b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80079b2:	e003      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	75fb      	strb	r3, [r7, #23]
      break;
 80079b8:	e000      	b.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80079ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d109      	bne.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80079c2:	4bad      	ldr	r3, [pc, #692]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c6:	f023 0203 	bic.w	r2, r3, #3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ce:	49aa      	ldr	r1, [pc, #680]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079d4:	e001      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d6:	7dfb      	ldrb	r3, [r7, #23]
 80079d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 8086 	beq.w	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079e8:	4ba4      	ldr	r3, [pc, #656]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4aa3      	ldr	r2, [pc, #652]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80079ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80079f4:	f7fa fa26 	bl	8001e44 <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80079fa:	e009      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079fc:	f7fa fa22 	bl	8001e44 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b64      	cmp	r3, #100	; 0x64
 8007a08:	d902      	bls.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	75fb      	strb	r3, [r7, #23]
        break;
 8007a0e:	e005      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a10:	4b9a      	ldr	r3, [pc, #616]	; (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0ef      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d166      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007a22:	4b95      	ldr	r3, [pc, #596]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a2c:	4053      	eors	r3, r2
 8007a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d013      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a36:	4b90      	ldr	r3, [pc, #576]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a3e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007a40:	4b8d      	ldr	r3, [pc, #564]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a44:	4a8c      	ldr	r2, [pc, #560]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a4a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007a4c:	4b8a      	ldr	r3, [pc, #552]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a50:	4a89      	ldr	r2, [pc, #548]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a56:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007a58:	4a87      	ldr	r2, [pc, #540]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a68:	d115      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a6a:	f7fa f9eb 	bl	8001e44 <HAL_GetTick>
 8007a6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a70:	e00b      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a72:	f7fa f9e7 	bl	8001e44 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d902      	bls.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	75fb      	strb	r3, [r7, #23]
            break;
 8007a88:	e005      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a8a:	4b7b      	ldr	r3, [pc, #492]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0ed      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d126      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aaa:	d10d      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007aac:	4b72      	ldr	r3, [pc, #456]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007aba:	0919      	lsrs	r1, r3, #4
 8007abc:	4b70      	ldr	r3, [pc, #448]	; (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007abe:	400b      	ands	r3, r1
 8007ac0:	496d      	ldr	r1, [pc, #436]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	610b      	str	r3, [r1, #16]
 8007ac6:	e005      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007ac8:	4b6b      	ldr	r3, [pc, #428]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	4a6a      	ldr	r2, [pc, #424]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ace:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ad2:	6113      	str	r3, [r2, #16]
 8007ad4:	4b68      	ldr	r3, [pc, #416]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ad6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ae2:	4965      	ldr	r1, [pc, #404]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	670b      	str	r3, [r1, #112]	; 0x70
 8007ae8:	e004      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	75bb      	strb	r3, [r7, #22]
 8007aee:	e001      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d07e      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b04:	2b28      	cmp	r3, #40	; 0x28
 8007b06:	d867      	bhi.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007bdf 	.word	0x08007bdf
 8007b14:	08007bd9 	.word	0x08007bd9
 8007b18:	08007bd9 	.word	0x08007bd9
 8007b1c:	08007bd9 	.word	0x08007bd9
 8007b20:	08007bd9 	.word	0x08007bd9
 8007b24:	08007bd9 	.word	0x08007bd9
 8007b28:	08007bd9 	.word	0x08007bd9
 8007b2c:	08007bd9 	.word	0x08007bd9
 8007b30:	08007bb5 	.word	0x08007bb5
 8007b34:	08007bd9 	.word	0x08007bd9
 8007b38:	08007bd9 	.word	0x08007bd9
 8007b3c:	08007bd9 	.word	0x08007bd9
 8007b40:	08007bd9 	.word	0x08007bd9
 8007b44:	08007bd9 	.word	0x08007bd9
 8007b48:	08007bd9 	.word	0x08007bd9
 8007b4c:	08007bd9 	.word	0x08007bd9
 8007b50:	08007bc7 	.word	0x08007bc7
 8007b54:	08007bd9 	.word	0x08007bd9
 8007b58:	08007bd9 	.word	0x08007bd9
 8007b5c:	08007bd9 	.word	0x08007bd9
 8007b60:	08007bd9 	.word	0x08007bd9
 8007b64:	08007bd9 	.word	0x08007bd9
 8007b68:	08007bd9 	.word	0x08007bd9
 8007b6c:	08007bd9 	.word	0x08007bd9
 8007b70:	08007bdf 	.word	0x08007bdf
 8007b74:	08007bd9 	.word	0x08007bd9
 8007b78:	08007bd9 	.word	0x08007bd9
 8007b7c:	08007bd9 	.word	0x08007bd9
 8007b80:	08007bd9 	.word	0x08007bd9
 8007b84:	08007bd9 	.word	0x08007bd9
 8007b88:	08007bd9 	.word	0x08007bd9
 8007b8c:	08007bd9 	.word	0x08007bd9
 8007b90:	08007bdf 	.word	0x08007bdf
 8007b94:	08007bd9 	.word	0x08007bd9
 8007b98:	08007bd9 	.word	0x08007bd9
 8007b9c:	08007bd9 	.word	0x08007bd9
 8007ba0:	08007bd9 	.word	0x08007bd9
 8007ba4:	08007bd9 	.word	0x08007bd9
 8007ba8:	08007bd9 	.word	0x08007bd9
 8007bac:	08007bd9 	.word	0x08007bd9
 8007bb0:	08007bdf 	.word	0x08007bdf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	2101      	movs	r1, #1
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fca2 	bl	8008504 <RCCEx_PLL2_Config>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bc4:	e00c      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	3324      	adds	r3, #36	; 0x24
 8007bca:	2101      	movs	r1, #1
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fd4b 	bl	8008668 <RCCEx_PLL3_Config>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007bd6:	e003      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	75fb      	strb	r3, [r7, #23]
      break;
 8007bdc:	e000      	b.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d109      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007be6:	4b24      	ldr	r3, [pc, #144]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bf2:	4921      	ldr	r1, [pc, #132]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	654b      	str	r3, [r1, #84]	; 0x54
 8007bf8:	e001      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d03e      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d820      	bhi.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007c12:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007c5b 	.word	0x08007c5b
 8007c1c:	08007c31 	.word	0x08007c31
 8007c20:	08007c43 	.word	0x08007c43
 8007c24:	08007c5b 	.word	0x08007c5b
 8007c28:	08007c5b 	.word	0x08007c5b
 8007c2c:	08007c5b 	.word	0x08007c5b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3304      	adds	r3, #4
 8007c34:	2101      	movs	r1, #1
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fc64 	bl	8008504 <RCCEx_PLL2_Config>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c40:	e00c      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3324      	adds	r3, #36	; 0x24
 8007c46:	2101      	movs	r1, #1
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fd0d 	bl	8008668 <RCCEx_PLL3_Config>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007c52:	e003      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	75fb      	strb	r3, [r7, #23]
      break;
 8007c58:	e000      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d110      	bne.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c62:	4b05      	ldr	r3, [pc, #20]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c66:	f023 0207 	bic.w	r2, r3, #7
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c6e:	4902      	ldr	r1, [pc, #8]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	654b      	str	r3, [r1, #84]	; 0x54
 8007c74:	e008      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007c76:	bf00      	nop
 8007c78:	58024400 	.word	0x58024400
 8007c7c:	58024800 	.word	0x58024800
 8007c80:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d039      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9a:	2b05      	cmp	r3, #5
 8007c9c:	d820      	bhi.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007c9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007ce7 	.word	0x08007ce7
 8007ca8:	08007cbd 	.word	0x08007cbd
 8007cac:	08007ccf 	.word	0x08007ccf
 8007cb0:	08007ce7 	.word	0x08007ce7
 8007cb4:	08007ce7 	.word	0x08007ce7
 8007cb8:	08007ce7 	.word	0x08007ce7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fc1e 	bl	8008504 <RCCEx_PLL2_Config>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ccc:	e00c      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3324      	adds	r3, #36	; 0x24
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fcc7 	bl	8008668 <RCCEx_PLL3_Config>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007cde:	e003      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce4:	e000      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10a      	bne.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cee:	4bb7      	ldr	r3, [pc, #732]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf2:	f023 0207 	bic.w	r2, r3, #7
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfc:	49b3      	ldr	r1, [pc, #716]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	658b      	str	r3, [r1, #88]	; 0x58
 8007d02:	e001      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0320 	and.w	r3, r3, #32
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d04b      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d1e:	d02e      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d24:	d828      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d2a:	d02a      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d30:	d822      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007d32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d36:	d026      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007d38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d3c:	d81c      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d42:	d010      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d48:	d816      	bhi.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d01d      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d52:	d111      	bne.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3304      	adds	r3, #4
 8007d58:	2100      	movs	r1, #0
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fbd2 	bl	8008504 <RCCEx_PLL2_Config>
 8007d60:	4603      	mov	r3, r0
 8007d62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d64:	e012      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3324      	adds	r3, #36	; 0x24
 8007d6a:	2102      	movs	r1, #2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 fc7b 	bl	8008668 <RCCEx_PLL3_Config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d76:	e009      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d7c:	e006      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007d7e:	bf00      	nop
 8007d80:	e004      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007d82:	bf00      	nop
 8007d84:	e002      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007d86:	bf00      	nop
 8007d88:	e000      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10a      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d92:	4b8e      	ldr	r3, [pc, #568]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007da0:	498a      	ldr	r1, [pc, #552]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	654b      	str	r3, [r1, #84]	; 0x54
 8007da6:	e001      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d04b      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007dc2:	d02e      	beq.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007dc4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007dc8:	d828      	bhi.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dce:	d02a      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd4:	d822      	bhi.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007dd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dda:	d026      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007ddc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007de0:	d81c      	bhi.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de6:	d010      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dec:	d816      	bhi.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01d      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df6:	d111      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fb80 	bl	8008504 <RCCEx_PLL2_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e08:	e012      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	3324      	adds	r3, #36	; 0x24
 8007e0e:	2102      	movs	r1, #2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 fc29 	bl	8008668 <RCCEx_PLL3_Config>
 8007e16:	4603      	mov	r3, r0
 8007e18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007e1a:	e009      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e20:	e006      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e22:	bf00      	nop
 8007e24:	e004      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e26:	bf00      	nop
 8007e28:	e002      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e2a:	bf00      	nop
 8007e2c:	e000      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10a      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e36:	4b65      	ldr	r3, [pc, #404]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e44:	4961      	ldr	r1, [pc, #388]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	658b      	str	r3, [r1, #88]	; 0x58
 8007e4a:	e001      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d04b      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e66:	d02e      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007e68:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007e6c:	d828      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e72:	d02a      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e78:	d822      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007e7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e7e:	d026      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007e80:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e84:	d81c      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007e86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e8a:	d010      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e90:	d816      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d01d      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e9a:	d111      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fb2e 	bl	8008504 <RCCEx_PLL2_Config>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007eac:	e012      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3324      	adds	r3, #36	; 0x24
 8007eb2:	2102      	movs	r1, #2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fbd7 	bl	8008668 <RCCEx_PLL3_Config>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ebe:	e009      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec4:	e006      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007ec6:	bf00      	nop
 8007ec8:	e004      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007eca:	bf00      	nop
 8007ecc:	e002      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007ece:	bf00      	nop
 8007ed0:	e000      	b.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007ed2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007eda:	4b3c      	ldr	r3, [pc, #240]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ee8:	4938      	ldr	r1, [pc, #224]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	658b      	str	r3, [r1, #88]	; 0x58
 8007eee:	e001      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0308 	and.w	r3, r3, #8
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01a      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f0a:	d10a      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3324      	adds	r3, #36	; 0x24
 8007f10:	2102      	movs	r1, #2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 fba8 	bl	8008668 <RCCEx_PLL3_Config>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007f22:	4b2a      	ldr	r3, [pc, #168]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f30:	4926      	ldr	r1, [pc, #152]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0310 	and.w	r3, r3, #16
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d01a      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f4c:	d10a      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3324      	adds	r3, #36	; 0x24
 8007f52:	2102      	movs	r1, #2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f000 fb87 	bl	8008668 <RCCEx_PLL3_Config>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f64:	4b19      	ldr	r3, [pc, #100]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f72:	4916      	ldr	r1, [pc, #88]	; (8007fcc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d036      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f8e:	d01f      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f94:	d817      	bhi.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f9e:	d009      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007fa0:	e011      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 faab 	bl	8008504 <RCCEx_PLL2_Config>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fb2:	e00e      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3324      	adds	r3, #36	; 0x24
 8007fb8:	2102      	movs	r1, #2
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fb54 	bl	8008668 <RCCEx_PLL3_Config>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007fc4:	e005      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8007fca:	e002      	b.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007fcc:	58024400 	.word	0x58024400
      break;
 8007fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fd8:	4b93      	ldr	r3, [pc, #588]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007fe6:	4990      	ldr	r1, [pc, #576]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	658b      	str	r3, [r1, #88]	; 0x58
 8007fec:	e001      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d033      	beq.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008004:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008008:	d01c      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800800a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800800e:	d816      	bhi.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008014:	d003      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800801a:	d007      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800801c:	e00f      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800801e:	4b82      	ldr	r3, [pc, #520]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	4a81      	ldr	r2, [pc, #516]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008028:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800802a:	e00c      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3324      	adds	r3, #36	; 0x24
 8008030:	2101      	movs	r1, #1
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fb18 	bl	8008668 <RCCEx_PLL3_Config>
 8008038:	4603      	mov	r3, r0
 800803a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800803c:	e003      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	75fb      	strb	r3, [r7, #23]
      break;
 8008042:	e000      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10a      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800804c:	4b76      	ldr	r3, [pc, #472]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800804e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800805a:	4973      	ldr	r1, [pc, #460]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800805c:	4313      	orrs	r3, r2
 800805e:	654b      	str	r3, [r1, #84]	; 0x54
 8008060:	e001      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d029      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800807a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800807e:	d007      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008080:	e00f      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008082:	4b69      	ldr	r3, [pc, #420]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008086:	4a68      	ldr	r2, [pc, #416]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800808c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800808e:	e00b      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3304      	adds	r3, #4
 8008094:	2102      	movs	r1, #2
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fa34 	bl	8008504 <RCCEx_PLL2_Config>
 800809c:	4603      	mov	r3, r0
 800809e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80080a0:	e002      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	75fb      	strb	r3, [r7, #23]
      break;
 80080a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d109      	bne.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080ae:	4b5e      	ldr	r3, [pc, #376]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ba:	495b      	ldr	r1, [pc, #364]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080c0:	e001      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3324      	adds	r3, #36	; 0x24
 80080d6:	2102      	movs	r1, #2
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fac5 	bl	8008668 <RCCEx_PLL3_Config>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d030      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080fc:	d017      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80080fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008102:	d811      	bhi.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008108:	d013      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800810a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800810e:	d80b      	bhi.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008110:	2b00      	cmp	r3, #0
 8008112:	d010      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008118:	d106      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800811a:	4b43      	ldr	r3, [pc, #268]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800811c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811e:	4a42      	ldr	r2, [pc, #264]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008124:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008126:	e007      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	75fb      	strb	r3, [r7, #23]
      break;
 800812c:	e004      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800812e:	bf00      	nop
 8008130:	e002      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008132:	bf00      	nop
 8008134:	e000      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d109      	bne.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800813e:	4b3a      	ldr	r3, [pc, #232]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008142:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800814a:	4937      	ldr	r1, [pc, #220]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800814c:	4313      	orrs	r3, r2
 800814e:	654b      	str	r3, [r1, #84]	; 0x54
 8008150:	e001      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008152:	7dfb      	ldrb	r3, [r7, #23]
 8008154:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d008      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008162:	4b31      	ldr	r3, [pc, #196]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008166:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	492e      	ldr	r1, [pc, #184]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008170:	4313      	orrs	r3, r2
 8008172:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d009      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008180:	4b29      	ldr	r3, [pc, #164]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800818e:	4926      	ldr	r1, [pc, #152]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008190:	4313      	orrs	r3, r2
 8008192:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80081a0:	4b21      	ldr	r3, [pc, #132]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ac:	491e      	ldr	r1, [pc, #120]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00d      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081be:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	4a19      	ldr	r2, [pc, #100]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081c8:	6113      	str	r3, [r2, #16]
 80081ca:	4b17      	ldr	r3, [pc, #92]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081cc:	691a      	ldr	r2, [r3, #16]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80081d4:	4914      	ldr	r1, [pc, #80]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da08      	bge.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081e2:	4b11      	ldr	r3, [pc, #68]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ee:	490e      	ldr	r1, [pc, #56]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d009      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008200:	4b09      	ldr	r3, [pc, #36]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008204:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800820e:	4906      	ldr	r1, [pc, #24]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008210:	4313      	orrs	r3, r2
 8008212:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008214:	7dbb      	ldrb	r3, [r7, #22]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	e000      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	58024400 	.word	0x58024400

0800822c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4aa3      	ldr	r2, [pc, #652]	; (80084c4 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 8008238:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f043 0208 	orr.w	r2, r3, #8
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)		 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	601a      	str	r2, [r3, #0]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	601a      	str	r2, [r3, #0]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	601a      	str	r2, [r3, #0]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	601a      	str	r2, [r3, #0]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 800828e:	4b8e      	ldr	r3, [pc, #568]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008292:	0d1b      	lsrs	r3, r3, #20
 8008294:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 800829c:	4b8a      	ldr	r3, [pc, #552]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 800829e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 80082aa:	4b87      	ldr	r3, [pc, #540]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80082ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ae:	0e1b      	lsrs	r3, r3, #24
 80082b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 80082ba:	4b83      	ldr	r3, [pc, #524]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	0a5b      	lsrs	r3, r3, #9
 80082c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c4:	1c5a      	adds	r2, r3, #1
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 80082ca:	4b7f      	ldr	r3, [pc, #508]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	0c1b      	lsrs	r3, r3, #16
 80082d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082d4:	1c5a      	adds	r2, r3, #1
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 80082da:	4b7b      	ldr	r3, [pc, #492]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80082dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082de:	0a9b      	lsrs	r3, r3, #10
 80082e0:	f003 0203 	and.w	r2, r3, #3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 80082e8:	4b77      	ldr	r3, [pc, #476]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80082ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ec:	0a5b      	lsrs	r3, r3, #9
 80082ee:	f003 0201 	and.w	r2, r3, #1
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 80082f6:	4b74      	ldr	r3, [pc, #464]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	0b1b      	lsrs	r3, r3, #12
 80082fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 8008304:	4b70      	ldr	r3, [pc, #448]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 8008312:	4b6d      	ldr	r3, [pc, #436]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008316:	0e1b      	lsrs	r3, r3, #24
 8008318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 8008322:	4b69      	ldr	r3, [pc, #420]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	0a5b      	lsrs	r3, r3, #9
 8008328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 8008332:	4b65      	ldr	r3, [pc, #404]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008336:	0c1b      	lsrs	r3, r3, #16
 8008338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 8008342:	4b61      	ldr	r3, [pc, #388]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	099b      	lsrs	r3, r3, #6
 8008348:	f003 0203 	and.w	r2, r3, #3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 8008350:	4b5d      	ldr	r3, [pc, #372]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	f003 0201 	and.w	r2, r3, #1
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 800835e:	4b5a      	ldr	r3, [pc, #360]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008362:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	679a      	str	r2, [r3, #120]	; 0x78
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 800836a:	4b57      	ldr	r3, [pc, #348]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 800836c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836e:	f003 0207 	and.w	r2, r3, #7
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 8008376:	4b54      	ldr	r3, [pc, #336]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837a:	f003 0207 	and.w	r2, r3, #7
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 8008384:	4b50      	ldr	r3, [pc, #320]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008388:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008392:	4b4d      	ldr	r3, [pc, #308]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008396:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 80083a0:	4b49      	ldr	r3, [pc, #292]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80083a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 80083ae:	4b46      	ldr	r3, [pc, #280]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80083b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b2:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 80083bc:	4b42      	ldr	r3, [pc, #264]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80083be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c0:	f003 0207 	and.w	r2, r3, #7
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
 80083c8:	4b3f      	ldr	r3, [pc, #252]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80083ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083cc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 80083d4:	4b3c      	ldr	r3, [pc, #240]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80083d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d8:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 80083e2:	4b39      	ldr	r3, [pc, #228]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80083e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e6:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 80083f0:	4b35      	ldr	r3, [pc, #212]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80083f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 80083fe:	4b32      	ldr	r3, [pc, #200]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008402:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 800840c:	4b2e      	ldr	r3, [pc, #184]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 800840e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008410:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 8008418:	4b2b      	ldr	r3, [pc, #172]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 800841a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
 8008424:	4b28      	ldr	r3, [pc, #160]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 8008432:	4b25      	ldr	r3, [pc, #148]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 8008440:	4b21      	ldr	r3, [pc, #132]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008444:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 800844c:	4b1e      	ldr	r3, [pc, #120]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 800844e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008450:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	669a      	str	r2, [r3, #104]	; 0x68
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8008458:	4b1b      	ldr	r3, [pc, #108]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 800845a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	665a      	str	r2, [r3, #100]	; 0x64
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 8008464:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008468:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 8008470:	4b15      	ldr	r3, [pc, #84]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 800847c:	4b12      	ldr	r3, [pc, #72]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 800847e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008480:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 800848a:	4b0f      	ldr	r3, [pc, #60]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 800848c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848e:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 8008496:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 8008498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849a:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 80084a4:	4b08      	ldr	r3, [pc, #32]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80084a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a8:	f003 0203 	and.w	r2, r3, #3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	645a      	str	r2, [r3, #68]	; 0x44
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80084b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 80084bc:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
 80084be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c0:	e004      	b.n	80084cc <HAL_RCCEx_GetPeriphCLKConfig+0x2a0>
 80084c2:	bf00      	nop
 80084c4:	c9fff1f7 	.word	0xc9fff1f7
 80084c8:	58024400 	.word	0x58024400
 80084cc:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <HAL_RCCEx_GetPeriphCLKConfig+0x2d4>)
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d104      	bne.n	80084ea <HAL_RCCEx_GetPeriphCLKConfig+0x2be>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80084e8:	e004      	b.n	80084f4 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80084f0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	58024400 	.word	0x58024400

08008504 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008512:	4b53      	ldr	r3, [pc, #332]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	f003 0303 	and.w	r3, r3, #3
 800851a:	2b03      	cmp	r3, #3
 800851c:	d101      	bne.n	8008522 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e099      	b.n	8008656 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008522:	4b4f      	ldr	r3, [pc, #316]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a4e      	ldr	r2, [pc, #312]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008528:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800852c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800852e:	f7f9 fc89 	bl	8001e44 <HAL_GetTick>
 8008532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008534:	e008      	b.n	8008548 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008536:	f7f9 fc85 	bl	8001e44 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d901      	bls.n	8008548 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e086      	b.n	8008656 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008548:	4b45      	ldr	r3, [pc, #276]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1f0      	bne.n	8008536 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008554:	4b42      	ldr	r3, [pc, #264]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008558:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	031b      	lsls	r3, r3, #12
 8008562:	493f      	ldr	r1, [pc, #252]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008564:	4313      	orrs	r3, r2
 8008566:	628b      	str	r3, [r1, #40]	; 0x28
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	3b01      	subs	r3, #1
 800856e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	3b01      	subs	r3, #1
 8008578:	025b      	lsls	r3, r3, #9
 800857a:	b29b      	uxth	r3, r3
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	3b01      	subs	r3, #1
 8008584:	041b      	lsls	r3, r3, #16
 8008586:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	3b01      	subs	r3, #1
 8008592:	061b      	lsls	r3, r3, #24
 8008594:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008598:	4931      	ldr	r1, [pc, #196]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 800859a:	4313      	orrs	r3, r2
 800859c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800859e:	4b30      	ldr	r3, [pc, #192]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	492d      	ldr	r1, [pc, #180]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80085b0:	4b2b      	ldr	r3, [pc, #172]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	f023 0220 	bic.w	r2, r3, #32
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	4928      	ldr	r1, [pc, #160]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80085c2:	4b27      	ldr	r3, [pc, #156]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	4a26      	ldr	r2, [pc, #152]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085c8:	f023 0310 	bic.w	r3, r3, #16
 80085cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80085ce:	4b24      	ldr	r3, [pc, #144]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085d2:	4b24      	ldr	r3, [pc, #144]	; (8008664 <RCCEx_PLL2_Config+0x160>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	69d2      	ldr	r2, [r2, #28]
 80085da:	00d2      	lsls	r2, r2, #3
 80085dc:	4920      	ldr	r1, [pc, #128]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80085e2:	4b1f      	ldr	r3, [pc, #124]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	4a1e      	ldr	r2, [pc, #120]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085e8:	f043 0310 	orr.w	r3, r3, #16
 80085ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d106      	bne.n	8008602 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80085f4:	4b1a      	ldr	r3, [pc, #104]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	4a19      	ldr	r2, [pc, #100]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008600:	e00f      	b.n	8008622 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d106      	bne.n	8008616 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008608:	4b15      	ldr	r3, [pc, #84]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	4a14      	ldr	r2, [pc, #80]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 800860e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008612:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008614:	e005      	b.n	8008622 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008616:	4b12      	ldr	r3, [pc, #72]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861a:	4a11      	ldr	r2, [pc, #68]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 800861c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008620:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008622:	4b0f      	ldr	r3, [pc, #60]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a0e      	ldr	r2, [pc, #56]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008628:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800862c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800862e:	f7f9 fc09 	bl	8001e44 <HAL_GetTick>
 8008632:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008634:	e008      	b.n	8008648 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008636:	f7f9 fc05 	bl	8001e44 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d901      	bls.n	8008648 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e006      	b.n	8008656 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008648:	4b05      	ldr	r3, [pc, #20]	; (8008660 <RCCEx_PLL2_Config+0x15c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0f0      	beq.n	8008636 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	58024400 	.word	0x58024400
 8008664:	ffff0007 	.word	0xffff0007

08008668 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008676:	4b53      	ldr	r3, [pc, #332]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	f003 0303 	and.w	r3, r3, #3
 800867e:	2b03      	cmp	r3, #3
 8008680:	d101      	bne.n	8008686 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e099      	b.n	80087ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008686:	4b4f      	ldr	r3, [pc, #316]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a4e      	ldr	r2, [pc, #312]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800868c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008692:	f7f9 fbd7 	bl	8001e44 <HAL_GetTick>
 8008696:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008698:	e008      	b.n	80086ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800869a:	f7f9 fbd3 	bl	8001e44 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d901      	bls.n	80086ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e086      	b.n	80087ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086ac:	4b45      	ldr	r3, [pc, #276]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1f0      	bne.n	800869a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80086b8:	4b42      	ldr	r3, [pc, #264]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	051b      	lsls	r3, r3, #20
 80086c6:	493f      	ldr	r1, [pc, #252]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	628b      	str	r3, [r1, #40]	; 0x28
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	3b01      	subs	r3, #1
 80086dc:	025b      	lsls	r3, r3, #9
 80086de:	b29b      	uxth	r3, r3
 80086e0:	431a      	orrs	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	041b      	lsls	r3, r3, #16
 80086ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	061b      	lsls	r3, r3, #24
 80086f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086fc:	4931      	ldr	r1, [pc, #196]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008702:	4b30      	ldr	r3, [pc, #192]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008706:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	492d      	ldr	r1, [pc, #180]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008710:	4313      	orrs	r3, r2
 8008712:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008714:	4b2b      	ldr	r3, [pc, #172]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	4928      	ldr	r1, [pc, #160]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008722:	4313      	orrs	r3, r2
 8008724:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008726:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	4a26      	ldr	r2, [pc, #152]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800872c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008732:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008736:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <RCCEx_PLL3_Config+0x160>)
 8008738:	4013      	ands	r3, r2
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	69d2      	ldr	r2, [r2, #28]
 800873e:	00d2      	lsls	r2, r2, #3
 8008740:	4920      	ldr	r1, [pc, #128]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008742:	4313      	orrs	r3, r2
 8008744:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008746:	4b1f      	ldr	r3, [pc, #124]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874a:	4a1e      	ldr	r2, [pc, #120]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800874c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008750:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d106      	bne.n	8008766 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008758:	4b1a      	ldr	r3, [pc, #104]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	4a19      	ldr	r2, [pc, #100]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800875e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008764:	e00f      	b.n	8008786 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d106      	bne.n	800877a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800876c:	4b15      	ldr	r3, [pc, #84]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800876e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008770:	4a14      	ldr	r2, [pc, #80]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008772:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008776:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008778:	e005      	b.n	8008786 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800877a:	4b12      	ldr	r3, [pc, #72]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	4a11      	ldr	r2, [pc, #68]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008784:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008786:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a0e      	ldr	r2, [pc, #56]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800878c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008792:	f7f9 fb57 	bl	8001e44 <HAL_GetTick>
 8008796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008798:	e008      	b.n	80087ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800879a:	f7f9 fb53 	bl	8001e44 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d901      	bls.n	80087ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e006      	b.n	80087ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087ac:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <RCCEx_PLL3_Config+0x15c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d0f0      	beq.n	800879a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	58024400 	.word	0x58024400
 80087c8:	ffff0007 	.word	0xffff0007

080087cc <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <HAL_SAI_Receive_DMA+0x1a>
 80087e0:	88fb      	ldrh	r3, [r7, #6]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e079      	b.n	80088de <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d172      	bne.n	80088dc <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <HAL_SAI_Receive_DMA+0x38>
 8008800:	2302      	movs	r3, #2
 8008802:	e06c      	b.n	80088de <HAL_SAI_Receive_DMA+0x112>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	88fa      	ldrh	r2, [r7, #6]
 8008816:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	88fa      	ldrh	r2, [r7, #6]
 800881e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2222      	movs	r2, #34	; 0x22
 800882e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008838:	4a2b      	ldr	r2, [pc, #172]	; (80088e8 <HAL_SAI_Receive_DMA+0x11c>)
 800883a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008842:	4a2a      	ldr	r2, [pc, #168]	; (80088ec <HAL_SAI_Receive_DMA+0x120>)
 8008844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800884c:	4a28      	ldr	r2, [pc, #160]	; (80088f0 <HAL_SAI_Receive_DMA+0x124>)
 800884e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008856:	2200      	movs	r2, #0
 8008858:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	331c      	adds	r3, #28
 8008866:	4619      	mov	r1, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800886c:	461a      	mov	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008874:	f7fa fca0 	bl	80031b8 <HAL_DMA_Start_IT>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e029      	b.n	80088de <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800888a:	2100      	movs	r1, #0
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f83b 	bl	8008908 <SAI_InterruptFlag>
 8008892:	4601      	mov	r1, r0
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691a      	ldr	r2, [r3, #16]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80088b0:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d107      	bne.n	80088d0 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80088ce:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	e000      	b.n	80088de <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80088dc:	2302      	movs	r3, #2
  }
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	08008a4d 	.word	0x08008a4d
 80088ec:	080089ed 	.word	0x080089ed
 80088f0:	08008a69 	.word	0x08008a69

080088f4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008914:	2301      	movs	r3, #1
 8008916:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008918:	78fb      	ldrb	r3, [r7, #3]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d103      	bne.n	8008926 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f043 0308 	orr.w	r3, r3, #8
 8008924:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892a:	2b08      	cmp	r3, #8
 800892c:	d10b      	bne.n	8008946 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008932:	2b03      	cmp	r3, #3
 8008934:	d003      	beq.n	800893e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d103      	bne.n	8008946 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f043 0310 	orr.w	r3, r3, #16
 8008944:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	2b03      	cmp	r3, #3
 800894c:	d003      	beq.n	8008956 <SAI_InterruptFlag+0x4e>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2b02      	cmp	r3, #2
 8008954:	d104      	bne.n	8008960 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	e003      	b.n	8008968 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f043 0304 	orr.w	r3, r3, #4
 8008966:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008968:	68fb      	ldr	r3, [r7, #12]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
	...

08008978 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008980:	4b18      	ldr	r3, [pc, #96]	; (80089e4 <SAI_Disable+0x6c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a18      	ldr	r2, [pc, #96]	; (80089e8 <SAI_Disable+0x70>)
 8008986:	fba2 2303 	umull	r2, r3, r2, r3
 800898a:	0b1b      	lsrs	r3, r3, #12
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008990:	2300      	movs	r3, #0
 8008992:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80089a2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	72fb      	strb	r3, [r7, #11]
      break;
 80089be:	e009      	b.n	80089d4 <SAI_Disable+0x5c>
    }
    count--;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e7      	bne.n	80089a4 <SAI_Disable+0x2c>

  return status;
 80089d4:	7afb      	ldrb	r3, [r7, #11]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	20000000 	.word	0x20000000
 80089e8:	95cbec1b 	.word	0x95cbec1b

080089ec <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a02:	d01c      	beq.n	8008a3e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008a12:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f7ff ff72 	bl	8008908 <SAI_InterruptFlag>
 8008a24:	4603      	mov	r3, r0
 8008a26:	43d9      	mvns	r1, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	691a      	ldr	r2, [r3, #16]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	400a      	ands	r2, r1
 8008a34:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7f8 fa18 	bl	8000e74 <HAL_SAI_RxCpltCallback>
#endif
}
 8008a44:	bf00      	nop
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a58:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7f8 fa00 	bl	8000e60 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fb fd32 	bl	80044e0 <HAL_DMA_GetError>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d01d      	beq.n	8008abe <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008aa0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f7ff ff68 	bl	8008978 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7ff ff1b 	bl	80088f4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8008abe:	bf00      	nop
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ac8:	b084      	sub	sp, #16
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	f107 001c 	add.w	r0, r7, #28
 8008ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d120      	bne.n	8008b22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	4b2a      	ldr	r3, [pc, #168]	; (8008b9c <USB_CoreInit+0xd4>)
 8008af2:	4013      	ands	r3, r2
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d105      	bne.n	8008b16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 fb14 	bl	800a144 <USB_CoreReset>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73fb      	strb	r3, [r7, #15]
 8008b20:	e01a      	b.n	8008b58 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f001 fb08 	bl	800a144 <USB_CoreReset>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d106      	bne.n	8008b4c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	639a      	str	r2, [r3, #56]	; 0x38
 8008b4a:	e005      	b.n	8008b58 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d116      	bne.n	8008b8c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <USB_CoreInit+0xd8>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f043 0206 	orr.w	r2, r3, #6
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f043 0220 	orr.w	r2, r3, #32
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b98:	b004      	add	sp, #16
 8008b9a:	4770      	bx	lr
 8008b9c:	ffbdffbf 	.word	0xffbdffbf
 8008ba0:	03ee0000 	.word	0x03ee0000

08008ba4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d165      	bne.n	8008c84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4a41      	ldr	r2, [pc, #260]	; (8008cc0 <USB_SetTurnaroundTime+0x11c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d906      	bls.n	8008bce <USB_SetTurnaroundTime+0x2a>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4a40      	ldr	r2, [pc, #256]	; (8008cc4 <USB_SetTurnaroundTime+0x120>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d202      	bcs.n	8008bce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008bc8:	230f      	movs	r3, #15
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	e062      	b.n	8008c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	4a3c      	ldr	r2, [pc, #240]	; (8008cc4 <USB_SetTurnaroundTime+0x120>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d306      	bcc.n	8008be4 <USB_SetTurnaroundTime+0x40>
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	4a3b      	ldr	r2, [pc, #236]	; (8008cc8 <USB_SetTurnaroundTime+0x124>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d202      	bcs.n	8008be4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008bde:	230e      	movs	r3, #14
 8008be0:	617b      	str	r3, [r7, #20]
 8008be2:	e057      	b.n	8008c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4a38      	ldr	r2, [pc, #224]	; (8008cc8 <USB_SetTurnaroundTime+0x124>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d306      	bcc.n	8008bfa <USB_SetTurnaroundTime+0x56>
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	4a37      	ldr	r2, [pc, #220]	; (8008ccc <USB_SetTurnaroundTime+0x128>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d202      	bcs.n	8008bfa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008bf4:	230d      	movs	r3, #13
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	e04c      	b.n	8008c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	4a33      	ldr	r2, [pc, #204]	; (8008ccc <USB_SetTurnaroundTime+0x128>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d306      	bcc.n	8008c10 <USB_SetTurnaroundTime+0x6c>
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	4a32      	ldr	r2, [pc, #200]	; (8008cd0 <USB_SetTurnaroundTime+0x12c>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d802      	bhi.n	8008c10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	617b      	str	r3, [r7, #20]
 8008c0e:	e041      	b.n	8008c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	4a2f      	ldr	r2, [pc, #188]	; (8008cd0 <USB_SetTurnaroundTime+0x12c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d906      	bls.n	8008c26 <USB_SetTurnaroundTime+0x82>
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	4a2e      	ldr	r2, [pc, #184]	; (8008cd4 <USB_SetTurnaroundTime+0x130>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d802      	bhi.n	8008c26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008c20:	230b      	movs	r3, #11
 8008c22:	617b      	str	r3, [r7, #20]
 8008c24:	e036      	b.n	8008c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	4a2a      	ldr	r2, [pc, #168]	; (8008cd4 <USB_SetTurnaroundTime+0x130>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d906      	bls.n	8008c3c <USB_SetTurnaroundTime+0x98>
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	4a29      	ldr	r2, [pc, #164]	; (8008cd8 <USB_SetTurnaroundTime+0x134>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d802      	bhi.n	8008c3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008c36:	230a      	movs	r3, #10
 8008c38:	617b      	str	r3, [r7, #20]
 8008c3a:	e02b      	b.n	8008c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	4a26      	ldr	r2, [pc, #152]	; (8008cd8 <USB_SetTurnaroundTime+0x134>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d906      	bls.n	8008c52 <USB_SetTurnaroundTime+0xae>
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	4a25      	ldr	r2, [pc, #148]	; (8008cdc <USB_SetTurnaroundTime+0x138>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d202      	bcs.n	8008c52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008c4c:	2309      	movs	r3, #9
 8008c4e:	617b      	str	r3, [r7, #20]
 8008c50:	e020      	b.n	8008c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	4a21      	ldr	r2, [pc, #132]	; (8008cdc <USB_SetTurnaroundTime+0x138>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d306      	bcc.n	8008c68 <USB_SetTurnaroundTime+0xc4>
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	4a20      	ldr	r2, [pc, #128]	; (8008ce0 <USB_SetTurnaroundTime+0x13c>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d802      	bhi.n	8008c68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c62:	2308      	movs	r3, #8
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	e015      	b.n	8008c94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	4a1d      	ldr	r2, [pc, #116]	; (8008ce0 <USB_SetTurnaroundTime+0x13c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d906      	bls.n	8008c7e <USB_SetTurnaroundTime+0xda>
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	4a1c      	ldr	r2, [pc, #112]	; (8008ce4 <USB_SetTurnaroundTime+0x140>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d202      	bcs.n	8008c7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c78:	2307      	movs	r3, #7
 8008c7a:	617b      	str	r3, [r7, #20]
 8008c7c:	e00a      	b.n	8008c94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008c7e:	2306      	movs	r3, #6
 8008c80:	617b      	str	r3, [r7, #20]
 8008c82:	e007      	b.n	8008c94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008c84:	79fb      	ldrb	r3, [r7, #7]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008c8a:	2309      	movs	r3, #9
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	e001      	b.n	8008c94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008c90:	2309      	movs	r3, #9
 8008c92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	029b      	lsls	r3, r3, #10
 8008ca8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008cac:	431a      	orrs	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	00d8acbf 	.word	0x00d8acbf
 8008cc4:	00e4e1c0 	.word	0x00e4e1c0
 8008cc8:	00f42400 	.word	0x00f42400
 8008ccc:	01067380 	.word	0x01067380
 8008cd0:	011a499f 	.word	0x011a499f
 8008cd4:	01312cff 	.word	0x01312cff
 8008cd8:	014ca43f 	.word	0x014ca43f
 8008cdc:	016e3600 	.word	0x016e3600
 8008ce0:	01a6ab1f 	.word	0x01a6ab1f
 8008ce4:	01e84800 	.word	0x01e84800

08008ce8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	f043 0201 	orr.w	r2, r3, #1
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f023 0201 	bic.w	r2, r3, #1
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d106      	bne.n	8008d58 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60da      	str	r2, [r3, #12]
 8008d56:	e00b      	b.n	8008d70 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60da      	str	r2, [r3, #12]
 8008d6a:	e001      	b.n	8008d70 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e003      	b.n	8008d78 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008d70:	2032      	movs	r0, #50	; 0x32
 8008d72:	f7f9 f873 	bl	8001e5c <HAL_Delay>

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d80:	b084      	sub	sp, #16
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b086      	sub	sp, #24
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	613b      	str	r3, [r7, #16]
 8008d9e:	e009      	b.n	8008db4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	3340      	adds	r3, #64	; 0x40
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	2200      	movs	r2, #0
 8008dac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	3301      	adds	r3, #1
 8008db2:	613b      	str	r3, [r7, #16]
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	2b0e      	cmp	r3, #14
 8008db8:	d9f2      	bls.n	8008da0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d11c      	bne.n	8008dfa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dce:	f043 0302 	orr.w	r3, r3, #2
 8008dd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	e005      	b.n	8008e06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	2300      	movs	r3, #0
 8008e10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e18:	4619      	mov	r1, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e20:	461a      	mov	r2, r3
 8008e22:	680b      	ldr	r3, [r1, #0]
 8008e24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d10c      	bne.n	8008e46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d104      	bne.n	8008e3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e32:	2100      	movs	r1, #0
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f949 	bl	80090cc <USB_SetDevSpeed>
 8008e3a:	e008      	b.n	8008e4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e3c:	2101      	movs	r1, #1
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f944 	bl	80090cc <USB_SetDevSpeed>
 8008e44:	e003      	b.n	8008e4e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e46:	2103      	movs	r1, #3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f93f 	bl	80090cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e4e:	2110      	movs	r1, #16
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f8f3 	bl	800903c <USB_FlushTxFifo>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f911 	bl	8009088 <USB_FlushRxFifo>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e76:	461a      	mov	r2, r3
 8008e78:	2300      	movs	r3, #0
 8008e7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e82:	461a      	mov	r2, r3
 8008e84:	2300      	movs	r3, #0
 8008e86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8e:	461a      	mov	r2, r3
 8008e90:	2300      	movs	r3, #0
 8008e92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e94:	2300      	movs	r3, #0
 8008e96:	613b      	str	r3, [r7, #16]
 8008e98:	e043      	b.n	8008f22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eb0:	d118      	bne.n	8008ee4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	e013      	b.n	8008ef6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eda:	461a      	mov	r2, r3
 8008edc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	e008      	b.n	8008ef6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f02:	461a      	mov	r2, r3
 8008f04:	2300      	movs	r3, #0
 8008f06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f14:	461a      	mov	r2, r3
 8008f16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	613b      	str	r3, [r7, #16]
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d3b7      	bcc.n	8008e9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	613b      	str	r3, [r7, #16]
 8008f2e:	e043      	b.n	8008fb8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f46:	d118      	bne.n	8008f7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10a      	bne.n	8008f64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	015a      	lsls	r2, r3, #5
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	4413      	add	r3, r2
 8008f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	e013      	b.n	8008f8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f70:	461a      	mov	r2, r3
 8008f72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f76:	6013      	str	r3, [r2, #0]
 8008f78:	e008      	b.n	8008f8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f86:	461a      	mov	r2, r3
 8008f88:	2300      	movs	r3, #0
 8008f8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	015a      	lsls	r2, r3, #5
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f98:	461a      	mov	r2, r3
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008faa:	461a      	mov	r2, r3
 8008fac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	613b      	str	r3, [r7, #16]
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d3b7      	bcc.n	8008f30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008fe0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d105      	bne.n	8008ff4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	f043 0210 	orr.w	r2, r3, #16
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	699a      	ldr	r2, [r3, #24]
 8008ff8:	4b0e      	ldr	r3, [pc, #56]	; (8009034 <USB_DevInit+0x2b4>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d005      	beq.n	8009012 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	f043 0208 	orr.w	r2, r3, #8
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009014:	2b01      	cmp	r3, #1
 8009016:	d105      	bne.n	8009024 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	699a      	ldr	r2, [r3, #24]
 800901c:	4b06      	ldr	r3, [pc, #24]	; (8009038 <USB_DevInit+0x2b8>)
 800901e:	4313      	orrs	r3, r2
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009024:	7dfb      	ldrb	r3, [r7, #23]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009030:	b004      	add	sp, #16
 8009032:	4770      	bx	lr
 8009034:	803c3800 	.word	0x803c3800
 8009038:	40000004 	.word	0x40000004

0800903c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	019b      	lsls	r3, r3, #6
 800904e:	f043 0220 	orr.w	r2, r3, #32
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3301      	adds	r3, #1
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4a09      	ldr	r2, [pc, #36]	; (8009084 <USB_FlushTxFifo+0x48>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d901      	bls.n	8009068 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e006      	b.n	8009076 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	f003 0320 	and.w	r3, r3, #32
 8009070:	2b20      	cmp	r3, #32
 8009072:	d0f0      	beq.n	8009056 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	00030d40 	.word	0x00030d40

08009088 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2210      	movs	r2, #16
 8009098:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3301      	adds	r3, #1
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <USB_FlushRxFifo+0x40>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d901      	bls.n	80090ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e006      	b.n	80090ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	2b10      	cmp	r3, #16
 80090b6:	d0f0      	beq.n	800909a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	00030d40 	.word	0x00030d40

080090cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	68f9      	ldr	r1, [r7, #12]
 80090e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090ec:	4313      	orrs	r3, r2
 80090ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090fe:	b480      	push	{r7}
 8009100:	b087      	sub	sp, #28
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f003 0306 	and.w	r3, r3, #6
 8009116:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d102      	bne.n	8009124 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800911e:	2300      	movs	r3, #0
 8009120:	75fb      	strb	r3, [r7, #23]
 8009122:	e00a      	b.n	800913a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b02      	cmp	r3, #2
 8009128:	d002      	beq.n	8009130 <USB_GetDevSpeed+0x32>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2b06      	cmp	r3, #6
 800912e:	d102      	bne.n	8009136 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009130:	2302      	movs	r3, #2
 8009132:	75fb      	strb	r3, [r7, #23]
 8009134:	e001      	b.n	800913a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009136:	230f      	movs	r3, #15
 8009138:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800913a:	7dfb      	ldrb	r3, [r7, #23]
}
 800913c:	4618      	mov	r0, r3
 800913e:	371c      	adds	r7, #28
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d139      	bne.n	80091d8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800916a:	69da      	ldr	r2, [r3, #28]
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	f003 030f 	and.w	r3, r3, #15
 8009174:	2101      	movs	r1, #1
 8009176:	fa01 f303 	lsl.w	r3, r1, r3
 800917a:	b29b      	uxth	r3, r3
 800917c:	68f9      	ldr	r1, [r7, #12]
 800917e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009182:	4313      	orrs	r3, r2
 8009184:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d153      	bne.n	8009244 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	78db      	ldrb	r3, [r3, #3]
 80091b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	059b      	lsls	r3, r3, #22
 80091be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091c0:	431a      	orrs	r2, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	0159      	lsls	r1, r3, #5
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	440b      	add	r3, r1
 80091ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ce:	4619      	mov	r1, r3
 80091d0:	4b20      	ldr	r3, [pc, #128]	; (8009254 <USB_ActivateEndpoint+0x10c>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	600b      	str	r3, [r1, #0]
 80091d6:	e035      	b.n	8009244 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091de:	69da      	ldr	r2, [r3, #28]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	f003 030f 	and.w	r3, r3, #15
 80091e8:	2101      	movs	r1, #1
 80091ea:	fa01 f303 	lsl.w	r3, r1, r3
 80091ee:	041b      	lsls	r3, r3, #16
 80091f0:	68f9      	ldr	r1, [r7, #12]
 80091f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091f6:	4313      	orrs	r3, r2
 80091f8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d119      	bne.n	8009244 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	78db      	ldrb	r3, [r3, #3]
 800922a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800922c:	430b      	orrs	r3, r1
 800922e:	431a      	orrs	r2, r3
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	0159      	lsls	r1, r3, #5
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	440b      	add	r3, r1
 8009238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923c:	4619      	mov	r1, r3
 800923e:	4b05      	ldr	r3, [pc, #20]	; (8009254 <USB_ActivateEndpoint+0x10c>)
 8009240:	4313      	orrs	r3, r2
 8009242:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	10008000 	.word	0x10008000

08009258 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	785b      	ldrb	r3, [r3, #1]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d161      	bne.n	8009338 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800928a:	d11f      	bne.n	80092cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	0151      	lsls	r1, r2, #5
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	440a      	add	r2, r1
 80092a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	0151      	lsls	r1, r2, #5
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	440a      	add	r2, r1
 80092c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	f003 030f 	and.w	r3, r3, #15
 80092dc:	2101      	movs	r1, #1
 80092de:	fa01 f303 	lsl.w	r3, r1, r3
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	43db      	mvns	r3, r3
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092ec:	4013      	ands	r3, r2
 80092ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f6:	69da      	ldr	r2, [r3, #28]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	f003 030f 	and.w	r3, r3, #15
 8009300:	2101      	movs	r1, #1
 8009302:	fa01 f303 	lsl.w	r3, r1, r3
 8009306:	b29b      	uxth	r3, r3
 8009308:	43db      	mvns	r3, r3
 800930a:	68f9      	ldr	r1, [r7, #12]
 800930c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009310:	4013      	ands	r3, r2
 8009312:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	015a      	lsls	r2, r3, #5
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4413      	add	r3, r2
 800931c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	0159      	lsls	r1, r3, #5
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	440b      	add	r3, r1
 800932a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800932e:	4619      	mov	r1, r3
 8009330:	4b35      	ldr	r3, [pc, #212]	; (8009408 <USB_DeactivateEndpoint+0x1b0>)
 8009332:	4013      	ands	r3, r2
 8009334:	600b      	str	r3, [r1, #0]
 8009336:	e060      	b.n	80093fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4413      	add	r3, r2
 8009340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800934a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800934e:	d11f      	bne.n	8009390 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	0151      	lsls	r1, r2, #5
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	440a      	add	r2, r1
 8009366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800936a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800936e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	440a      	add	r2, r1
 8009386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800938a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800938e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	f003 030f 	and.w	r3, r3, #15
 80093a0:	2101      	movs	r1, #1
 80093a2:	fa01 f303 	lsl.w	r3, r1, r3
 80093a6:	041b      	lsls	r3, r3, #16
 80093a8:	43db      	mvns	r3, r3
 80093aa:	68f9      	ldr	r1, [r7, #12]
 80093ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093b0:	4013      	ands	r3, r2
 80093b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ba:	69da      	ldr	r2, [r3, #28]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	f003 030f 	and.w	r3, r3, #15
 80093c4:	2101      	movs	r1, #1
 80093c6:	fa01 f303 	lsl.w	r3, r1, r3
 80093ca:	041b      	lsls	r3, r3, #16
 80093cc:	43db      	mvns	r3, r3
 80093ce:	68f9      	ldr	r1, [r7, #12]
 80093d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093d4:	4013      	ands	r3, r2
 80093d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	015a      	lsls	r2, r3, #5
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	4413      	add	r3, r2
 80093e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	0159      	lsls	r1, r3, #5
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	440b      	add	r3, r1
 80093ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f2:	4619      	mov	r1, r3
 80093f4:	4b05      	ldr	r3, [pc, #20]	; (800940c <USB_DeactivateEndpoint+0x1b4>)
 80093f6:	4013      	ands	r3, r2
 80093f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	ec337800 	.word	0xec337800
 800940c:	eff37800 	.word	0xeff37800

08009410 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b08a      	sub	sp, #40	; 0x28
 8009414:	af02      	add	r7, sp, #8
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	4613      	mov	r3, r2
 800941c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	2b01      	cmp	r3, #1
 800942e:	f040 8163 	bne.w	80096f8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d132      	bne.n	80094a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009446:	691a      	ldr	r2, [r3, #16]
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	0159      	lsls	r1, r3, #5
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	440b      	add	r3, r1
 8009450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009454:	4619      	mov	r1, r3
 8009456:	4ba5      	ldr	r3, [pc, #660]	; (80096ec <USB_EPStartXfer+0x2dc>)
 8009458:	4013      	ands	r3, r2
 800945a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	69ba      	ldr	r2, [r7, #24]
 800946c:	0151      	lsls	r1, r2, #5
 800946e:	69fa      	ldr	r2, [r7, #28]
 8009470:	440a      	add	r2, r1
 8009472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800947a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	4413      	add	r3, r2
 8009484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009488:	691a      	ldr	r2, [r3, #16]
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	0159      	lsls	r1, r3, #5
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	440b      	add	r3, r1
 8009492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009496:	4619      	mov	r1, r3
 8009498:	4b95      	ldr	r3, [pc, #596]	; (80096f0 <USB_EPStartXfer+0x2e0>)
 800949a:	4013      	ands	r3, r2
 800949c:	610b      	str	r3, [r1, #16]
 800949e:	e074      	b.n	800958a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	015a      	lsls	r2, r3, #5
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	4413      	add	r3, r2
 80094a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ac:	691a      	ldr	r2, [r3, #16]
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	0159      	lsls	r1, r3, #5
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	440b      	add	r3, r1
 80094b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ba:	4619      	mov	r1, r3
 80094bc:	4b8c      	ldr	r3, [pc, #560]	; (80096f0 <USB_EPStartXfer+0x2e0>)
 80094be:	4013      	ands	r3, r2
 80094c0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ce:	691a      	ldr	r2, [r3, #16]
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	0159      	lsls	r1, r3, #5
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	440b      	add	r3, r1
 80094d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094dc:	4619      	mov	r1, r3
 80094de:	4b83      	ldr	r3, [pc, #524]	; (80096ec <USB_EPStartXfer+0x2dc>)
 80094e0:	4013      	ands	r3, r2
 80094e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	015a      	lsls	r2, r3, #5
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	4413      	add	r3, r2
 80094ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f0:	691a      	ldr	r2, [r3, #16]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6959      	ldr	r1, [r3, #20]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	440b      	add	r3, r1
 80094fc:	1e59      	subs	r1, r3, #1
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	fbb1 f3f3 	udiv	r3, r1, r3
 8009506:	04d9      	lsls	r1, r3, #19
 8009508:	4b7a      	ldr	r3, [pc, #488]	; (80096f4 <USB_EPStartXfer+0x2e4>)
 800950a:	400b      	ands	r3, r1
 800950c:	69b9      	ldr	r1, [r7, #24]
 800950e:	0148      	lsls	r0, r1, #5
 8009510:	69f9      	ldr	r1, [r7, #28]
 8009512:	4401      	add	r1, r0
 8009514:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009518:	4313      	orrs	r3, r2
 800951a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009528:	691a      	ldr	r2, [r3, #16]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009532:	69b9      	ldr	r1, [r7, #24]
 8009534:	0148      	lsls	r0, r1, #5
 8009536:	69f9      	ldr	r1, [r7, #28]
 8009538:	4401      	add	r1, r0
 800953a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800953e:	4313      	orrs	r3, r2
 8009540:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	78db      	ldrb	r3, [r3, #3]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d11f      	bne.n	800958a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	015a      	lsls	r2, r3, #5
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	4413      	add	r3, r2
 8009552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	69ba      	ldr	r2, [r7, #24]
 800955a:	0151      	lsls	r1, r2, #5
 800955c:	69fa      	ldr	r2, [r7, #28]
 800955e:	440a      	add	r2, r1
 8009560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009564:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009568:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	4413      	add	r3, r2
 8009572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	69fa      	ldr	r2, [r7, #28]
 800957e:	440a      	add	r2, r1
 8009580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009584:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009588:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d14b      	bne.n	8009628 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d009      	beq.n	80095ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a4:	461a      	mov	r2, r3
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	78db      	ldrb	r3, [r3, #3]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d128      	bne.n	8009606 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d110      	bne.n	80095e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	69ba      	ldr	r2, [r7, #24]
 80095d4:	0151      	lsls	r1, r2, #5
 80095d6:	69fa      	ldr	r2, [r7, #28]
 80095d8:	440a      	add	r2, r1
 80095da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095e2:	6013      	str	r3, [r2, #0]
 80095e4:	e00f      	b.n	8009606 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	69ba      	ldr	r2, [r7, #24]
 80095f6:	0151      	lsls	r1, r2, #5
 80095f8:	69fa      	ldr	r2, [r7, #28]
 80095fa:	440a      	add	r2, r1
 80095fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009604:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	4413      	add	r3, r2
 800960e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	69ba      	ldr	r2, [r7, #24]
 8009616:	0151      	lsls	r1, r2, #5
 8009618:	69fa      	ldr	r2, [r7, #28]
 800961a:	440a      	add	r2, r1
 800961c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009620:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	e133      	b.n	8009890 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	0151      	lsls	r1, r2, #5
 800963a:	69fa      	ldr	r2, [r7, #28]
 800963c:	440a      	add	r2, r1
 800963e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009642:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009646:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	78db      	ldrb	r3, [r3, #3]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d015      	beq.n	800967c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 811b 	beq.w	8009890 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	f003 030f 	and.w	r3, r3, #15
 800966a:	2101      	movs	r1, #1
 800966c:	fa01 f303 	lsl.w	r3, r1, r3
 8009670:	69f9      	ldr	r1, [r7, #28]
 8009672:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009676:	4313      	orrs	r3, r2
 8009678:	634b      	str	r3, [r1, #52]	; 0x34
 800967a:	e109      	b.n	8009890 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009688:	2b00      	cmp	r3, #0
 800968a:	d110      	bne.n	80096ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	69ba      	ldr	r2, [r7, #24]
 800969c:	0151      	lsls	r1, r2, #5
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	440a      	add	r2, r1
 80096a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	e00f      	b.n	80096ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	015a      	lsls	r2, r3, #5
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	0151      	lsls	r1, r2, #5
 80096c0:	69fa      	ldr	r2, [r7, #28]
 80096c2:	440a      	add	r2, r1
 80096c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	68d9      	ldr	r1, [r3, #12]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	781a      	ldrb	r2, [r3, #0]
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	b298      	uxth	r0, r3
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	4603      	mov	r3, r0
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 fa38 	bl	8009b58 <USB_WritePacket>
 80096e8:	e0d2      	b.n	8009890 <USB_EPStartXfer+0x480>
 80096ea:	bf00      	nop
 80096ec:	e007ffff 	.word	0xe007ffff
 80096f0:	fff80000 	.word	0xfff80000
 80096f4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009704:	691a      	ldr	r2, [r3, #16]
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	0159      	lsls	r1, r3, #5
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	440b      	add	r3, r1
 800970e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009712:	4619      	mov	r1, r3
 8009714:	4b61      	ldr	r3, [pc, #388]	; (800989c <USB_EPStartXfer+0x48c>)
 8009716:	4013      	ands	r3, r2
 8009718:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	4413      	add	r3, r2
 8009722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	0159      	lsls	r1, r3, #5
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	440b      	add	r3, r1
 8009730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009734:	4619      	mov	r1, r3
 8009736:	4b5a      	ldr	r3, [pc, #360]	; (80098a0 <USB_EPStartXfer+0x490>)
 8009738:	4013      	ands	r3, r2
 800973a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d123      	bne.n	800978c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009750:	691a      	ldr	r2, [r3, #16]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800975a:	69b9      	ldr	r1, [r7, #24]
 800975c:	0148      	lsls	r0, r1, #5
 800975e:	69f9      	ldr	r1, [r7, #28]
 8009760:	4401      	add	r1, r0
 8009762:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009766:	4313      	orrs	r3, r2
 8009768:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	0151      	lsls	r1, r2, #5
 800977c:	69fa      	ldr	r2, [r7, #28]
 800977e:	440a      	add	r2, r1
 8009780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009788:	6113      	str	r3, [r2, #16]
 800978a:	e033      	b.n	80097f4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	695a      	ldr	r2, [r3, #20]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	4413      	add	r3, r2
 8009796:	1e5a      	subs	r2, r3, #1
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ae:	691a      	ldr	r2, [r3, #16]
 80097b0:	8afb      	ldrh	r3, [r7, #22]
 80097b2:	04d9      	lsls	r1, r3, #19
 80097b4:	4b3b      	ldr	r3, [pc, #236]	; (80098a4 <USB_EPStartXfer+0x494>)
 80097b6:	400b      	ands	r3, r1
 80097b8:	69b9      	ldr	r1, [r7, #24]
 80097ba:	0148      	lsls	r0, r1, #5
 80097bc:	69f9      	ldr	r1, [r7, #28]
 80097be:	4401      	add	r1, r0
 80097c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097c4:	4313      	orrs	r3, r2
 80097c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d4:	691a      	ldr	r2, [r3, #16]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	8af9      	ldrh	r1, [r7, #22]
 80097dc:	fb01 f303 	mul.w	r3, r1, r3
 80097e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097e4:	69b9      	ldr	r1, [r7, #24]
 80097e6:	0148      	lsls	r0, r1, #5
 80097e8:	69f9      	ldr	r1, [r7, #28]
 80097ea:	4401      	add	r1, r0
 80097ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097f0:	4313      	orrs	r3, r2
 80097f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d10d      	bne.n	8009816 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d009      	beq.n	8009816 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	68d9      	ldr	r1, [r3, #12]
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	4413      	add	r3, r2
 800980e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009812:	460a      	mov	r2, r1
 8009814:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	78db      	ldrb	r3, [r3, #3]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d128      	bne.n	8009870 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800982a:	2b00      	cmp	r3, #0
 800982c:	d110      	bne.n	8009850 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	0151      	lsls	r1, r2, #5
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	440a      	add	r2, r1
 8009844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009848:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800984c:	6013      	str	r3, [r2, #0]
 800984e:	e00f      	b.n	8009870 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	69ba      	ldr	r2, [r7, #24]
 8009860:	0151      	lsls	r1, r2, #5
 8009862:	69fa      	ldr	r2, [r7, #28]
 8009864:	440a      	add	r2, r1
 8009866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800986a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800986e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	69ba      	ldr	r2, [r7, #24]
 8009880:	0151      	lsls	r1, r2, #5
 8009882:	69fa      	ldr	r2, [r7, #28]
 8009884:	440a      	add	r2, r1
 8009886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800988a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800988e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3720      	adds	r7, #32
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	fff80000 	.word	0xfff80000
 80098a0:	e007ffff 	.word	0xe007ffff
 80098a4:	1ff80000 	.word	0x1ff80000

080098a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	4613      	mov	r3, r2
 80098b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	785b      	ldrb	r3, [r3, #1]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	f040 80cd 	bne.w	8009a64 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d132      	bne.n	8009938 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	015a      	lsls	r2, r3, #5
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	4413      	add	r3, r2
 80098da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098de:	691a      	ldr	r2, [r3, #16]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	0159      	lsls	r1, r3, #5
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	440b      	add	r3, r1
 80098e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ec:	4619      	mov	r1, r3
 80098ee:	4b98      	ldr	r3, [pc, #608]	; (8009b50 <USB_EP0StartXfer+0x2a8>)
 80098f0:	4013      	ands	r3, r2
 80098f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	0151      	lsls	r1, r2, #5
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	440a      	add	r2, r1
 800990a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800990e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009912:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	015a      	lsls	r2, r3, #5
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	4413      	add	r3, r2
 800991c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009920:	691a      	ldr	r2, [r3, #16]
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	0159      	lsls	r1, r3, #5
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	440b      	add	r3, r1
 800992a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992e:	4619      	mov	r1, r3
 8009930:	4b88      	ldr	r3, [pc, #544]	; (8009b54 <USB_EP0StartXfer+0x2ac>)
 8009932:	4013      	ands	r3, r2
 8009934:	610b      	str	r3, [r1, #16]
 8009936:	e04e      	b.n	80099d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009944:	691a      	ldr	r2, [r3, #16]
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	0159      	lsls	r1, r3, #5
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	440b      	add	r3, r1
 800994e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009952:	4619      	mov	r1, r3
 8009954:	4b7f      	ldr	r3, [pc, #508]	; (8009b54 <USB_EP0StartXfer+0x2ac>)
 8009956:	4013      	ands	r3, r2
 8009958:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	4413      	add	r3, r2
 8009962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009966:	691a      	ldr	r2, [r3, #16]
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	0159      	lsls	r1, r3, #5
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	440b      	add	r3, r1
 8009970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009974:	4619      	mov	r1, r3
 8009976:	4b76      	ldr	r3, [pc, #472]	; (8009b50 <USB_EP0StartXfer+0x2a8>)
 8009978:	4013      	ands	r3, r2
 800997a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	695a      	ldr	r2, [r3, #20]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	429a      	cmp	r2, r3
 8009986:	d903      	bls.n	8009990 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	0151      	lsls	r1, r2, #5
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	440a      	add	r2, r1
 80099a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	015a      	lsls	r2, r3, #5
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099bc:	691a      	ldr	r2, [r3, #16]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099c6:	6939      	ldr	r1, [r7, #16]
 80099c8:	0148      	lsls	r0, r1, #5
 80099ca:	6979      	ldr	r1, [r7, #20]
 80099cc:	4401      	add	r1, r0
 80099ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80099d2:	4313      	orrs	r3, r2
 80099d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d11e      	bne.n	8009a1a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d009      	beq.n	80099f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f0:	461a      	mov	r2, r3
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	0151      	lsls	r1, r2, #5
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	440a      	add	r2, r1
 8009a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a16:	6013      	str	r3, [r2, #0]
 8009a18:	e092      	b.n	8009b40 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	0151      	lsls	r1, r2, #5
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	440a      	add	r2, r1
 8009a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a38:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d07e      	beq.n	8009b40 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	f003 030f 	and.w	r3, r3, #15
 8009a52:	2101      	movs	r1, #1
 8009a54:	fa01 f303 	lsl.w	r3, r1, r3
 8009a58:	6979      	ldr	r1, [r7, #20]
 8009a5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	634b      	str	r3, [r1, #52]	; 0x34
 8009a62:	e06d      	b.n	8009b40 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a70:	691a      	ldr	r2, [r3, #16]
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	0159      	lsls	r1, r3, #5
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	440b      	add	r3, r1
 8009a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4b34      	ldr	r3, [pc, #208]	; (8009b54 <USB_EP0StartXfer+0x2ac>)
 8009a82:	4013      	ands	r3, r2
 8009a84:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a92:	691a      	ldr	r2, [r3, #16]
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	0159      	lsls	r1, r3, #5
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	440b      	add	r3, r1
 8009a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4b2b      	ldr	r3, [pc, #172]	; (8009b50 <USB_EP0StartXfer+0x2a8>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	689a      	ldr	r2, [r3, #8]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	015a      	lsls	r2, r3, #5
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	0151      	lsls	r1, r2, #5
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	440a      	add	r2, r1
 8009ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ad2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ad6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	015a      	lsls	r2, r3, #5
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae4:	691a      	ldr	r2, [r3, #16]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aee:	6939      	ldr	r1, [r7, #16]
 8009af0:	0148      	lsls	r0, r1, #5
 8009af2:	6979      	ldr	r1, [r7, #20]
 8009af4:	4401      	add	r1, r0
 8009af6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009afa:	4313      	orrs	r3, r2
 8009afc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009afe:	79fb      	ldrb	r3, [r7, #7]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d10d      	bne.n	8009b20 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d009      	beq.n	8009b20 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	68d9      	ldr	r1, [r3, #12]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	015a      	lsls	r2, r3, #5
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	4413      	add	r3, r2
 8009b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1c:	460a      	mov	r2, r1
 8009b1e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	0151      	lsls	r1, r2, #5
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	440a      	add	r2, r1
 8009b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	371c      	adds	r7, #28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	e007ffff 	.word	0xe007ffff
 8009b54:	fff80000 	.word	0xfff80000

08009b58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b089      	sub	sp, #36	; 0x24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	4611      	mov	r1, r2
 8009b64:	461a      	mov	r2, r3
 8009b66:	460b      	mov	r3, r1
 8009b68:	71fb      	strb	r3, [r7, #7]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009b76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d123      	bne.n	8009bc6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b7e:	88bb      	ldrh	r3, [r7, #4]
 8009b80:	3303      	adds	r3, #3
 8009b82:	089b      	lsrs	r3, r3, #2
 8009b84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b86:	2300      	movs	r3, #0
 8009b88:	61bb      	str	r3, [r7, #24]
 8009b8a:	e018      	b.n	8009bbe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	031a      	lsls	r2, r3, #12
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b98:	461a      	mov	r2, r3
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	61bb      	str	r3, [r7, #24]
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d3e2      	bcc.n	8009b8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3724      	adds	r7, #36	; 0x24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b08b      	sub	sp, #44	; 0x2c
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	4613      	mov	r3, r2
 8009be0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009bea:	88fb      	ldrh	r3, [r7, #6]
 8009bec:	089b      	lsrs	r3, r3, #2
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009bf2:	88fb      	ldrh	r3, [r7, #6]
 8009bf4:	f003 0303 	and.w	r3, r3, #3
 8009bf8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	623b      	str	r3, [r7, #32]
 8009bfe:	e014      	b.n	8009c2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0e:	3301      	adds	r3, #1
 8009c10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	3301      	adds	r3, #1
 8009c16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	3301      	adds	r3, #1
 8009c22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	3301      	adds	r3, #1
 8009c28:	623b      	str	r3, [r7, #32]
 8009c2a:	6a3a      	ldr	r2, [r7, #32]
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d3e6      	bcc.n	8009c00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009c32:	8bfb      	ldrh	r3, [r7, #30]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01e      	beq.n	8009c76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c42:	461a      	mov	r2, r3
 8009c44:	f107 0310 	add.w	r3, r7, #16
 8009c48:	6812      	ldr	r2, [r2, #0]
 8009c4a:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	fa22 f303 	lsr.w	r3, r2, r3
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	701a      	strb	r2, [r3, #0]
      i++;
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	3301      	adds	r3, #1
 8009c62:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	3301      	adds	r3, #1
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009c6a:	8bfb      	ldrh	r3, [r7, #30]
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c70:	8bfb      	ldrh	r3, [r7, #30]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1ea      	bne.n	8009c4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	372c      	adds	r7, #44	; 0x2c
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	785b      	ldrb	r3, [r3, #1]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d12c      	bne.n	8009cfa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	db12      	blt.n	8009cd8 <USB_EPSetStall+0x54>
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00f      	beq.n	8009cd8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	0151      	lsls	r1, r2, #5
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	440a      	add	r2, r1
 8009cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009cd6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	0151      	lsls	r1, r2, #5
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	440a      	add	r2, r1
 8009cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	e02b      	b.n	8009d52 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	db12      	blt.n	8009d32 <USB_EPSetStall+0xae>
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00f      	beq.n	8009d32 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	0151      	lsls	r1, r2, #5
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	440a      	add	r2, r1
 8009d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009d30:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	015a      	lsls	r2, r3, #5
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	0151      	lsls	r1, r2, #5
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	440a      	add	r2, r1
 8009d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	785b      	ldrb	r3, [r3, #1]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d128      	bne.n	8009dce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	0151      	lsls	r1, r2, #5
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	440a      	add	r2, r1
 8009d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	78db      	ldrb	r3, [r3, #3]
 8009da0:	2b03      	cmp	r3, #3
 8009da2:	d003      	beq.n	8009dac <USB_EPClearStall+0x4c>
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	78db      	ldrb	r3, [r3, #3]
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d138      	bne.n	8009e1e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	0151      	lsls	r1, r2, #5
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	440a      	add	r2, r1
 8009dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dca:	6013      	str	r3, [r2, #0]
 8009dcc:	e027      	b.n	8009e1e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	0151      	lsls	r1, r2, #5
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	440a      	add	r2, r1
 8009de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009de8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009dec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	78db      	ldrb	r3, [r3, #3]
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d003      	beq.n	8009dfe <USB_EPClearStall+0x9e>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	78db      	ldrb	r3, [r3, #3]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d10f      	bne.n	8009e1e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	015a      	lsls	r2, r3, #5
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4413      	add	r3, r2
 8009e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	0151      	lsls	r1, r2, #5
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	440a      	add	r2, r1
 8009e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e1c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009e4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	78fb      	ldrb	r3, [r7, #3]
 8009e5a:	011b      	lsls	r3, r3, #4
 8009e5c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009e60:	68f9      	ldr	r1, [r7, #12]
 8009e62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e66:	4313      	orrs	r3, r2
 8009e68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e92:	f023 0303 	bic.w	r3, r3, #3
 8009e96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ea6:	f023 0302 	bic.w	r3, r3, #2
 8009eaa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b085      	sub	sp, #20
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009ed4:	f023 0303 	bic.w	r3, r3, #3
 8009ed8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ee8:	f043 0302 	orr.w	r3, r3, #2
 8009eec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	695b      	ldr	r3, [r3, #20]
 8009f08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	4013      	ands	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009f14:	68fb      	ldr	r3, [r7, #12]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f22:	b480      	push	{r7}
 8009f24:	b085      	sub	sp, #20
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f3e:	69db      	ldr	r3, [r3, #28]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	4013      	ands	r3, r2
 8009f44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	0c1b      	lsrs	r3, r3, #16
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b085      	sub	sp, #20
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f68:	699b      	ldr	r3, [r3, #24]
 8009f6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f72:	69db      	ldr	r3, [r3, #28]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	4013      	ands	r3, r2
 8009f78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	b29b      	uxth	r3, r3
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f9a:	78fb      	ldrb	r3, [r7, #3]
 8009f9c:	015a      	lsls	r2, r3, #5
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fb8:	68bb      	ldr	r3, [r7, #8]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b087      	sub	sp, #28
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	460b      	mov	r3, r1
 8009fd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	f003 030f 	and.w	r3, r3, #15
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff6:	01db      	lsls	r3, r3, #7
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	015a      	lsls	r2, r3, #5
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	4413      	add	r3, r2
 800a008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	693a      	ldr	r2, [r7, #16]
 800a010:	4013      	ands	r3, r2
 800a012:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a014:	68bb      	ldr	r3, [r7, #8]
}
 800a016:	4618      	mov	r0, r3
 800a018:	371c      	adds	r7, #28
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a022:	b480      	push	{r7}
 800a024:	b083      	sub	sp, #12
 800a026:	af00      	add	r7, sp, #0
 800a028:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	f003 0301 	and.w	r3, r3, #1
}
 800a032:	4618      	mov	r0, r3
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
	...

0800a040 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a05a:	4619      	mov	r1, r3
 800a05c:	4b09      	ldr	r3, [pc, #36]	; (800a084 <USB_ActivateSetup+0x44>)
 800a05e:	4013      	ands	r3, r2
 800a060:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a074:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	fffff800 	.word	0xfffff800

0800a088 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a088:	b480      	push	{r7}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	460b      	mov	r3, r1
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	333c      	adds	r3, #60	; 0x3c
 800a09e:	3304      	adds	r3, #4
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	4a26      	ldr	r2, [pc, #152]	; (800a140 <USB_EP0_OutStart+0xb8>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d90a      	bls.n	800a0c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0bc:	d101      	bne.n	800a0c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	e037      	b.n	800a132 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0f0:	f043 0318 	orr.w	r3, r3, #24
 800a0f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a104:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a108:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a10a:	7afb      	ldrb	r3, [r7, #11]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d10f      	bne.n	800a130 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a116:	461a      	mov	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a12a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a12e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	371c      	adds	r7, #28
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	4f54300a 	.word	0x4f54300a

0800a144 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a14c:	2300      	movs	r3, #0
 800a14e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	3301      	adds	r3, #1
 800a154:	60fb      	str	r3, [r7, #12]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	4a13      	ldr	r2, [pc, #76]	; (800a1a8 <USB_CoreReset+0x64>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d901      	bls.n	800a162 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e01b      	b.n	800a19a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	daf2      	bge.n	800a150 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a16a:	2300      	movs	r3, #0
 800a16c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	f043 0201 	orr.w	r2, r3, #1
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3301      	adds	r3, #1
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4a09      	ldr	r2, [pc, #36]	; (800a1a8 <USB_CoreReset+0x64>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d901      	bls.n	800a18c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e006      	b.n	800a19a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	691b      	ldr	r3, [r3, #16]
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	2b01      	cmp	r3, #1
 800a196:	d0f0      	beq.n	800a17a <USB_CoreReset+0x36>

  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	00030d40 	.word	0x00030d40

0800a1ac <USBD_AUDIO_Init>:
  * @param  cfgidx: Configuration index , not used
  * @retval status
  */
static uint8_t  USBD_AUDIO_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	70fb      	strb	r3, [r7, #3]
  /* Allocate Audio structure */
  USBD_AUDIO_HandleTypeDef   *haudio;
  USBD_AUDIO_InterfaceCallbacksfTypeDef * aud_if_cbks;
  
  haudio = USBD_malloc(sizeof (USBD_AUDIO_HandleTypeDef));
 800a1b8:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800a1bc:	f003 fc40 	bl	800da40 <USBD_static_malloc>
 800a1c0:	60f8      	str	r0, [r7, #12]
  if(haudio == NULL)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d101      	bne.n	800a1cc <USBD_AUDIO_Init+0x20>
  {
    return USBD_FAIL; 
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e024      	b.n	800a216 <USBD_AUDIO_Init+0x6a>
  }
  else
  {
    memset(haudio, 0, sizeof(USBD_AUDIO_HandleTypeDef));
 800a1cc:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f003 fcc0 	bl	800db58 <memset>
    aud_if_cbks = (USBD_AUDIO_InterfaceCallbacksfTypeDef *)pdev->pUserData;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1de:	60bb      	str	r3, [r7, #8]
    /* Initialize the Audio output Hardware layer */
    if (aud_if_cbks->Init(&haudio->aud_function,aud_if_cbks->private_data)!= USBD_OK)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68f8      	ldr	r0, [r7, #12]
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	6912      	ldr	r2, [r2, #16]
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	4798      	blx	r3
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00b      	beq.n	800a20c <USBD_AUDIO_Init+0x60>
    {
      USBD_free(pdev->pClassData);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f003 fc2e 	bl	800da5c <USBD_static_free>
      pdev->pClassData = 0;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
      return USBD_FAIL;
 800a208:	2303      	movs	r3, #3
 800a20a:	e004      	b.n	800a216 <USBD_AUDIO_Init+0x6a>
    }
  }
  pdev->pClassData = haudio;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  return USBD_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBD_AUDIO_DeInit>:
  * @param  cfgidx: Configuration index, not used 
  * @retval status
  */
static uint8_t  USBD_AUDIO_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b086      	sub	sp, #24
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	460b      	mov	r3, r1
 800a228:	70fb      	strb	r3, [r7, #3]
    USBD_AUDIO_HandleTypeDef   *haudio;
    USBD_AUDIO_InterfaceCallbacksfTypeDef * aud_if_cbks;
    
    haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a230:	60fb      	str	r3, [r7, #12]
    aud_if_cbks =  (USBD_AUDIO_InterfaceCallbacksfTypeDef *)pdev->pUserData;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a238:	60bb      	str	r3, [r7, #8]
    
    /* Close open EP */
    for(int i=1;i < USBD_AUDIO_MAX_IN_EP; i++)
 800a23a:	2301      	movs	r3, #1
 800a23c:	617b      	str	r3, [r7, #20]
 800a23e:	e021      	b.n	800a284 <USBD_AUDIO_DeInit+0x66>
    {
      if(haudio->ep_in[i].open)
 800a240:	68f9      	ldr	r1, [r7, #12]
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	4613      	mov	r3, r2
 800a246:	005b      	lsls	r3, r3, #1
 800a248:	4413      	add	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	440b      	add	r3, r1
 800a24e:	3399      	adds	r3, #153	; 0x99
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d013      	beq.n	800a27e <USBD_AUDIO_DeInit+0x60>
      {
        USBD_LL_CloseEP(pdev, i|0x80);
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	b25b      	sxtb	r3, r3
 800a25a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a25e:	b25b      	sxtb	r3, r3
 800a260:	b2db      	uxtb	r3, r3
 800a262:	4619      	mov	r1, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f003 face 	bl	800d806 <USBD_LL_CloseEP>
        haudio->ep_in[i].open = 0;
 800a26a:	68f9      	ldr	r1, [r7, #12]
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	4613      	mov	r3, r2
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	4413      	add	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	440b      	add	r3, r1
 800a278:	3399      	adds	r3, #153	; 0x99
 800a27a:	2200      	movs	r2, #0
 800a27c:	701a      	strb	r2, [r3, #0]
    for(int i=1;i < USBD_AUDIO_MAX_IN_EP; i++)
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	3301      	adds	r3, #1
 800a282:	617b      	str	r3, [r7, #20]
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	2b04      	cmp	r3, #4
 800a288:	ddda      	ble.n	800a240 <USBD_AUDIO_DeInit+0x22>
      }
    }
    for(int i=1;i < USBD_AUDIO_MAX_OUT_EP; i++)
 800a28a:	2301      	movs	r3, #1
 800a28c:	613b      	str	r3, [r7, #16]
 800a28e:	e01d      	b.n	800a2cc <USBD_AUDIO_DeInit+0xae>
    {
      if(haudio->ep_out[i].open)
 800a290:	68f9      	ldr	r1, [r7, #12]
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	4613      	mov	r3, r2
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	4413      	add	r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	440b      	add	r3, r1
 800a29e:	33d5      	adds	r3, #213	; 0xd5
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00f      	beq.n	800a2c6 <USBD_AUDIO_DeInit+0xa8>
      {
        USBD_LL_CloseEP(pdev, i);
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f003 faaa 	bl	800d806 <USBD_LL_CloseEP>
        haudio->ep_out[i].open = 0;
 800a2b2:	68f9      	ldr	r1, [r7, #12]
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	005b      	lsls	r3, r3, #1
 800a2ba:	4413      	add	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	440b      	add	r3, r1
 800a2c0:	33d5      	adds	r3, #213	; 0xd5
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	701a      	strb	r2, [r3, #0]
    for(int i=1;i < USBD_AUDIO_MAX_OUT_EP; i++)
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	613b      	str	r3, [r7, #16]
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	ddde      	ble.n	800a290 <USBD_AUDIO_DeInit+0x72>
      }
    }
  /* DeInit  physical Interface components */
  if(haudio != NULL)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00d      	beq.n	800a2f4 <USBD_AUDIO_DeInit+0xd6>
  {
   aud_if_cbks->DeInit(&haudio->aud_function,aud_if_cbks->private_data);
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	6912      	ldr	r2, [r2, #16]
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	4798      	blx	r3
    USBD_free(haudio);
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f003 fbb8 	bl	800da5c <USBD_static_free>
    pdev->pClassData = NULL;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }
  
  return USBD_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3718      	adds	r7, #24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <USBD_AUDIO_SetInterfaceAlternate>:
  * @param  as_interface_num: audio streaming interface number
  * @param  new_alt: new alternate number
  * @retval status
  */
static uint8_t  USBD_AUDIO_SetInterfaceAlternate(USBD_HandleTypeDef *pdev,uint8_t as_interface_num,uint8_t new_alt)
{
 800a300:	b590      	push	{r4, r7, lr}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	460b      	mov	r3, r1
 800a30a:	70fb      	strb	r3, [r7, #3]
 800a30c:	4613      	mov	r3, r2
 800a30e:	70bb      	strb	r3, [r7, #2]
  USBD_AUDIO_HandleTypeDef   *haudio;
  USBD_AUDIO_AS_InterfaceTypeDef* pas_interface;
  USBD_AUDIO_EPTypeDef * ep;
  
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a316:	617b      	str	r3, [r7, #20]
  pas_interface = &haudio->aud_function.as_interfaces[as_interface_num];
 800a318:	78fa      	ldrb	r2, [r7, #3]
 800a31a:	4613      	mov	r3, r2
 800a31c:	00db      	lsls	r3, r3, #3
 800a31e:	1a9b      	subs	r3, r3, r2
 800a320:	00db      	lsls	r3, r3, #3
 800a322:	3320      	adds	r3, #32
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	4413      	add	r3, r2
 800a328:	3304      	adds	r3, #4
 800a32a:	613b      	str	r3, [r7, #16]
  ep = (pas_interface->data_ep.ep_num&0x80)?&haudio->ep_in[pas_interface->data_ep.ep_num&0x0F]:
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	791b      	ldrb	r3, [r3, #4]
 800a330:	b25b      	sxtb	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	da0c      	bge.n	800a350 <USBD_AUDIO_SetInterfaceAlternate+0x50>
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	791b      	ldrb	r3, [r3, #4]
 800a33a:	f003 020f 	and.w	r2, r3, #15
 800a33e:	4613      	mov	r3, r2
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	4413      	add	r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	3390      	adds	r3, #144	; 0x90
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	4413      	add	r3, r2
 800a34c:	3304      	adds	r3, #4
 800a34e:	e009      	b.n	800a364 <USBD_AUDIO_SetInterfaceAlternate+0x64>
                                            &haudio->ep_out[pas_interface->data_ep.ep_num];
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	791b      	ldrb	r3, [r3, #4]
 800a354:	461a      	mov	r2, r3
  ep = (pas_interface->data_ep.ep_num&0x80)?&haudio->ep_in[pas_interface->data_ep.ep_num&0x0F]:
 800a356:	4613      	mov	r3, r2
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	4413      	add	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	33d0      	adds	r3, #208	; 0xd0
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	4413      	add	r3, r2
 800a364:	60fb      	str	r3, [r7, #12]
  
  
  /* close old alternate interface */
  if(new_alt==0)
 800a366:	78bb      	ldrb	r3, [r7, #2]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d11c      	bne.n	800a3a6 <USBD_AUDIO_SetInterfaceAlternate+0xa6>
  {
    /* close all opned ep */
    if (pas_interface->alternate!=0)
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	789b      	ldrb	r3, [r3, #2]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00d      	beq.n	800a390 <USBD_AUDIO_SetInterfaceAlternate+0x90>
    {
        /* @TODO : Close related End Points */
      if(ep->open)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	795b      	ldrb	r3, [r3, #5]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d009      	beq.n	800a390 <USBD_AUDIO_SetInterfaceAlternate+0x90>
      {
        USBD_LL_CloseEP(pdev, ep->ep_description.data_ep->ep_num);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f003 fa3e 	bl	800d806 <USBD_LL_CloseEP>
        ep->open=0;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	715a      	strb	r2, [r3, #5]
            ep->open = 0;
          }
      }
#endif /*USBD_SUPPORT_AUDIO_OUT_FEEDBACK */
    }
    pas_interface->SetAS_Alternate(new_alt,pas_interface->private_data);
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a398:	78ba      	ldrb	r2, [r7, #2]
 800a39a:	4610      	mov	r0, r2
 800a39c:	4798      	blx	r3
    pas_interface->alternate=0;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	709a      	strb	r2, [r3, #2]
 800a3a4:	e062      	b.n	800a46c <USBD_AUDIO_SetInterfaceAlternate+0x16c>
  }
  /* start new  alternate interface */
  else
  {
    /* prepare EP */
    ep->ep_description.data_ep=&pas_interface->data_ep;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	1d1a      	adds	r2, r3, #4
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	601a      	str	r2, [r3, #0]
    
    /* open the data ep */
    pas_interface->SetAS_Alternate(new_alt,pas_interface->private_data);
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800a3b6:	78ba      	ldrb	r2, [r7, #2]
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4798      	blx	r3
    pas_interface->alternate=new_alt;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	78ba      	ldrb	r2, [r7, #2]
 800a3c0:	709a      	strb	r2, [r3, #2]
    ep->max_packet_length=ep->ep_description.data_ep->GetMaxPacketLength(ep->ep_description.data_ep->private_data);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	699b      	ldr	r3, [r3, #24]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	6812      	ldr	r2, [r2, #0]
 800a3cc:	6a12      	ldr	r2, [r2, #32]
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	4798      	blx	r3
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	80da      	strh	r2, [r3, #6]
    /* open data end point */
    USBD_LL_OpenEP(pdev,
                 ep->ep_description.data_ep->ep_num,
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
    USBD_LL_OpenEP(pdev,
 800a3de:	7819      	ldrb	r1, [r3, #0]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	88db      	ldrh	r3, [r3, #6]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f003 f9e7 	bl	800d7ba <USBD_LL_OpenEP>
                 USBD_EP_TYPE_ISOC,
                 ep->max_packet_length);             
     ep->open = 1;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	715a      	strb	r2, [r3, #5]
     
     /* get usb working buffer */ 
    ep->ep_description.data_ep->buf= ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	6812      	ldr	r2, [r2, #0]
 800a3fc:	6a10      	ldr	r0, [r2, #32]
                                                                           &ep->ep_description.data_ep->length);        
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	6812      	ldr	r2, [r2, #0]
    ep->ep_description.data_ep->buf= ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 800a402:	f102 010c 	add.w	r1, r2, #12
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	6814      	ldr	r4, [r2, #0]
 800a40a:	4798      	blx	r3
 800a40c:	4603      	mov	r3, r0
 800a40e:	60a3      	str	r3, [r4, #8]
    
    if(ep->ep_description.data_ep->ep_num&0x80)  /* IN EP */
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	b25b      	sxtb	r3, r3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	da1c      	bge.n	800a456 <USBD_AUDIO_SetInterfaceAlternate+0x156>
    {
      USBD_LL_FlushEP(pdev, ep->ep_description.data_ep->ep_num);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f003 fa0d 	bl	800d844 <USBD_LL_FlushEP>
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 800a42a:	4b13      	ldr	r3, [pc, #76]	; (800a478 <USBD_AUDIO_SetInterfaceAlternate+0x178>)
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	0a1b      	lsrs	r3, r3, #8
 800a430:	b29b      	uxth	r3, r3
 800a432:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a436:	b29a      	uxth	r2, r3
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	811a      	strh	r2, [r3, #8]
      USBD_LL_Transmit(pdev, 
                        ep->ep_description.data_ep->ep_num,
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
      USBD_LL_Transmit(pdev, 
 800a440:	7819      	ldrb	r1, [r3, #0]
                        ep->ep_description.data_ep->buf,
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
      USBD_LL_Transmit(pdev, 
 800a446:	689a      	ldr	r2, [r3, #8]
                        ep->ep_description.data_ep->length);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	899b      	ldrh	r3, [r3, #12]
      USBD_LL_Transmit(pdev, 
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f003 faa0 	bl	800d994 <USBD_LL_Transmit>
 800a454:	e00a      	b.n	800a46c <USBD_AUDIO_SetInterfaceAlternate+0x16c>
#if USBD_SUPPORT_AUDIO_OUT_FEEDBACK 
        uint32_t rate;
#endif /*USBD_SUPPORT_AUDIO_OUT_FEEDBACK */  
    /* Prepare Out endpoint to receive 1st packet */ 
    USBD_LL_PrepareReceive(pdev,
                           ep->ep_description.data_ep->ep_num,
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
    USBD_LL_PrepareReceive(pdev,
 800a45a:	7819      	ldrb	r1, [r3, #0]
                           ep->ep_description.data_ep->buf,                        
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
    USBD_LL_PrepareReceive(pdev,
 800a460:	689a      	ldr	r2, [r3, #8]
                           ep->max_packet_length); 
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	88db      	ldrh	r3, [r3, #6]
    USBD_LL_PrepareReceive(pdev,
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f003 fab5 	bl	800d9d6 <USBD_LL_PrepareReceive>
                             sync_ep->feedback_data, ep->max_packet_length);
      }
#endif /*USBD_SUPPORT_AUDIO_OUT_FEEDBACK */   
    }
  }
  return USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	371c      	adds	r7, #28
 800a472:	46bd      	mov	sp, r7
 800a474:	bd90      	pop	{r4, r7, pc}
 800a476:	bf00      	nop
 800a478:	40080800 	.word	0x40080800

0800a47c <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_AUDIO_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b088      	sub	sp, #32
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint8_t ret = USBD_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	77fb      	strb	r3, [r7, #31]
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a490:	613b      	str	r3, [r7, #16]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d025      	beq.n	800a4ea <USBD_AUDIO_Setup+0x6e>
 800a49e:	2b20      	cmp	r3, #32
 800a4a0:	f040 80c8 	bne.w	800a634 <USBD_AUDIO_Setup+0x1b8>
  {
  case USB_REQ_TYPE_CLASS :  
    if((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	f003 0303 	and.w	r3, r3, #3
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d115      	bne.n	800a4dc <USBD_AUDIO_Setup+0x60>
    {
      switch (req->bRequest)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	785b      	ldrb	r3, [r3, #1]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d004      	beq.n	800a4c2 <USBD_AUDIO_Setup+0x46>
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	dd08      	ble.n	800a4ce <USBD_AUDIO_Setup+0x52>
 800a4bc:	3b81      	subs	r3, #129	; 0x81
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	d805      	bhi.n	800a4ce <USBD_AUDIO_Setup+0x52>
      case USBD_AUDIO_REQ_GET_CUR:
      case USBD_AUDIO_REQ_GET_MIN:
      case USBD_AUDIO_REQ_GET_MAX:
      case USBD_AUDIO_REQ_GET_RES:
      case USBD_AUDIO_REQ_SET_CUR:
           AUDIO_REQ(pdev, req);
 800a4c2:	6839      	ldr	r1, [r7, #0]
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 faa9 	bl	800aa1c <AUDIO_REQ>
        break;
 800a4ca:	bf00      	nop
    {
     USBD_CtlError (pdev, req);
        ret = USBD_FAIL;
    }
#endif /*USBD_SUPPORT_AUDIO_MULTI_FREQUENCIES*/
    break;
 800a4cc:	e0b2      	b.n	800a634 <USBD_AUDIO_Setup+0x1b8>
        USBD_CtlError (pdev, req);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f001 fc2f 	bl	800bd34 <USBD_CtlError>
        ret = USBD_FAIL; 
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	77fb      	strb	r3, [r7, #31]
    break;
 800a4da:	e0ab      	b.n	800a634 <USBD_AUDIO_Setup+0x1b8>
     USBD_CtlError (pdev, req);
 800a4dc:	6839      	ldr	r1, [r7, #0]
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 fc28 	bl	800bd34 <USBD_CtlError>
        ret = USBD_FAIL;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	77fb      	strb	r3, [r7, #31]
    break;
 800a4e8:	e0a4      	b.n	800a634 <USBD_AUDIO_Setup+0x1b8>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	785b      	ldrb	r3, [r3, #1]
 800a4ee:	2b0b      	cmp	r3, #11
 800a4f0:	d050      	beq.n	800a594 <USBD_AUDIO_Setup+0x118>
 800a4f2:	2b0b      	cmp	r3, #11
 800a4f4:	f300 8096 	bgt.w	800a624 <USBD_AUDIO_Setup+0x1a8>
 800a4f8:	2b06      	cmp	r3, #6
 800a4fa:	d002      	beq.n	800a502 <USBD_AUDIO_Setup+0x86>
 800a4fc:	2b0a      	cmp	r3, #10
 800a4fe:	d018      	beq.n	800a532 <USBD_AUDIO_Setup+0xb6>
 800a500:	e090      	b.n	800a624 <USBD_AUDIO_Setup+0x1a8>
    {
    case USB_REQ_GET_DESCRIPTOR:      
      if( (req->wValue >> 8) == USBD_AUDIO_DESC_TYPE_CS_DEVICE)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	885b      	ldrh	r3, [r3, #2]
 800a506:	0a1b      	lsrs	r3, r3, #8
 800a508:	b29b      	uxth	r3, r3
 800a50a:	2b21      	cmp	r3, #33	; 0x21
 800a50c:	f040 8091 	bne.w	800a632 <USBD_AUDIO_Setup+0x1b6>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 800a510:	4b4b      	ldr	r3, [pc, #300]	; (800a640 <USBD_AUDIO_Setup+0x1c4>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3312      	adds	r3, #18
 800a516:	60fb      	str	r3, [r7, #12]
        len = MIN(USBD_AUDIO_DESC_SIZ , req->wLength);
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	88db      	ldrh	r3, [r3, #6]
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	bf28      	it	cs
 800a520:	2309      	movcs	r3, #9
 800a522:	817b      	strh	r3, [r7, #10]
        
        
        USBD_CtlSendData (pdev, 
 800a524:	897b      	ldrh	r3, [r7, #10]
 800a526:	461a      	mov	r2, r3
 800a528:	68f9      	ldr	r1, [r7, #12]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f001 fc73 	bl	800be16 <USBD_CtlSendData>
                          pbuf,
                          len);
      }
      break;
 800a530:	e07f      	b.n	800a632 <USBD_AUDIO_Setup+0x1b6>
      
    case USB_REQ_GET_INTERFACE :
      {
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800a532:	2300      	movs	r3, #0
 800a534:	61bb      	str	r3, [r7, #24]
 800a536:	e020      	b.n	800a57a <USBD_AUDIO_Setup+0xfe>
        {
            if((uint8_t)(req->wIndex)==haudio->aud_function.as_interfaces[i].interface_num)
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	889b      	ldrh	r3, [r3, #4]
 800a53c:	b2d9      	uxtb	r1, r3
 800a53e:	6938      	ldr	r0, [r7, #16]
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	4613      	mov	r3, r2
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	1a9b      	subs	r3, r3, r2
 800a548:	00db      	lsls	r3, r3, #3
 800a54a:	4403      	add	r3, r0
 800a54c:	3324      	adds	r3, #36	; 0x24
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	4299      	cmp	r1, r3
 800a552:	d10f      	bne.n	800a574 <USBD_AUDIO_Setup+0xf8>
            {
              USBD_CtlSendData (pdev,
 800a554:	69ba      	ldr	r2, [r7, #24]
 800a556:	4613      	mov	r3, r2
 800a558:	00db      	lsls	r3, r3, #3
 800a55a:	1a9b      	subs	r3, r3, r2
 800a55c:	00db      	lsls	r3, r3, #3
 800a55e:	3320      	adds	r3, #32
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	4413      	add	r3, r2
 800a564:	3306      	adds	r3, #6
 800a566:	2201      	movs	r2, #1
 800a568:	4619      	mov	r1, r3
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f001 fc53 	bl	800be16 <USBD_CtlSendData>
                        (uint8_t *)&(haudio->aud_function.as_interfaces[i].alternate),
                        1);
              return USBD_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	e060      	b.n	800a636 <USBD_AUDIO_Setup+0x1ba>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	3301      	adds	r3, #1
 800a578:	61bb      	str	r3, [r7, #24]
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	785b      	ldrb	r3, [r3, #1]
 800a57e:	461a      	mov	r2, r3
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	4293      	cmp	r3, r2
 800a584:	dbd8      	blt.n	800a538 <USBD_AUDIO_Setup+0xbc>
            }
        }
        USBD_CtlError (pdev, req);
 800a586:	6839      	ldr	r1, [r7, #0]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f001 fbd3 	bl	800bd34 <USBD_CtlError>
        ret = USBD_FAIL; 
 800a58e:	2303      	movs	r3, #3
 800a590:	77fb      	strb	r3, [r7, #31]
      }
      break;
 800a592:	e04f      	b.n	800a634 <USBD_AUDIO_Setup+0x1b8>
      
    case USB_REQ_SET_INTERFACE :
      {
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800a594:	2300      	movs	r3, #0
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	e02b      	b.n	800a5f2 <USBD_AUDIO_Setup+0x176>
        {
            if((uint8_t)(req->wIndex)==haudio->aud_function.as_interfaces[i].interface_num)
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	889b      	ldrh	r3, [r3, #4]
 800a59e:	b2d9      	uxtb	r1, r3
 800a5a0:	6938      	ldr	r0, [r7, #16]
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	1a9b      	subs	r3, r3, r2
 800a5aa:	00db      	lsls	r3, r3, #3
 800a5ac:	4403      	add	r3, r0
 800a5ae:	3324      	adds	r3, #36	; 0x24
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	4299      	cmp	r1, r3
 800a5b4:	d11a      	bne.n	800a5ec <USBD_AUDIO_Setup+0x170>
            {
              if((uint8_t)(req->wValue)==haudio->aud_function.as_interfaces[i].alternate)
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	885b      	ldrh	r3, [r3, #2]
 800a5ba:	b2d9      	uxtb	r1, r3
 800a5bc:	6938      	ldr	r0, [r7, #16]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	00db      	lsls	r3, r3, #3
 800a5c4:	1a9b      	subs	r3, r3, r2
 800a5c6:	00db      	lsls	r3, r3, #3
 800a5c8:	4403      	add	r3, r0
 800a5ca:	3326      	adds	r3, #38	; 0x26
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	4299      	cmp	r1, r3
 800a5d0:	d101      	bne.n	800a5d6 <USBD_AUDIO_Setup+0x15a>
              {
                /* Nothing to do*/
                return USBD_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e02f      	b.n	800a636 <USBD_AUDIO_Setup+0x1ba>
              }
              else
              {               
                /*Alternate is changed*/
                return USBD_AUDIO_SetInterfaceAlternate(pdev,i,(uint8_t)(req->wValue));
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	b2d9      	uxtb	r1, r3
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	885b      	ldrh	r3, [r3, #2]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7ff fe8c 	bl	800a300 <USBD_AUDIO_SetInterfaceAlternate>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	e024      	b.n	800a636 <USBD_AUDIO_Setup+0x1ba>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	dbcd      	blt.n	800a59a <USBD_AUDIO_Setup+0x11e>
              }
            }
        } 

        
        if(((uint8_t)(req->wIndex) ==0)&&((uint8_t)(req->wValue))==0)
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	889b      	ldrh	r3, [r3, #4]
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b00      	cmp	r3, #0
 800a606:	d106      	bne.n	800a616 <USBD_AUDIO_Setup+0x19a>
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	885b      	ldrh	r3, [r3, #2]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <USBD_AUDIO_Setup+0x19a>
        {
          /* Audio Control Control interface, only alternate zero is accepted  */     
                return USBD_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	e00f      	b.n	800a636 <USBD_AUDIO_Setup+0x1ba>
        }
          /* Call the error management function (command will be nacked */
          USBD_CtlError (pdev, req);
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f001 fb8b 	bl	800bd34 <USBD_CtlError>
          ret = USBD_FAIL; 
 800a61e:	2303      	movs	r3, #3
 800a620:	77fb      	strb	r3, [r7, #31]
      } 
      break;      
 800a622:	e007      	b.n	800a634 <USBD_AUDIO_Setup+0x1b8>
      
    default:
      USBD_CtlError (pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f001 fb84 	bl	800bd34 <USBD_CtlError>
      ret = USBD_FAIL;     
 800a62c:	2303      	movs	r3, #3
 800a62e:	77fb      	strb	r3, [r7, #31]
 800a630:	e000      	b.n	800a634 <USBD_AUDIO_Setup+0x1b8>
      break;
 800a632:	bf00      	nop
    }
  }
  return ret;
 800a634:	7ffb      	ldrb	r3, [r7, #31]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3720      	adds	r7, #32
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	20000288 	.word	0x20000288

0800a644 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  *length = USBD_AUDIO_CfgDescSize;
 800a64c:	4b05      	ldr	r3, [pc, #20]	; (800a664 <USBD_AUDIO_GetCfgDesc+0x20>)
 800a64e:	881a      	ldrh	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_CfgDesc;
 800a654:	4b04      	ldr	r3, [pc, #16]	; (800a668 <USBD_AUDIO_GetCfgDesc+0x24>)
 800a656:	681b      	ldr	r3, [r3, #0]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	2000028c 	.word	0x2000028c
 800a668:	20000288 	.word	0x20000288

0800a66c <USBD_AUDIO_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 800a66c:	b590      	push	{r4, r7, lr}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_EPTypeDef * ep;

   ep = &((USBD_AUDIO_HandleTypeDef*) pdev->pClassData)->ep_in[epnum&0x7F];
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 12bc 	ldr.w	r1, [r3, #700]	; 0x2bc
 800a67e:	78fb      	ldrb	r3, [r7, #3]
 800a680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a684:	4613      	mov	r3, r2
 800a686:	005b      	lsls	r3, r3, #1
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	3390      	adds	r3, #144	; 0x90
 800a68e:	440b      	add	r3, r1
 800a690:	3304      	adds	r3, #4
 800a692:	60fb      	str	r3, [r7, #12]
   if(ep->open)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	795b      	ldrb	r3, [r3, #5]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d025      	beq.n	800a6e8 <USBD_AUDIO_DataIn+0x7c>
#if USBD_SUPPORT_AUDIO_OUT_FEEDBACK    
      if(ep->ep_type==USBD_AUDIO_DATA_EP)
      {
#endif /*USBD_SUPPORT_AUDIO_OUT_FEEDBACK */
     
          ep->ep_description.data_ep->buf = ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	6812      	ldr	r2, [r2, #0]
 800a6a6:	6a10      	ldr	r0, [r2, #32]
                                                                                  &ep->ep_description.data_ep->length);
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	6812      	ldr	r2, [r2, #0]
          ep->ep_description.data_ep->buf = ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 800a6ac:	f102 010c 	add.w	r1, r2, #12
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	6814      	ldr	r4, [r2, #0]
 800a6b4:	4798      	blx	r3
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	60a3      	str	r3, [r4, #8]
          ep->tx_rx_soffn = USB_SOF_NUMBER();
 800a6ba:	4b0f      	ldr	r3, [pc, #60]	; (800a6f8 <USBD_AUDIO_DataIn+0x8c>)
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	0a1b      	lsrs	r3, r3, #8
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	811a      	strh	r2, [r3, #8]
          USBD_LL_Transmit(pdev, 
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6d2:	b2d9      	uxtb	r1, r3
                      epnum|0x80,
                      ep->ep_description.data_ep->buf,
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
          USBD_LL_Transmit(pdev, 
 800a6d8:	689a      	ldr	r2, [r3, #8]
                      ep->ep_description.data_ep->length);     
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	899b      	ldrh	r3, [r3, #12]
          USBD_LL_Transmit(pdev, 
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f003 f957 	bl	800d994 <USBD_LL_Transmit>
 800a6e6:	e001      	b.n	800a6ec <USBD_AUDIO_DataIn+0x80>

    }
   else
   {
     /* Should not be reproduced */
     USBD_error_handler();
 800a6e8:	f7f5 fffe 	bl	80006e8 <USBD_error_handler>
   }
  
  return USBD_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd90      	pop	{r4, r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	40080800 	.word	0x40080800

0800a6fc <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b088      	sub	sp, #32
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  uint16_t *tmpdata;
  
 
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData; 
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a70a:	61fb      	str	r3, [r7, #28]
  if(haudio->last_control.req == 0x00)
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <USBD_AUDIO_EP0_RxReady+0x1e>
  {
    /* @TODO Manage this error */
    return USBD_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	e057      	b.n	800a7ca <USBD_AUDIO_EP0_RxReady+0xce>
  }
  if(haudio->last_control.request_target == AUDIO_UNIT_CONTROL_REQUEST)
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800a720:	2b01      	cmp	r3, #1
 800a722:	d150      	bne.n	800a7c6 <USBD_AUDIO_EP0_RxReady+0xca>
  {
    USBD_AUDIO_ControlTypeDef *ctl;
    ctl=haudio->last_control.entity.controller;
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a72a:	61bb      	str	r3, [r7, #24]
    switch(ctl->type)
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	785b      	ldrb	r3, [r3, #1]
 800a730:	2b06      	cmp	r3, #6
 800a732:	d145      	bne.n	800a7c0 <USBD_AUDIO_EP0_RxReady+0xc4>
    {
    case USBD_AUDIO_CS_AC_SUBTYPE_FEATURE_UNIT:
         {
            uint16_t selector = HIBYTE(haudio->last_control.wValue);
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	f8b3 3158 	ldrh.w	r3, [r3, #344]	; 0x158
 800a73a:	0a1b      	lsrs	r3, r3, #8
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	82fb      	strh	r3, [r7, #22]
            USBD_AUDIO_FeatureControlCallbacksTypeDef* feature_control = ctl->Callbacks.feature_control;
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	613b      	str	r3, [r7, #16]
          switch(selector)
 800a748:	8afb      	ldrh	r3, [r7, #22]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d002      	beq.n	800a754 <USBD_AUDIO_EP0_RxReady+0x58>
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d012      	beq.n	800a778 <USBD_AUDIO_EP0_RxReady+0x7c>
 800a752:	e030      	b.n	800a7b6 <USBD_AUDIO_EP0_RxReady+0xba>
          {
                  case USBD_AUDIO_CONTROL_FEATURE_UNIT_MUTE:
                    {
                      /* @TODO treat multi channel case and error when req! of GetCur*/  
                      if(feature_control->SetMute)
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d02f      	beq.n	800a7bc <USBD_AUDIO_EP0_RxReady+0xc0>
                      {
                        feature_control->SetMute(LOBYTE(haudio->last_control.wValue),
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	69fa      	ldr	r2, [r7, #28]
 800a762:	f8b2 2158 	ldrh.w	r2, [r2, #344]	; 0x158
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	b290      	uxth	r0, r2
 800a76a:	69fa      	ldr	r2, [r7, #28]
 800a76c:	f892 1111 	ldrb.w	r1, [r2, #273]	; 0x111
 800a770:	69ba      	ldr	r2, [r7, #24]
 800a772:	68d2      	ldr	r2, [r2, #12]
 800a774:	4798      	blx	r3
                                                                haudio->last_control.data[0], ctl->private_data);
                      }
                      break;
 800a776:	e021      	b.n	800a7bc <USBD_AUDIO_EP0_RxReady+0xc0>
                  case USBD_AUDIO_CONTROL_FEATURE_UNIT_VOLUME:
                     {
                   
                        /* @TODO check the len uses cases and control req->wLength*/

                       switch(haudio->last_control.req)
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d114      	bne.n	800a7ac <USBD_AUDIO_EP0_RxReady+0xb0>
                        {
                        case USBD_AUDIO_REQ_SET_CUR:
                              if(feature_control->SetCurVolume)
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d013      	beq.n	800a7b2 <USBD_AUDIO_EP0_RxReady+0xb6>
                              {
                            	  tmpdata = (uint16_t*) &(haudio->last_control.data);
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	f203 1311 	addw	r3, r3, #273	; 0x111
 800a790:	60fb      	str	r3, [r7, #12]
                                  feature_control->SetCurVolume(LOBYTE(haudio->last_control.wValue),
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	69fa      	ldr	r2, [r7, #28]
 800a798:	f8b2 2158 	ldrh.w	r2, [r2, #344]	; 0x158
 800a79c:	b2d2      	uxtb	r2, r2
 800a79e:	b290      	uxth	r0, r2
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	8811      	ldrh	r1, [r2, #0]
 800a7a4:	69ba      	ldr	r2, [r7, #24]
 800a7a6:	68d2      	ldr	r2, [r2, #12]
 800a7a8:	4798      	blx	r3
                                                                               *tmpdata,
                                                                               ctl->private_data);
                              }
                              break;
 800a7aa:	e002      	b.n	800a7b2 <USBD_AUDIO_EP0_RxReady+0xb6>
                        default :
                              
                                USBD_error_handler();
 800a7ac:	f7f5 ff9c 	bl	80006e8 <USBD_error_handler>
                        }
                         break;
 800a7b0:	e005      	b.n	800a7be <USBD_AUDIO_EP0_RxReady+0xc2>
                              break;
 800a7b2:	bf00      	nop
                         break;
 800a7b4:	e003      	b.n	800a7be <USBD_AUDIO_EP0_RxReady+0xc2>
                       }
                  
                default :
                 
                          USBD_error_handler();
 800a7b6:	f7f5 ff97 	bl	80006e8 <USBD_error_handler>
                }
          break;
 800a7ba:	e005      	b.n	800a7c8 <USBD_AUDIO_EP0_RxReady+0xcc>
                      break;
 800a7bc:	bf00      	nop
          break;
 800a7be:	e003      	b.n	800a7c8 <USBD_AUDIO_EP0_RxReady+0xcc>
         }
                 
  default : /* switch(ctl->type)*/
            USBD_error_handler();
 800a7c0:	f7f5 ff92 	bl	80006e8 <USBD_error_handler>
 800a7c4:	e000      	b.n	800a7c8 <USBD_AUDIO_EP0_RxReady+0xcc>
                             
    }
  }
 800a7c6:	bf00      	nop
    {
       USBD_error_handler();
    }
  }
#endif /* USBD_SUPPORT_AUDIO_MULTI_FREQUENCIES */
  return USBD_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3720      	adds	r7, #32
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b083      	sub	sp, #12
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
    USBD_AUDIO_HandleTypeDef   *haudio;
  
 
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData; 
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a7f6:	60bb      	str	r3, [r7, #8]
  
  for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	e02c      	b.n	800a858 <USBD_AUDIO_SOF+0x70>
  {
      if(haudio->aud_function.as_interfaces[i].alternate!=0)
 800a7fe:	68b9      	ldr	r1, [r7, #8]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4613      	mov	r3, r2
 800a804:	00db      	lsls	r3, r3, #3
 800a806:	1a9b      	subs	r3, r3, r2
 800a808:	00db      	lsls	r3, r3, #3
 800a80a:	440b      	add	r3, r1
 800a80c:	3326      	adds	r3, #38	; 0x26
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d01e      	beq.n	800a852 <USBD_AUDIO_SOF+0x6a>
      {
        if(haudio->aud_function.as_interfaces[i].SofReceived)
 800a814:	68b9      	ldr	r1, [r7, #8]
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	4613      	mov	r3, r2
 800a81a:	00db      	lsls	r3, r3, #3
 800a81c:	1a9b      	subs	r3, r3, r2
 800a81e:	00db      	lsls	r3, r3, #3
 800a820:	440b      	add	r3, r1
 800a822:	334c      	adds	r3, #76	; 0x4c
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d013      	beq.n	800a852 <USBD_AUDIO_SOF+0x6a>
          
        {
          haudio->aud_function.as_interfaces[i].SofReceived(haudio->aud_function.as_interfaces[i].private_data);
 800a82a:	68b9      	ldr	r1, [r7, #8]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	4613      	mov	r3, r2
 800a830:	00db      	lsls	r3, r3, #3
 800a832:	1a9b      	subs	r3, r3, r2
 800a834:	00db      	lsls	r3, r3, #3
 800a836:	440b      	add	r3, r1
 800a838:	334c      	adds	r3, #76	; 0x4c
 800a83a:	6819      	ldr	r1, [r3, #0]
 800a83c:	68b8      	ldr	r0, [r7, #8]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	4613      	mov	r3, r2
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	4403      	add	r3, r0
 800a84a:	3358      	adds	r3, #88	; 0x58
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4618      	mov	r0, r3
 800a850:	4788      	blx	r1
  for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3301      	adds	r3, #1
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	785b      	ldrb	r3, [r3, #1]
 800a85c:	461a      	mov	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	4293      	cmp	r3, r2
 800a862:	dbcc      	blt.n	800a7fe <USBD_AUDIO_SOF+0x16>
        }
      }
  }
  return USBD_OK;
 800a864:	2300      	movs	r3, #0
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
	...

0800a870 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoINIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
 USBD_AUDIO_EPTypeDef   *ep;
 USBD_AUDIO_HandleTypeDef   *haudio;
 uint16_t current_sof;
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a882:	613b      	str	r3, [r7, #16]
 /* @TODO check if the feedback is responsible of event */
  for(int i = 1; i<USBD_AUDIO_MAX_IN_EP; i++)
 800a884:	2301      	movs	r3, #1
 800a886:	617b      	str	r3, [r7, #20]
 800a888:	e070      	b.n	800a96c <USBD_AUDIO_IsoINIncomplete+0xfc>
  {
    ep = &haudio->ep_in[i];
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	4613      	mov	r3, r2
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	4413      	add	r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	3390      	adds	r3, #144	; 0x90
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	4413      	add	r3, r2
 800a89a:	3304      	adds	r3, #4
 800a89c:	60fb      	str	r3, [r7, #12]
    current_sof = USB_SOF_NUMBER();
 800a89e:	4b37      	ldr	r3, [pc, #220]	; (800a97c <USBD_AUDIO_IsoINIncomplete+0x10c>)
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	0a1b      	lsrs	r3, r3, #8
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a8aa:	817b      	strh	r3, [r7, #10]
    if((ep->open) && IS_ISO_IN_INCOMPLETE_EP(i,current_sof, ep->tx_rx_soffn))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	795b      	ldrb	r3, [r3, #5]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d058      	beq.n	800a966 <USBD_AUDIO_IsoINIncomplete+0xf6>
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8ba:	4b31      	ldr	r3, [pc, #196]	; (800a980 <USBD_AUDIO_IsoINIncomplete+0x110>)
 800a8bc:	4413      	add	r3, r2
 800a8be:	015b      	lsls	r3, r3, #5
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	da4f      	bge.n	800a966 <USBD_AUDIO_IsoINIncomplete+0xf6>
 800a8c6:	897a      	ldrh	r2, [r7, #10]
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800a8ce:	4b2c      	ldr	r3, [pc, #176]	; (800a980 <USBD_AUDIO_IsoINIncomplete+0x110>)
 800a8d0:	440b      	add	r3, r1
 800a8d2:	015b      	lsls	r3, r3, #5
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	0c1b      	lsrs	r3, r3, #16
 800a8d8:	4053      	eors	r3, r2
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d007      	beq.n	800a8f2 <USBD_AUDIO_IsoINIncomplete+0x82>
 800a8e2:	897a      	ldrh	r2, [r7, #10]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	891b      	ldrh	r3, [r3, #8]
 800a8e8:	3302      	adds	r3, #2
 800a8ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d139      	bne.n	800a966 <USBD_AUDIO_IsoINIncomplete+0xf6>
    {
      epnum = i|0x80;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	b25b      	sxtb	r3, r3
 800a8f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8fa:	b25b      	sxtb	r3, r3
 800a8fc:	70fb      	strb	r3, [r7, #3]
      USB_CLEAR_INCOMPLETE_IN_EP(epnum);
 800a8fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a902:	2b00      	cmp	r3, #0
 800a904:	da10      	bge.n	800a928 <USBD_AUDIO_IsoINIncomplete+0xb8>
 800a906:	78fb      	ldrb	r3, [r7, #3]
 800a908:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a90c:	4b1c      	ldr	r3, [pc, #112]	; (800a980 <USBD_AUDIO_IsoINIncomplete+0x110>)
 800a90e:	4413      	add	r3, r2
 800a910:	015b      	lsls	r3, r3, #5
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	78fb      	ldrb	r3, [r7, #3]
 800a916:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800a91a:	4b19      	ldr	r3, [pc, #100]	; (800a980 <USBD_AUDIO_IsoINIncomplete+0x110>)
 800a91c:	440b      	add	r3, r1
 800a91e:	015b      	lsls	r3, r3, #5
 800a920:	4619      	mov	r1, r3
 800a922:	f042 4390 	orr.w	r3, r2, #1207959552	; 0x48000000
 800a926:	600b      	str	r3, [r1, #0]
      USBD_LL_FlushEP(pdev, epnum);
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f002 ff89 	bl	800d844 <USBD_LL_FlushEP>
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 800a932:	4b12      	ldr	r3, [pc, #72]	; (800a97c <USBD_AUDIO_IsoINIncomplete+0x10c>)
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	0a1b      	lsrs	r3, r3, #8
 800a938:	b29b      	uxth	r3, r3
 800a93a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a93e:	b29a      	uxth	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	811a      	strh	r2, [r3, #8]
                         ep->max_packet_length);
        continue;
      }
     else
#endif /*USBD_SUPPORT_AUDIO_OUT_FEEDBACK */
     if(ep->ep_type==USBD_AUDIO_DATA_EP)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	791b      	ldrb	r3, [r3, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10a      	bne.n	800a962 <USBD_AUDIO_IsoINIncomplete+0xf2>
      {
        USBD_LL_Transmit(pdev, 
                      epnum,
                      ep->ep_description.data_ep->buf,
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
        USBD_LL_Transmit(pdev, 
 800a950:	689a      	ldr	r2, [r3, #8]
                      ep->ep_description.data_ep->length);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	899b      	ldrh	r3, [r3, #12]
        USBD_LL_Transmit(pdev, 
 800a958:	78f9      	ldrb	r1, [r7, #3]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f003 f81a 	bl	800d994 <USBD_LL_Transmit>
 800a960:	e001      	b.n	800a966 <USBD_AUDIO_IsoINIncomplete+0xf6>
      }
     else
     {
       USBD_error_handler();
 800a962:	f7f5 fec1 	bl	80006e8 <USBD_error_handler>
  for(int i = 1; i<USBD_AUDIO_MAX_IN_EP; i++)
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	3301      	adds	r3, #1
 800a96a:	617b      	str	r3, [r7, #20]
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	2b04      	cmp	r3, #4
 800a970:	dd8b      	ble.n	800a88a <USBD_AUDIO_IsoINIncomplete+0x1a>
     }
    
    }
  }
  return 0;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	40080800 	.word	0x40080800
 800a980:	02004048 	.word	0x02004048

0800a984 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	70fb      	strb	r3, [r7, #3]

  return USBD_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <USBD_AUDIO_DataOut>:
  * @retval status
  */

static uint8_t  USBD_AUDIO_DataOut (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 800a99e:	b580      	push	{r7, lr}
 800a9a0:	b086      	sub	sp, #24
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_EPTypeDef * ep;
  uint8_t *pbuf ;
  uint16_t packet_length;


  ep=&((USBD_AUDIO_HandleTypeDef*) pdev->pClassData)->ep_out[epnum];
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 12bc 	ldr.w	r1, [r3, #700]	; 0x2bc
 800a9b0:	78fa      	ldrb	r2, [r7, #3]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	4413      	add	r3, r2
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	33d0      	adds	r3, #208	; 0xd0
 800a9bc:	440b      	add	r3, r1
 800a9be:	617b      	str	r3, [r7, #20]

  if(ep->open)
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	795b      	ldrb	r3, [r3, #5]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d022      	beq.n	800aa0e <USBD_AUDIO_DataOut+0x70>
  {
    /* get received length */
    packet_length = USBD_LL_GetRxDataSize(pdev, epnum);
 800a9c8:	78fb      	ldrb	r3, [r7, #3]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f003 f823 	bl	800da18 <USBD_LL_GetRxDataSize>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	81fb      	strh	r3, [r7, #14]
    /* inform user about data reception  */
    ep->ep_description.data_ep->DataReceived(packet_length,ep->ep_description.data_ep->private_data);
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	89f8      	ldrh	r0, [r7, #14]
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	6812      	ldr	r2, [r2, #0]
 800a9e4:	6a12      	ldr	r2, [r2, #32]
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	4798      	blx	r3
     
    /* get buffer to receive new packet */  
    pbuf=  ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,&packet_length);                               
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	6812      	ldr	r2, [r2, #0]
 800a9f4:	6a12      	ldr	r2, [r2, #32]
 800a9f6:	f107 010e 	add.w	r1, r7, #14
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	4798      	blx	r3
 800a9fe:	6138      	str	r0, [r7, #16]
    /* Prepare Out endpoint to receive next audio packet */
     USBD_LL_PrepareReceive(pdev,
 800aa00:	89fb      	ldrh	r3, [r7, #14]
 800aa02:	78f9      	ldrb	r1, [r7, #3]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f002 ffe5 	bl	800d9d6 <USBD_LL_PrepareReceive>
 800aa0c:	e001      	b.n	800aa12 <USBD_AUDIO_DataOut+0x74>
                            pbuf,
                            packet_length);
    }
    else
    {
      USBD_error_handler();
 800aa0e:	f7f5 fe6b 	bl	80006e8 <USBD_error_handler>
    }
    
  
    return USBD_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <AUDIO_REQ>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static uint8_t AUDIO_REQ(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{  
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b088      	sub	sp, #32
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  USBD_AUDIO_ControlTypeDef * ctl = 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	61fb      	str	r3, [r7, #28]
  uint8_t unit_id,control_selector;
  uint16_t *tmpdata = NULL;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	61bb      	str	r3, [r7, #24]
 
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa34:	613b      	str	r3, [r7, #16]
  
  /* reset last command */
  haudio->last_control.req = 0x00;
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
  
  /* get the Unit Id */
  unit_id = HIBYTE(req->wIndex);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	889b      	ldrh	r3, [r3, #4]
 800aa42:	0a1b      	lsrs	r3, r3, #8
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	73fb      	strb	r3, [r7, #15]
  
  for (int i = 0;i < haudio->aud_function.control_count; i++)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	e012      	b.n	800aa74 <AUDIO_REQ+0x58>
  {
    if(unit_id == haudio->aud_function.controls[i].id)
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	011b      	lsls	r3, r3, #4
 800aa54:	4413      	add	r3, r2
 800aa56:	3304      	adds	r3, #4
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	7bfa      	ldrb	r2, [r7, #15]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d106      	bne.n	800aa6e <AUDIO_REQ+0x52>
    {
      ctl = &haudio->aud_function.controls[i];
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	011b      	lsls	r3, r3, #4
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	4413      	add	r3, r2
 800aa68:	3304      	adds	r3, #4
 800aa6a:	61fb      	str	r3, [r7, #28]
      break;
 800aa6c:	e008      	b.n	800aa80 <AUDIO_REQ+0x64>
  for (int i = 0;i < haudio->aud_function.control_count; i++)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	3301      	adds	r3, #1
 800aa72:	617b      	str	r3, [r7, #20]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	dbe6      	blt.n	800aa4e <AUDIO_REQ+0x32>
    }     
  }
  
  if(!ctl)
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d105      	bne.n	800aa92 <AUDIO_REQ+0x76>
  {
    /* control not supported */
    USBD_CtlError (pdev, req);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f001 f953 	bl	800bd34 <USBD_CtlError>
    return  USBD_FAIL; 
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e0a8      	b.n	800abe4 <AUDIO_REQ+0x1c8>
  }
  
  control_selector = HIBYTE(req->wValue);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	885b      	ldrh	r3, [r3, #2]
 800aa96:	0a1b      	lsrs	r3, r3, #8
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	73bb      	strb	r3, [r7, #14]
  
  if((ctl->control_selector_map & control_selector) == 0)
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	889b      	ldrh	r3, [r3, #4]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	7bbb      	ldrb	r3, [r7, #14]
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d105      	bne.n	800aab6 <AUDIO_REQ+0x9a>
  {
    /* control not supported */
    USBD_CtlError (pdev, req);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 f941 	bl	800bd34 <USBD_CtlError>
      return  USBD_FAIL; 
 800aab2:	2303      	movs	r3, #3
 800aab4:	e096      	b.n	800abe4 <AUDIO_REQ+0x1c8>
  }
  
  if(!(req->bRequest&0x80))
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	785b      	ldrb	r3, [r3, #1]
 800aaba:	b25b      	sxtb	r3, r3
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	db22      	blt.n	800ab06 <AUDIO_REQ+0xea>
  {
    /* set request */
    /* @TODO check the length */
     haudio->last_control.wValue  = req->wValue;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	885a      	ldrh	r2, [r3, #2]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
     haudio->last_control.entity.controller= ctl;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	69fa      	ldr	r2, [r7, #28]
 800aace:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     haudio->last_control.request_target = AUDIO_UNIT_CONTROL_REQUEST;
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
     haudio->last_control.len = req->wLength;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	88db      	ldrh	r3, [r3, #6]
 800aade:	461a      	mov	r2, r3
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
     haudio->last_control.req = req->bRequest;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	785a      	ldrb	r2, [r3, #1]
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
     USBD_CtlPrepareRx (pdev,
                        haudio->last_control.data,                                  
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	f203 1111 	addw	r1, r3, #273	; 0x111
                       req->wLength);
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	88db      	ldrh	r3, [r3, #6]
     USBD_CtlPrepareRx (pdev,
 800aafa:	461a      	mov	r2, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f001 f9b6 	bl	800be6e <USBD_CtlPrepareRx>
      return USBD_OK;   
 800ab02:	2300      	movs	r3, #0
 800ab04:	e06e      	b.n	800abe4 <AUDIO_REQ+0x1c8>
  }
  
  switch(ctl->type)
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	785b      	ldrb	r3, [r3, #1]
 800ab0a:	2b06      	cmp	r3, #6
 800ab0c:	d167      	bne.n	800abde <AUDIO_REQ+0x1c2>
  {
    case USBD_AUDIO_CS_AC_SUBTYPE_FEATURE_UNIT:
         {
           USBD_AUDIO_FeatureControlCallbacksTypeDef* feature_control = ctl->Callbacks.feature_control;
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	60bb      	str	r3, [r7, #8]
          switch(control_selector)
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d002      	beq.n	800ab20 <AUDIO_REQ+0x104>
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d01d      	beq.n	800ab5a <AUDIO_REQ+0x13e>
 800ab1e:	e05a      	b.n	800abd6 <AUDIO_REQ+0x1ba>
          {
                  case USBD_AUDIO_CONTROL_FEATURE_UNIT_MUTE:
                    {
                      /* @TODO treat multi channel case and error when req! of GetCur*/
                      
                      haudio->last_control.data[0] = 0;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
                      if(feature_control->GetMute)
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00b      	beq.n	800ab48 <AUDIO_REQ+0x12c>
                      {
                        feature_control->GetMute(LOBYTE(req->wValue),
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	8852      	ldrh	r2, [r2, #2]
 800ab38:	b2d2      	uxtb	r2, r2
 800ab3a:	b290      	uxth	r0, r2
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	f202 1111 	addw	r1, r2, #273	; 0x111
 800ab42:	69fa      	ldr	r2, [r7, #28]
 800ab44:	68d2      	ldr	r2, [r2, #12]
 800ab46:	4798      	blx	r3
                                                                &haudio->last_control.data[0], ctl->private_data);
                      }
                      /* Send the current mute state */
                      USBD_CtlSendData (pdev, haudio->last_control.data,1);
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	f203 1311 	addw	r3, r3, #273	; 0x111
 800ab4e:	2201      	movs	r2, #1
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f001 f95f 	bl	800be16 <USBD_CtlSendData>

                      break;
 800ab58:	e040      	b.n	800abdc <AUDIO_REQ+0x1c0>
                     {
                   
                        /* set request */
                        /* @TODO check the len uses cases and control req->wLength*/
                       
                       tmpdata =  (uint16_t*) &(haudio->last_control.data);
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f203 1311 	addw	r3, r3, #273	; 0x111
 800ab60:	61bb      	str	r3, [r7, #24]
                        switch(req->bRequest)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	785b      	ldrb	r3, [r3, #1]
 800ab66:	3b81      	subs	r3, #129	; 0x81
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d82a      	bhi.n	800abc2 <AUDIO_REQ+0x1a6>
 800ab6c:	a201      	add	r2, pc, #4	; (adr r2, 800ab74 <AUDIO_REQ+0x158>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800ab85 	.word	0x0800ab85
 800ab78:	0800abab 	.word	0x0800abab
 800ab7c:	0800abb3 	.word	0x0800abb3
 800ab80:	0800abbb 	.word	0x0800abbb
                        {
                        case USBD_AUDIO_REQ_GET_CUR:
                              tmpdata = 0;
 800ab84:	2300      	movs	r3, #0
 800ab86:	61bb      	str	r3, [r7, #24]
                              if(feature_control->GetCurVolume)
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d01b      	beq.n	800abc8 <AUDIO_REQ+0x1ac>
                              {
                                  feature_control->GetCurVolume(LOBYTE(req->wValue),
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	683a      	ldr	r2, [r7, #0]
 800ab96:	8852      	ldrh	r2, [r2, #2]
 800ab98:	b2d2      	uxtb	r2, r2
 800ab9a:	b290      	uxth	r0, r2
                                                                (uint16_t*)haudio->last_control.data, ctl->private_data);
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	f202 1111 	addw	r1, r2, #273	; 0x111
                                  feature_control->GetCurVolume(LOBYTE(req->wValue),
 800aba2:	69fa      	ldr	r2, [r7, #28]
 800aba4:	68d2      	ldr	r2, [r2, #12]
 800aba6:	4798      	blx	r3
                              }
                              break;
 800aba8:	e00e      	b.n	800abc8 <AUDIO_REQ+0x1ac>
                          
                        case USBD_AUDIO_REQ_GET_MIN:
                              tmpdata = (uint16_t*) &(feature_control->MinVolume);
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	3312      	adds	r3, #18
 800abae:	61bb      	str	r3, [r7, #24]
                              break;
 800abb0:	e00b      	b.n	800abca <AUDIO_REQ+0x1ae>
                        case USBD_AUDIO_REQ_GET_MAX:
                             tmpdata = (uint16_t*) &(feature_control->MaxVolume);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	3310      	adds	r3, #16
 800abb6:	61bb      	str	r3, [r7, #24]
                              break;
 800abb8:	e007      	b.n	800abca <AUDIO_REQ+0x1ae>
                         
                       case USBD_AUDIO_REQ_GET_RES:
                              tmpdata = (uint16_t*) &(feature_control->ResVolume);
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	3314      	adds	r3, #20
 800abbe:	61bb      	str	r3, [r7, #24]
                              break;
 800abc0:	e003      	b.n	800abca <AUDIO_REQ+0x1ae>
                        default :
                                USBD_error_handler();
 800abc2:	f7f5 fd91 	bl	80006e8 <USBD_error_handler>
 800abc6:	e000      	b.n	800abca <AUDIO_REQ+0x1ae>
                              break;
 800abc8:	bf00      	nop
                        }
                         /* Send the current mute state */
                                USBD_CtlSendData (pdev, (uint8_t*) tmpdata,2);
 800abca:	2202      	movs	r2, #2
 800abcc:	69b9      	ldr	r1, [r7, #24]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f001 f921 	bl	800be16 <USBD_CtlSendData>
                         break;
 800abd4:	e002      	b.n	800abdc <AUDIO_REQ+0x1c0>
                       }
                  
                default :
                          USBD_error_handler();
 800abd6:	f7f5 fd87 	bl	80006e8 <USBD_error_handler>
                }
          break;
 800abda:	e002      	b.n	800abe2 <AUDIO_REQ+0x1c6>
 800abdc:	e001      	b.n	800abe2 <AUDIO_REQ+0x1c6>
         }
                 
  default : /* switch(ctl->type)*/
            USBD_error_handler();
 800abde:	f7f5 fd83 	bl	80006e8 <USBD_error_handler>
    }
  return USBD_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3720      	adds	r7, #32
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	220a      	movs	r2, #10
 800abf8:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
 800abfa:	4b03      	ldr	r3, [pc, #12]	; (800ac08 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	2000004c 	.word	0x2000004c

0800ac0c <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_InterfaceCallbacksfTypeDef *aifc)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  if(aifc != NULL)
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00a      	beq.n	800ac32 <USBD_AUDIO_RegisterInterface+0x26>
  {
    pdev->pUserData= aifc;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    aifc->GetConfigDesc(&USBD_AUDIO_CfgDesc, &USBD_AUDIO_CfgDescSize, aifc->private_data);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	689b      	ldr	r3, [r3, #8]
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	6912      	ldr	r2, [r2, #16]
 800ac2c:	4903      	ldr	r1, [pc, #12]	; (800ac3c <USBD_AUDIO_RegisterInterface+0x30>)
 800ac2e:	4804      	ldr	r0, [pc, #16]	; (800ac40 <USBD_AUDIO_RegisterInterface+0x34>)
 800ac30:	4798      	blx	r3
    
  }
  return 0;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	2000028c 	.word	0x2000028c
 800ac40:	20000288 	.word	0x20000288

0800ac44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e01f      	b.n	800ac9c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d003      	beq.n	800ac82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	79fa      	ldrb	r2, [r7, #7]
 800ac8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f002 fd27 	bl	800d6e4 <USBD_LL_Init>
 800ac96:	4603      	mov	r3, r0
 800ac98:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800acb8:	2303      	movs	r3, #3
 800acba:	e016      	b.n	800acea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00b      	beq.n	800ace8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd8:	f107 020e 	add.w	r2, r7, #14
 800acdc:	4610      	mov	r0, r2
 800acde:	4798      	blx	r3
 800ace0:	4602      	mov	r2, r0
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f002 fd42 	bl	800d784 <USBD_LL_Start>
 800ad00:	4603      	mov	r3, r0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b083      	sub	sp, #12
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d009      	beq.n	800ad4e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	78fa      	ldrb	r2, [r7, #3]
 800ad44:	4611      	mov	r1, r2
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	4798      	blx	r3
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d007      	beq.n	800ad7e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	78fa      	ldrb	r2, [r7, #3]
 800ad78:	4611      	mov	r1, r2
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	4798      	blx	r3
  }

  return USBD_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad98:	6839      	ldr	r1, [r7, #0]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 ff90 	bl	800bcc0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800adae:	461a      	mov	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800adbc:	f003 031f 	and.w	r3, r3, #31
 800adc0:	2b02      	cmp	r3, #2
 800adc2:	d01a      	beq.n	800adfa <USBD_LL_SetupStage+0x72>
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d822      	bhi.n	800ae0e <USBD_LL_SetupStage+0x86>
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <USBD_LL_SetupStage+0x4a>
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d00a      	beq.n	800ade6 <USBD_LL_SetupStage+0x5e>
 800add0:	e01d      	b.n	800ae0e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fa62 	bl	800b2a4 <USBD_StdDevReq>
 800ade0:	4603      	mov	r3, r0
 800ade2:	73fb      	strb	r3, [r7, #15]
      break;
 800ade4:	e020      	b.n	800ae28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adec:	4619      	mov	r1, r3
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fac6 	bl	800b380 <USBD_StdItfReq>
 800adf4:	4603      	mov	r3, r0
 800adf6:	73fb      	strb	r3, [r7, #15]
      break;
 800adf8:	e016      	b.n	800ae28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fb05 	bl	800b412 <USBD_StdEPReq>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae0c:	e00c      	b.n	800ae28 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f002 fd30 	bl	800d882 <USBD_LL_StallEP>
 800ae22:	4603      	mov	r3, r0
 800ae24:	73fb      	strb	r3, [r7, #15]
      break;
 800ae26:	bf00      	nop
  }

  return ret;
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b086      	sub	sp, #24
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	60f8      	str	r0, [r7, #12]
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	607a      	str	r2, [r7, #4]
 800ae3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ae40:	7afb      	ldrb	r3, [r7, #11]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d138      	bne.n	800aeb8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ae4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d14a      	bne.n	800aeee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	689a      	ldr	r2, [r3, #8]
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d913      	bls.n	800ae8c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	1ad2      	subs	r2, r2, r3
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	bf28      	it	cs
 800ae7e:	4613      	movcs	r3, r2
 800ae80:	461a      	mov	r2, r3
 800ae82:	6879      	ldr	r1, [r7, #4]
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f001 f80f 	bl	800bea8 <USBD_CtlContinueRx>
 800ae8a:	e030      	b.n	800aeee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d10b      	bne.n	800aeb0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d005      	beq.n	800aeb0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f001 f80a 	bl	800beca <USBD_CtlSendStatus>
 800aeb6:	e01a      	b.n	800aeee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aebe:	b2db      	uxtb	r3, r3
 800aec0:	2b03      	cmp	r3, #3
 800aec2:	d114      	bne.n	800aeee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00e      	beq.n	800aeee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	7afa      	ldrb	r2, [r7, #11]
 800aeda:	4611      	mov	r1, r2
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	4798      	blx	r3
 800aee0:	4603      	mov	r3, r0
 800aee2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
 800aeec:	e000      	b.n	800aef0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3718      	adds	r7, #24
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	460b      	mov	r3, r1
 800af02:	607a      	str	r2, [r7, #4]
 800af04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800af06:	7afb      	ldrb	r3, [r7, #11]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d16b      	bne.n	800afe4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	3314      	adds	r3, #20
 800af10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d156      	bne.n	800afca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	429a      	cmp	r2, r3
 800af26:	d914      	bls.n	800af52 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	689a      	ldr	r2, [r3, #8]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	1ad2      	subs	r2, r2, r3
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	461a      	mov	r2, r3
 800af3c:	6879      	ldr	r1, [r7, #4]
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f000 ff84 	bl	800be4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af44:	2300      	movs	r3, #0
 800af46:	2200      	movs	r2, #0
 800af48:	2100      	movs	r1, #0
 800af4a:	68f8      	ldr	r0, [r7, #12]
 800af4c:	f002 fd43 	bl	800d9d6 <USBD_LL_PrepareReceive>
 800af50:	e03b      	b.n	800afca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	68da      	ldr	r2, [r3, #12]
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d11c      	bne.n	800af98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800af66:	429a      	cmp	r2, r3
 800af68:	d316      	bcc.n	800af98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	685a      	ldr	r2, [r3, #4]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800af74:	429a      	cmp	r2, r3
 800af76:	d20f      	bcs.n	800af98 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800af78:	2200      	movs	r2, #0
 800af7a:	2100      	movs	r1, #0
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f000 ff65 	bl	800be4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af8a:	2300      	movs	r3, #0
 800af8c:	2200      	movs	r2, #0
 800af8e:	2100      	movs	r1, #0
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f002 fd20 	bl	800d9d6 <USBD_LL_PrepareReceive>
 800af96:	e018      	b.n	800afca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d10b      	bne.n	800afbc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d005      	beq.n	800afbc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800afbc:	2180      	movs	r1, #128	; 0x80
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f002 fc5f 	bl	800d882 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 ff93 	bl	800bef0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d122      	bne.n	800b01a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7ff fe98 	bl	800ad0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800afe2:	e01a      	b.n	800b01a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b03      	cmp	r3, #3
 800afee:	d114      	bne.n	800b01a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aff6:	695b      	ldr	r3, [r3, #20]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00e      	beq.n	800b01a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	7afa      	ldrb	r2, [r7, #11]
 800b006:	4611      	mov	r1, r2
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	4798      	blx	r3
 800b00c:	4603      	mov	r3, r0
 800b00e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b010:	7dfb      	ldrb	r3, [r7, #23]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	e000      	b.n	800b01c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3718      	adds	r7, #24
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2201      	movs	r2, #1
 800b030:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b054:	2303      	movs	r3, #3
 800b056:	e02f      	b.n	800b0b8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00f      	beq.n	800b082 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d009      	beq.n	800b082 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	6852      	ldr	r2, [r2, #4]
 800b07a:	b2d2      	uxtb	r2, r2
 800b07c:	4611      	mov	r1, r2
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b082:	2340      	movs	r3, #64	; 0x40
 800b084:	2200      	movs	r2, #0
 800b086:	2100      	movs	r1, #0
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f002 fb96 	bl	800d7ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2240      	movs	r2, #64	; 0x40
 800b09a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b09e:	2340      	movs	r3, #64	; 0x40
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2180      	movs	r1, #128	; 0x80
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f002 fb88 	bl	800d7ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2240      	movs	r2, #64	; 0x40
 800b0b4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	78fa      	ldrb	r2, [r7, #3]
 800b0d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ee:	b2da      	uxtb	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2204      	movs	r2, #4
 800b0fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d106      	bne.n	800b12e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b126:	b2da      	uxtb	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b14e:	2303      	movs	r3, #3
 800b150:	e012      	b.n	800b178 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d10b      	bne.n	800b176 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b164:	69db      	ldr	r3, [r3, #28]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d005      	beq.n	800b176 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b170:	69db      	ldr	r3, [r3, #28]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b196:	2303      	movs	r3, #3
 800b198:	e014      	b.n	800b1c4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	d10d      	bne.n	800b1c2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ac:	6a1b      	ldr	r3, [r3, #32]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d007      	beq.n	800b1c2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b8:	6a1b      	ldr	r3, [r3, #32]
 800b1ba:	78fa      	ldrb	r2, [r7, #3]
 800b1bc:	4611      	mov	r1, r2
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e014      	b.n	800b210 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d10d      	bne.n	800b20e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d007      	beq.n	800b20e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	4611      	mov	r1, r2
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3708      	adds	r7, #8
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b082      	sub	sp, #8
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b244:	2b00      	cmp	r3, #0
 800b246:	d009      	beq.n	800b25c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	6852      	ldr	r2, [r2, #4]
 800b254:	b2d2      	uxtb	r2, r2
 800b256:	4611      	mov	r1, r2
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	4798      	blx	r3
  }

  return USBD_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b266:	b480      	push	{r7}
 800b268:	b087      	sub	sp, #28
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	3301      	adds	r3, #1
 800b27c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b284:	8a3b      	ldrh	r3, [r7, #16]
 800b286:	021b      	lsls	r3, r3, #8
 800b288:	b21a      	sxth	r2, r3
 800b28a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b28e:	4313      	orrs	r3, r2
 800b290:	b21b      	sxth	r3, r3
 800b292:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b294:	89fb      	ldrh	r3, [r7, #14]
}
 800b296:	4618      	mov	r0, r3
 800b298:	371c      	adds	r7, #28
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
	...

0800b2a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2ba:	2b40      	cmp	r3, #64	; 0x40
 800b2bc:	d005      	beq.n	800b2ca <USBD_StdDevReq+0x26>
 800b2be:	2b40      	cmp	r3, #64	; 0x40
 800b2c0:	d853      	bhi.n	800b36a <USBD_StdDevReq+0xc6>
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00b      	beq.n	800b2de <USBD_StdDevReq+0x3a>
 800b2c6:	2b20      	cmp	r3, #32
 800b2c8:	d14f      	bne.n	800b36a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	4798      	blx	r3
 800b2d8:	4603      	mov	r3, r0
 800b2da:	73fb      	strb	r3, [r7, #15]
      break;
 800b2dc:	e04a      	b.n	800b374 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	785b      	ldrb	r3, [r3, #1]
 800b2e2:	2b09      	cmp	r3, #9
 800b2e4:	d83b      	bhi.n	800b35e <USBD_StdDevReq+0xba>
 800b2e6:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <USBD_StdDevReq+0x48>)
 800b2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ec:	0800b341 	.word	0x0800b341
 800b2f0:	0800b355 	.word	0x0800b355
 800b2f4:	0800b35f 	.word	0x0800b35f
 800b2f8:	0800b34b 	.word	0x0800b34b
 800b2fc:	0800b35f 	.word	0x0800b35f
 800b300:	0800b31f 	.word	0x0800b31f
 800b304:	0800b315 	.word	0x0800b315
 800b308:	0800b35f 	.word	0x0800b35f
 800b30c:	0800b337 	.word	0x0800b337
 800b310:	0800b329 	.word	0x0800b329
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f9de 	bl	800b6d8 <USBD_GetDescriptor>
          break;
 800b31c:	e024      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b31e:	6839      	ldr	r1, [r7, #0]
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 fb43 	bl	800b9ac <USBD_SetAddress>
          break;
 800b326:	e01f      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fb82 	bl	800ba34 <USBD_SetConfig>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]
          break;
 800b334:	e018      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b336:	6839      	ldr	r1, [r7, #0]
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fc21 	bl	800bb80 <USBD_GetConfig>
          break;
 800b33e:	e013      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fc52 	bl	800bbec <USBD_GetStatus>
          break;
 800b348:	e00e      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fc81 	bl	800bc54 <USBD_SetFeature>
          break;
 800b352:	e009      	b.n	800b368 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b354:	6839      	ldr	r1, [r7, #0]
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 fc90 	bl	800bc7c <USBD_ClrFeature>
          break;
 800b35c:	e004      	b.n	800b368 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fce7 	bl	800bd34 <USBD_CtlError>
          break;
 800b366:	bf00      	nop
      }
      break;
 800b368:	e004      	b.n	800b374 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 fce1 	bl	800bd34 <USBD_CtlError>
      break;
 800b372:	bf00      	nop
  }

  return ret;
 800b374:	7bfb      	ldrb	r3, [r7, #15]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop

0800b380 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b396:	2b40      	cmp	r3, #64	; 0x40
 800b398:	d005      	beq.n	800b3a6 <USBD_StdItfReq+0x26>
 800b39a:	2b40      	cmp	r3, #64	; 0x40
 800b39c:	d82f      	bhi.n	800b3fe <USBD_StdItfReq+0x7e>
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d001      	beq.n	800b3a6 <USBD_StdItfReq+0x26>
 800b3a2:	2b20      	cmp	r3, #32
 800b3a4:	d12b      	bne.n	800b3fe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d81d      	bhi.n	800b3f0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	889b      	ldrh	r3, [r3, #4]
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d813      	bhi.n	800b3e6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	4798      	blx	r3
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	88db      	ldrh	r3, [r3, #6]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d110      	bne.n	800b3fa <USBD_StdItfReq+0x7a>
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10d      	bne.n	800b3fa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fd73 	bl	800beca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3e4:	e009      	b.n	800b3fa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fca3 	bl	800bd34 <USBD_CtlError>
          break;
 800b3ee:	e004      	b.n	800b3fa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b3f0:	6839      	ldr	r1, [r7, #0]
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fc9e 	bl	800bd34 <USBD_CtlError>
          break;
 800b3f8:	e000      	b.n	800b3fc <USBD_StdItfReq+0x7c>
          break;
 800b3fa:	bf00      	nop
      }
      break;
 800b3fc:	e004      	b.n	800b408 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fc97 	bl	800bd34 <USBD_CtlError>
      break;
 800b406:	bf00      	nop
  }

  return ret;
 800b408:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b084      	sub	sp, #16
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	889b      	ldrh	r3, [r3, #4]
 800b424:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b42e:	2b40      	cmp	r3, #64	; 0x40
 800b430:	d007      	beq.n	800b442 <USBD_StdEPReq+0x30>
 800b432:	2b40      	cmp	r3, #64	; 0x40
 800b434:	f200 8145 	bhi.w	800b6c2 <USBD_StdEPReq+0x2b0>
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00c      	beq.n	800b456 <USBD_StdEPReq+0x44>
 800b43c:	2b20      	cmp	r3, #32
 800b43e:	f040 8140 	bne.w	800b6c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	4798      	blx	r3
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]
      break;
 800b454:	e13a      	b.n	800b6cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	785b      	ldrb	r3, [r3, #1]
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d007      	beq.n	800b46e <USBD_StdEPReq+0x5c>
 800b45e:	2b03      	cmp	r3, #3
 800b460:	f300 8129 	bgt.w	800b6b6 <USBD_StdEPReq+0x2a4>
 800b464:	2b00      	cmp	r3, #0
 800b466:	d07f      	beq.n	800b568 <USBD_StdEPReq+0x156>
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d03c      	beq.n	800b4e6 <USBD_StdEPReq+0xd4>
 800b46c:	e123      	b.n	800b6b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b474:	b2db      	uxtb	r3, r3
 800b476:	2b02      	cmp	r3, #2
 800b478:	d002      	beq.n	800b480 <USBD_StdEPReq+0x6e>
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d016      	beq.n	800b4ac <USBD_StdEPReq+0x9a>
 800b47e:	e02c      	b.n	800b4da <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00d      	beq.n	800b4a2 <USBD_StdEPReq+0x90>
 800b486:	7bbb      	ldrb	r3, [r7, #14]
 800b488:	2b80      	cmp	r3, #128	; 0x80
 800b48a:	d00a      	beq.n	800b4a2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b48c:	7bbb      	ldrb	r3, [r7, #14]
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f002 f9f6 	bl	800d882 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b496:	2180      	movs	r1, #128	; 0x80
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f002 f9f2 	bl	800d882 <USBD_LL_StallEP>
 800b49e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4a0:	e020      	b.n	800b4e4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fc45 	bl	800bd34 <USBD_CtlError>
              break;
 800b4aa:	e01b      	b.n	800b4e4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	885b      	ldrh	r3, [r3, #2]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10e      	bne.n	800b4d2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b4b4:	7bbb      	ldrb	r3, [r7, #14]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00b      	beq.n	800b4d2 <USBD_StdEPReq+0xc0>
 800b4ba:	7bbb      	ldrb	r3, [r7, #14]
 800b4bc:	2b80      	cmp	r3, #128	; 0x80
 800b4be:	d008      	beq.n	800b4d2 <USBD_StdEPReq+0xc0>
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	88db      	ldrh	r3, [r3, #6]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d104      	bne.n	800b4d2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f002 f9d8 	bl	800d882 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fcf9 	bl	800beca <USBD_CtlSendStatus>

              break;
 800b4d8:	e004      	b.n	800b4e4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fc29 	bl	800bd34 <USBD_CtlError>
              break;
 800b4e2:	bf00      	nop
          }
          break;
 800b4e4:	e0ec      	b.n	800b6c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d002      	beq.n	800b4f8 <USBD_StdEPReq+0xe6>
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d016      	beq.n	800b524 <USBD_StdEPReq+0x112>
 800b4f6:	e030      	b.n	800b55a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4f8:	7bbb      	ldrb	r3, [r7, #14]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00d      	beq.n	800b51a <USBD_StdEPReq+0x108>
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	2b80      	cmp	r3, #128	; 0x80
 800b502:	d00a      	beq.n	800b51a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b504:	7bbb      	ldrb	r3, [r7, #14]
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f002 f9ba 	bl	800d882 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b50e:	2180      	movs	r1, #128	; 0x80
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f002 f9b6 	bl	800d882 <USBD_LL_StallEP>
 800b516:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b518:	e025      	b.n	800b566 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fc09 	bl	800bd34 <USBD_CtlError>
              break;
 800b522:	e020      	b.n	800b566 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	885b      	ldrh	r3, [r3, #2]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d11b      	bne.n	800b564 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b52c:	7bbb      	ldrb	r3, [r7, #14]
 800b52e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b532:	2b00      	cmp	r3, #0
 800b534:	d004      	beq.n	800b540 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b536:	7bbb      	ldrb	r3, [r7, #14]
 800b538:	4619      	mov	r1, r3
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f002 f9c0 	bl	800d8c0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fcc2 	bl	800beca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	6839      	ldr	r1, [r7, #0]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	4798      	blx	r3
 800b554:	4603      	mov	r3, r0
 800b556:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b558:	e004      	b.n	800b564 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 fbe9 	bl	800bd34 <USBD_CtlError>
              break;
 800b562:	e000      	b.n	800b566 <USBD_StdEPReq+0x154>
              break;
 800b564:	bf00      	nop
          }
          break;
 800b566:	e0ab      	b.n	800b6c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	2b02      	cmp	r3, #2
 800b572:	d002      	beq.n	800b57a <USBD_StdEPReq+0x168>
 800b574:	2b03      	cmp	r3, #3
 800b576:	d032      	beq.n	800b5de <USBD_StdEPReq+0x1cc>
 800b578:	e097      	b.n	800b6aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b57a:	7bbb      	ldrb	r3, [r7, #14]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d007      	beq.n	800b590 <USBD_StdEPReq+0x17e>
 800b580:	7bbb      	ldrb	r3, [r7, #14]
 800b582:	2b80      	cmp	r3, #128	; 0x80
 800b584:	d004      	beq.n	800b590 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fbd3 	bl	800bd34 <USBD_CtlError>
                break;
 800b58e:	e091      	b.n	800b6b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b594:	2b00      	cmp	r3, #0
 800b596:	da0b      	bge.n	800b5b0 <USBD_StdEPReq+0x19e>
 800b598:	7bbb      	ldrb	r3, [r7, #14]
 800b59a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b59e:	4613      	mov	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	3310      	adds	r3, #16
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	e00b      	b.n	800b5c8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b5b0:	7bbb      	ldrb	r3, [r7, #14]
 800b5b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 fc1d 	bl	800be16 <USBD_CtlSendData>
              break;
 800b5dc:	e06a      	b.n	800b6b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	da11      	bge.n	800b60a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5e6:	7bbb      	ldrb	r3, [r7, #14]
 800b5e8:	f003 020f 	and.w	r2, r3, #15
 800b5ec:	6879      	ldr	r1, [r7, #4]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	440b      	add	r3, r1
 800b5f8:	3324      	adds	r3, #36	; 0x24
 800b5fa:	881b      	ldrh	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d117      	bne.n	800b630 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 fb96 	bl	800bd34 <USBD_CtlError>
                  break;
 800b608:	e054      	b.n	800b6b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b60a:	7bbb      	ldrb	r3, [r7, #14]
 800b60c:	f003 020f 	and.w	r2, r3, #15
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	4613      	mov	r3, r2
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	440b      	add	r3, r1
 800b61c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b620:	881b      	ldrh	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d104      	bne.n	800b630 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b626:	6839      	ldr	r1, [r7, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fb83 	bl	800bd34 <USBD_CtlError>
                  break;
 800b62e:	e041      	b.n	800b6b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b634:	2b00      	cmp	r3, #0
 800b636:	da0b      	bge.n	800b650 <USBD_StdEPReq+0x23e>
 800b638:	7bbb      	ldrb	r3, [r7, #14]
 800b63a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b63e:	4613      	mov	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	3310      	adds	r3, #16
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	4413      	add	r3, r2
 800b64c:	3304      	adds	r3, #4
 800b64e:	e00b      	b.n	800b668 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b650:	7bbb      	ldrb	r3, [r7, #14]
 800b652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b656:	4613      	mov	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	4413      	add	r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	4413      	add	r3, r2
 800b666:	3304      	adds	r3, #4
 800b668:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <USBD_StdEPReq+0x264>
 800b670:	7bbb      	ldrb	r3, [r7, #14]
 800b672:	2b80      	cmp	r3, #128	; 0x80
 800b674:	d103      	bne.n	800b67e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	2200      	movs	r2, #0
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	e00e      	b.n	800b69c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f002 f93b 	bl	800d8fe <USBD_LL_IsStallEP>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	2201      	movs	r2, #1
 800b692:	601a      	str	r2, [r3, #0]
 800b694:	e002      	b.n	800b69c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2200      	movs	r2, #0
 800b69a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fbb7 	bl	800be16 <USBD_CtlSendData>
              break;
 800b6a8:	e004      	b.n	800b6b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fb41 	bl	800bd34 <USBD_CtlError>
              break;
 800b6b2:	bf00      	nop
          }
          break;
 800b6b4:	e004      	b.n	800b6c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fb3b 	bl	800bd34 <USBD_CtlError>
          break;
 800b6be:	bf00      	nop
      }
      break;
 800b6c0:	e004      	b.n	800b6cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 fb35 	bl	800bd34 <USBD_CtlError>
      break;
 800b6ca:	bf00      	nop
  }

  return ret;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
	...

0800b6d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	885b      	ldrh	r3, [r3, #2]
 800b6f2:	0a1b      	lsrs	r3, r3, #8
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	2b06      	cmp	r3, #6
 800b6fa:	f200 8128 	bhi.w	800b94e <USBD_GetDescriptor+0x276>
 800b6fe:	a201      	add	r2, pc, #4	; (adr r2, 800b704 <USBD_GetDescriptor+0x2c>)
 800b700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b704:	0800b721 	.word	0x0800b721
 800b708:	0800b739 	.word	0x0800b739
 800b70c:	0800b779 	.word	0x0800b779
 800b710:	0800b94f 	.word	0x0800b94f
 800b714:	0800b94f 	.word	0x0800b94f
 800b718:	0800b8ef 	.word	0x0800b8ef
 800b71c:	0800b91b 	.word	0x0800b91b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	7c12      	ldrb	r2, [r2, #16]
 800b72c:	f107 0108 	add.w	r1, r7, #8
 800b730:	4610      	mov	r0, r2
 800b732:	4798      	blx	r3
 800b734:	60f8      	str	r0, [r7, #12]
      break;
 800b736:	e112      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	7c1b      	ldrb	r3, [r3, #16]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10d      	bne.n	800b75c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b748:	f107 0208 	add.w	r2, r7, #8
 800b74c:	4610      	mov	r0, r2
 800b74e:	4798      	blx	r3
 800b750:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3301      	adds	r3, #1
 800b756:	2202      	movs	r2, #2
 800b758:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b75a:	e100      	b.n	800b95e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b764:	f107 0208 	add.w	r2, r7, #8
 800b768:	4610      	mov	r0, r2
 800b76a:	4798      	blx	r3
 800b76c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3301      	adds	r3, #1
 800b772:	2202      	movs	r2, #2
 800b774:	701a      	strb	r2, [r3, #0]
      break;
 800b776:	e0f2      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	885b      	ldrh	r3, [r3, #2]
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b05      	cmp	r3, #5
 800b780:	f200 80ac 	bhi.w	800b8dc <USBD_GetDescriptor+0x204>
 800b784:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <USBD_GetDescriptor+0xb4>)
 800b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78a:	bf00      	nop
 800b78c:	0800b7a5 	.word	0x0800b7a5
 800b790:	0800b7d9 	.word	0x0800b7d9
 800b794:	0800b80d 	.word	0x0800b80d
 800b798:	0800b841 	.word	0x0800b841
 800b79c:	0800b875 	.word	0x0800b875
 800b7a0:	0800b8a9 	.word	0x0800b8a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00b      	beq.n	800b7c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	7c12      	ldrb	r2, [r2, #16]
 800b7bc:	f107 0108 	add.w	r1, r7, #8
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4798      	blx	r3
 800b7c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7c6:	e091      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7c8:	6839      	ldr	r1, [r7, #0]
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fab2 	bl	800bd34 <USBD_CtlError>
            err++;
 800b7d0:	7afb      	ldrb	r3, [r7, #11]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b7d6:	e089      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00b      	beq.n	800b7fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	7c12      	ldrb	r2, [r2, #16]
 800b7f0:	f107 0108 	add.w	r1, r7, #8
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	4798      	blx	r3
 800b7f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7fa:	e077      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fa98 	bl	800bd34 <USBD_CtlError>
            err++;
 800b804:	7afb      	ldrb	r3, [r7, #11]
 800b806:	3301      	adds	r3, #1
 800b808:	72fb      	strb	r3, [r7, #11]
          break;
 800b80a:	e06f      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00b      	beq.n	800b830 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	7c12      	ldrb	r2, [r2, #16]
 800b824:	f107 0108 	add.w	r1, r7, #8
 800b828:	4610      	mov	r0, r2
 800b82a:	4798      	blx	r3
 800b82c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b82e:	e05d      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fa7e 	bl	800bd34 <USBD_CtlError>
            err++;
 800b838:	7afb      	ldrb	r3, [r7, #11]
 800b83a:	3301      	adds	r3, #1
 800b83c:	72fb      	strb	r3, [r7, #11]
          break;
 800b83e:	e055      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00b      	beq.n	800b864 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	7c12      	ldrb	r2, [r2, #16]
 800b858:	f107 0108 	add.w	r1, r7, #8
 800b85c:	4610      	mov	r0, r2
 800b85e:	4798      	blx	r3
 800b860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b862:	e043      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fa64 	bl	800bd34 <USBD_CtlError>
            err++;
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	3301      	adds	r3, #1
 800b870:	72fb      	strb	r3, [r7, #11]
          break;
 800b872:	e03b      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b87a:	695b      	ldr	r3, [r3, #20]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00b      	beq.n	800b898 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b886:	695b      	ldr	r3, [r3, #20]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	7c12      	ldrb	r2, [r2, #16]
 800b88c:	f107 0108 	add.w	r1, r7, #8
 800b890:	4610      	mov	r0, r2
 800b892:	4798      	blx	r3
 800b894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b896:	e029      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b898:	6839      	ldr	r1, [r7, #0]
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 fa4a 	bl	800bd34 <USBD_CtlError>
            err++;
 800b8a0:	7afb      	ldrb	r3, [r7, #11]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8a6:	e021      	b.n	800b8ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00b      	beq.n	800b8cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	7c12      	ldrb	r2, [r2, #16]
 800b8c0:	f107 0108 	add.w	r1, r7, #8
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	4798      	blx	r3
 800b8c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8ca:	e00f      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fa30 	bl	800bd34 <USBD_CtlError>
            err++;
 800b8d4:	7afb      	ldrb	r3, [r7, #11]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b8da:	e007      	b.n	800b8ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b8dc:	6839      	ldr	r1, [r7, #0]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fa28 	bl	800bd34 <USBD_CtlError>
          err++;
 800b8e4:	7afb      	ldrb	r3, [r7, #11]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b8ea:	bf00      	nop
      }
      break;
 800b8ec:	e037      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7c1b      	ldrb	r3, [r3, #16]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d109      	bne.n	800b90a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8fe:	f107 0208 	add.w	r2, r7, #8
 800b902:	4610      	mov	r0, r2
 800b904:	4798      	blx	r3
 800b906:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b908:	e029      	b.n	800b95e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fa11 	bl	800bd34 <USBD_CtlError>
        err++;
 800b912:	7afb      	ldrb	r3, [r7, #11]
 800b914:	3301      	adds	r3, #1
 800b916:	72fb      	strb	r3, [r7, #11]
      break;
 800b918:	e021      	b.n	800b95e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	7c1b      	ldrb	r3, [r3, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10d      	bne.n	800b93e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b92a:	f107 0208 	add.w	r2, r7, #8
 800b92e:	4610      	mov	r0, r2
 800b930:	4798      	blx	r3
 800b932:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3301      	adds	r3, #1
 800b938:	2207      	movs	r2, #7
 800b93a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b93c:	e00f      	b.n	800b95e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f9f7 	bl	800bd34 <USBD_CtlError>
        err++;
 800b946:	7afb      	ldrb	r3, [r7, #11]
 800b948:	3301      	adds	r3, #1
 800b94a:	72fb      	strb	r3, [r7, #11]
      break;
 800b94c:	e007      	b.n	800b95e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f9ef 	bl	800bd34 <USBD_CtlError>
      err++;
 800b956:	7afb      	ldrb	r3, [r7, #11]
 800b958:	3301      	adds	r3, #1
 800b95a:	72fb      	strb	r3, [r7, #11]
      break;
 800b95c:	bf00      	nop
  }

  if (err != 0U)
 800b95e:	7afb      	ldrb	r3, [r7, #11]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d11e      	bne.n	800b9a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	88db      	ldrh	r3, [r3, #6]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d016      	beq.n	800b99a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b96c:	893b      	ldrh	r3, [r7, #8]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00e      	beq.n	800b990 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	88da      	ldrh	r2, [r3, #6]
 800b976:	893b      	ldrh	r3, [r7, #8]
 800b978:	4293      	cmp	r3, r2
 800b97a:	bf28      	it	cs
 800b97c:	4613      	movcs	r3, r2
 800b97e:	b29b      	uxth	r3, r3
 800b980:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b982:	893b      	ldrh	r3, [r7, #8]
 800b984:	461a      	mov	r2, r3
 800b986:	68f9      	ldr	r1, [r7, #12]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 fa44 	bl	800be16 <USBD_CtlSendData>
 800b98e:	e009      	b.n	800b9a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b990:	6839      	ldr	r1, [r7, #0]
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f9ce 	bl	800bd34 <USBD_CtlError>
 800b998:	e004      	b.n	800b9a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fa95 	bl	800beca <USBD_CtlSendStatus>
 800b9a0:	e000      	b.n	800b9a4 <USBD_GetDescriptor+0x2cc>
    return;
 800b9a2:	bf00      	nop
  }
}
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop

0800b9ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	889b      	ldrh	r3, [r3, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d131      	bne.n	800ba22 <USBD_SetAddress+0x76>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	88db      	ldrh	r3, [r3, #6]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d12d      	bne.n	800ba22 <USBD_SetAddress+0x76>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	885b      	ldrh	r3, [r3, #2]
 800b9ca:	2b7f      	cmp	r3, #127	; 0x7f
 800b9cc:	d829      	bhi.n	800ba22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	885b      	ldrh	r3, [r3, #2]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d104      	bne.n	800b9f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f9a3 	bl	800bd34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ee:	e01d      	b.n	800ba2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	7bfa      	ldrb	r2, [r7, #15]
 800b9f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f001 ffaa 	bl	800d956 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fa61 	bl	800beca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d004      	beq.n	800ba18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2202      	movs	r2, #2
 800ba12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba16:	e009      	b.n	800ba2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba20:	e004      	b.n	800ba2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 f985 	bl	800bd34 <USBD_CtlError>
  }
}
 800ba2a:	bf00      	nop
 800ba2c:	bf00      	nop
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	885b      	ldrh	r3, [r3, #2]
 800ba46:	b2da      	uxtb	r2, r3
 800ba48:	4b4c      	ldr	r3, [pc, #304]	; (800bb7c <USBD_SetConfig+0x148>)
 800ba4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba4c:	4b4b      	ldr	r3, [pc, #300]	; (800bb7c <USBD_SetConfig+0x148>)
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d905      	bls.n	800ba60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f96c 	bl	800bd34 <USBD_CtlError>
    return USBD_FAIL;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e088      	b.n	800bb72 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d002      	beq.n	800ba72 <USBD_SetConfig+0x3e>
 800ba6c:	2b03      	cmp	r3, #3
 800ba6e:	d025      	beq.n	800babc <USBD_SetConfig+0x88>
 800ba70:	e071      	b.n	800bb56 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ba72:	4b42      	ldr	r3, [pc, #264]	; (800bb7c <USBD_SetConfig+0x148>)
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d01c      	beq.n	800bab4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ba7a:	4b40      	ldr	r3, [pc, #256]	; (800bb7c <USBD_SetConfig+0x148>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ba84:	4b3d      	ldr	r3, [pc, #244]	; (800bb7c <USBD_SetConfig+0x148>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7ff f948 	bl	800ad20 <USBD_SetClassConfig>
 800ba90:	4603      	mov	r3, r0
 800ba92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d004      	beq.n	800baa4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f949 	bl	800bd34 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800baa2:	e065      	b.n	800bb70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fa10 	bl	800beca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2203      	movs	r2, #3
 800baae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bab2:	e05d      	b.n	800bb70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fa08 	bl	800beca <USBD_CtlSendStatus>
      break;
 800baba:	e059      	b.n	800bb70 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800babc:	4b2f      	ldr	r3, [pc, #188]	; (800bb7c <USBD_SetConfig+0x148>)
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d112      	bne.n	800baea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2202      	movs	r2, #2
 800bac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bacc:	4b2b      	ldr	r3, [pc, #172]	; (800bb7c <USBD_SetConfig+0x148>)
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	461a      	mov	r2, r3
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bad6:	4b29      	ldr	r3, [pc, #164]	; (800bb7c <USBD_SetConfig+0x148>)
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	4619      	mov	r1, r3
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7ff f93b 	bl	800ad58 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 f9f1 	bl	800beca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bae8:	e042      	b.n	800bb70 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800baea:	4b24      	ldr	r3, [pc, #144]	; (800bb7c <USBD_SetConfig+0x148>)
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d02a      	beq.n	800bb4e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	4619      	mov	r1, r3
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7ff f929 	bl	800ad58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb06:	4b1d      	ldr	r3, [pc, #116]	; (800bb7c <USBD_SetConfig+0x148>)
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb10:	4b1a      	ldr	r3, [pc, #104]	; (800bb7c <USBD_SetConfig+0x148>)
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	4619      	mov	r1, r3
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7ff f902 	bl	800ad20 <USBD_SetClassConfig>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00f      	beq.n	800bb46 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bb26:	6839      	ldr	r1, [r7, #0]
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 f903 	bl	800bd34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	4619      	mov	r1, r3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7ff f90e 	bl	800ad58 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2202      	movs	r2, #2
 800bb40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bb44:	e014      	b.n	800bb70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f9bf 	bl	800beca <USBD_CtlSendStatus>
      break;
 800bb4c:	e010      	b.n	800bb70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f9bb 	bl	800beca <USBD_CtlSendStatus>
      break;
 800bb54:	e00c      	b.n	800bb70 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bb56:	6839      	ldr	r1, [r7, #0]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f8eb 	bl	800bd34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb5e:	4b07      	ldr	r3, [pc, #28]	; (800bb7c <USBD_SetConfig+0x148>)
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	4619      	mov	r1, r3
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7ff f8f7 	bl	800ad58 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb6e:	bf00      	nop
  }

  return ret;
 800bb70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	2000028e 	.word	0x2000028e

0800bb80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	88db      	ldrh	r3, [r3, #6]
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d004      	beq.n	800bb9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bb92:	6839      	ldr	r1, [r7, #0]
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f8cd 	bl	800bd34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bb9a:	e023      	b.n	800bbe4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	dc02      	bgt.n	800bbae <USBD_GetConfig+0x2e>
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	dc03      	bgt.n	800bbb4 <USBD_GetConfig+0x34>
 800bbac:	e015      	b.n	800bbda <USBD_GetConfig+0x5a>
 800bbae:	2b03      	cmp	r3, #3
 800bbb0:	d00b      	beq.n	800bbca <USBD_GetConfig+0x4a>
 800bbb2:	e012      	b.n	800bbda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	3308      	adds	r3, #8
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 f927 	bl	800be16 <USBD_CtlSendData>
        break;
 800bbc8:	e00c      	b.n	800bbe4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	3304      	adds	r3, #4
 800bbce:	2201      	movs	r2, #1
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 f91f 	bl	800be16 <USBD_CtlSendData>
        break;
 800bbd8:	e004      	b.n	800bbe4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bbda:	6839      	ldr	r1, [r7, #0]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 f8a9 	bl	800bd34 <USBD_CtlError>
        break;
 800bbe2:	bf00      	nop
}
 800bbe4:	bf00      	nop
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d81e      	bhi.n	800bc42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	88db      	ldrh	r3, [r3, #6]
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d004      	beq.n	800bc16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f890 	bl	800bd34 <USBD_CtlError>
        break;
 800bc14:	e01a      	b.n	800bc4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d005      	beq.n	800bc32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	f043 0202 	orr.w	r2, r3, #2
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	330c      	adds	r3, #12
 800bc36:	2202      	movs	r2, #2
 800bc38:	4619      	mov	r1, r3
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 f8eb 	bl	800be16 <USBD_CtlSendData>
      break;
 800bc40:	e004      	b.n	800bc4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f875 	bl	800bd34 <USBD_CtlError>
      break;
 800bc4a:	bf00      	nop
  }
}
 800bc4c:	bf00      	nop
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	885b      	ldrh	r3, [r3, #2]
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d106      	bne.n	800bc74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 f92b 	bl	800beca <USBD_CtlSendStatus>
  }
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d80b      	bhi.n	800bcac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	885b      	ldrh	r3, [r3, #2]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d10c      	bne.n	800bcb6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 f910 	bl	800beca <USBD_CtlSendStatus>
      }
      break;
 800bcaa:	e004      	b.n	800bcb6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 f840 	bl	800bd34 <USBD_CtlError>
      break;
 800bcb4:	e000      	b.n	800bcb8 <USBD_ClrFeature+0x3c>
      break;
 800bcb6:	bf00      	nop
  }
}
 800bcb8:	bf00      	nop
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	781a      	ldrb	r2, [r3, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	781a      	ldrb	r2, [r3, #0]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3301      	adds	r3, #1
 800bce8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f7ff fabb 	bl	800b266 <SWAPBYTE>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	3301      	adds	r3, #1
 800bd02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f7ff faae 	bl	800b266 <SWAPBYTE>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3301      	adds	r3, #1
 800bd16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f7ff faa1 	bl	800b266 <SWAPBYTE>
 800bd24:	4603      	mov	r3, r0
 800bd26:	461a      	mov	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	80da      	strh	r2, [r3, #6]
}
 800bd2c:	bf00      	nop
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd3e:	2180      	movs	r1, #128	; 0x80
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f001 fd9e 	bl	800d882 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bd46:	2100      	movs	r1, #0
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f001 fd9a 	bl	800d882 <USBD_LL_StallEP>
}
 800bd4e:	bf00      	nop
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b086      	sub	sp, #24
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	60f8      	str	r0, [r7, #12]
 800bd5e:	60b9      	str	r1, [r7, #8]
 800bd60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd62:	2300      	movs	r3, #0
 800bd64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d036      	beq.n	800bdda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bd70:	6938      	ldr	r0, [r7, #16]
 800bd72:	f000 f836 	bl	800bde2 <USBD_GetLen>
 800bd76:	4603      	mov	r3, r0
 800bd78:	3301      	adds	r3, #1
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	005b      	lsls	r3, r3, #1
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bd84:	7dfb      	ldrb	r3, [r7, #23]
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	4413      	add	r3, r2
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	7812      	ldrb	r2, [r2, #0]
 800bd8e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bd90:	7dfb      	ldrb	r3, [r7, #23]
 800bd92:	3301      	adds	r3, #1
 800bd94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	68ba      	ldr	r2, [r7, #8]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	2203      	movs	r2, #3
 800bd9e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
 800bda2:	3301      	adds	r3, #1
 800bda4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bda6:	e013      	b.n	800bdd0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bda8:	7dfb      	ldrb	r3, [r7, #23]
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	4413      	add	r3, r2
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	7812      	ldrb	r2, [r2, #0]
 800bdb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	613b      	str	r3, [r7, #16]
    idx++;
 800bdba:	7dfb      	ldrb	r3, [r7, #23]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bdc0:	7dfb      	ldrb	r3, [r7, #23]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	701a      	strb	r2, [r3, #0]
    idx++;
 800bdca:	7dfb      	ldrb	r3, [r7, #23]
 800bdcc:	3301      	adds	r3, #1
 800bdce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d1e7      	bne.n	800bda8 <USBD_GetString+0x52>
 800bdd8:	e000      	b.n	800bddc <USBD_GetString+0x86>
    return;
 800bdda:	bf00      	nop
  }
}
 800bddc:	3718      	adds	r7, #24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}

0800bde2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bde2:	b480      	push	{r7}
 800bde4:	b085      	sub	sp, #20
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bdea:	2300      	movs	r3, #0
 800bdec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bdf2:	e005      	b.n	800be00 <USBD_GetLen+0x1e>
  {
    len++;
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1f5      	bne.n	800bdf4 <USBD_GetLen+0x12>
  }

  return len;
 800be08:	7bfb      	ldrb	r3, [r7, #15]
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3714      	adds	r7, #20
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b084      	sub	sp, #16
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	60f8      	str	r0, [r7, #12]
 800be1e:	60b9      	str	r1, [r7, #8]
 800be20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2202      	movs	r2, #2
 800be26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	68ba      	ldr	r2, [r7, #8]
 800be3a:	2100      	movs	r1, #0
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f001 fda9 	bl	800d994 <USBD_LL_Transmit>

  return USBD_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	2100      	movs	r1, #0
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f001 fd98 	bl	800d994 <USBD_LL_Transmit>

  return USBD_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b084      	sub	sp, #16
 800be72:	af00      	add	r7, sp, #0
 800be74:	60f8      	str	r0, [r7, #12]
 800be76:	60b9      	str	r1, [r7, #8]
 800be78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2203      	movs	r2, #3
 800be7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	2100      	movs	r1, #0
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f001 fd9c 	bl	800d9d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3710      	adds	r7, #16
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	2100      	movs	r1, #0
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f001 fd8b 	bl	800d9d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b082      	sub	sp, #8
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2204      	movs	r2, #4
 800bed6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800beda:	2300      	movs	r3, #0
 800bedc:	2200      	movs	r2, #0
 800bede:	2100      	movs	r1, #0
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f001 fd57 	bl	800d994 <USBD_LL_Transmit>

  return USBD_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3708      	adds	r7, #8
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2205      	movs	r2, #5
 800befc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf00:	2300      	movs	r3, #0
 800bf02:	2200      	movs	r2, #0
 800bf04:	2100      	movs	r1, #0
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f001 fd65 	bl	800d9d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <USB_AudioStreamingOutputInit>:
  * @retval 0 if error
  */
 int8_t  USB_AudioStreamingOutputInit(USBD_AUDIO_EP_DataTypeDef* data_ep,
                                         AUDIO_Description_t* audio_desc,
                                         AUDIO_Session_t* session_handle,  uint32_t node_handle)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	603b      	str	r3, [r7, #0]
  AUDIO_USBInputOutputNode_t * output_node;
  output_node=(AUDIO_USBInputOutputNode_t *)node_handle;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	617b      	str	r3, [r7, #20]
  
  output_node->node.audio_description = audio_desc;
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	605a      	str	r2, [r3, #4]
  output_node->node.session_handle = session_handle;
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	60da      	str	r2, [r3, #12]
  output_node->node.state = AUDIO_NODE_INITIALIZED;
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	701a      	strb	r2, [r3, #0]
  output_node->node.type = AUDIO_OUTPUT;
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	721a      	strb	r2, [r3, #8]
#if  USE_AUDIO_RECORDING_USB_NO_REMOVE
  output_node->max_packet_length = AUDIO_MAX_PACKET_WITH_FEEDBACK_LENGTH(audio_desc);
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800bf4a:	4a34      	ldr	r2, [pc, #208]	; (800c01c <USB_AudioStreamingOutputInit+0x104>)
 800bf4c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf50:	099b      	lsrs	r3, r3, #6
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	791b      	ldrb	r3, [r3, #4]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	fb12 f303 	smulbb	r3, r2, r3
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	7c5b      	ldrb	r3, [r3, #17]
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	fb12 f303 	smulbb	r3, r2, r3
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	839a      	strh	r2, [r3, #28]
#else /*USE_AUDIO_RECORDING_USB_NO_REMOVE */
  output_node->max_packet_length = AUDIO_USB_MAX_PACKET_SIZE_FROM_AUD_DESC(audio_desc);
#endif /*USE_AUDIO_RECORDING_USB_NO_REMOVE*/
  output_node->packet_length = AUDIO_USB_PACKET_SIZE_FROM_AUD_DESC(audio_desc);
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a29      	ldr	r2, [pc, #164]	; (800c01c <USB_AudioStreamingOutputInit+0x104>)
 800bf76:	fba2 2303 	umull	r2, r3, r2, r3
 800bf7a:	099b      	lsrs	r3, r3, #6
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	791b      	ldrb	r3, [r3, #4]
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	fb12 f303 	smulbb	r3, r2, r3
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	7c5b      	ldrb	r3, [r3, #17]
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	fb12 f303 	smulbb	r3, r2, r3
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	83da      	strh	r2, [r3, #30]
  /* allocate and initialize the alternative buffer.It is filled with zero and it is sent to USB host  when no enough data are ready.*/
  output_node->specific.output.alt_buff = (uint8_t *) malloc(output_node->max_packet_length);
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	8b9b      	ldrh	r3, [r3, #28]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f001 fdbc 	bl	800db1c <malloc>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	631a      	str	r2, [r3, #48]	; 0x30
  if(output_node->specific.output.alt_buff)
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d008      	beq.n	800bfc6 <USB_AudioStreamingOutputInit+0xae>
  {
    memset(output_node->specific.output.alt_buff, 0, output_node->max_packet_length);
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	8b9b      	ldrh	r3, [r3, #28]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	f001 fdca 	bl	800db58 <memset>
 800bfc4:	e001      	b.n	800bfca <USB_AudioStreamingOutputInit+0xb2>
  }
  else
  {
    Error_Handler();
 800bfc6:	f7f4 fb95 	bl	80006f4 <Error_Handler>
  }
  output_node->IODeInit = USB_AudioStreamingInputOutputDeInit;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	4a14      	ldr	r2, [pc, #80]	; (800c020 <USB_AudioStreamingOutputInit+0x108>)
 800bfce:	621a      	str	r2, [r3, #32]
  output_node->IOStart = USB_AudioStreamingInputOutputStart;
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	4a14      	ldr	r2, [pc, #80]	; (800c024 <USB_AudioStreamingOutputInit+0x10c>)
 800bfd4:	625a      	str	r2, [r3, #36]	; 0x24
  output_node->IOStop = USB_AudioStreamingInputOutputStop;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	4a13      	ldr	r2, [pc, #76]	; (800c028 <USB_AudioStreamingOutputInit+0x110>)
 800bfda:	62da      	str	r2, [r3, #44]	; 0x2c
  output_node->IORestart = USB_AudioStreamingInputOutputRestart;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	4a13      	ldr	r2, [pc, #76]	; (800c02c <USB_AudioStreamingOutputInit+0x114>)
 800bfe0:	629a      	str	r2, [r3, #40]	; 0x28
  /* set data end point callbacks */
  data_ep->ep_num = USB_AUDIO_CONFIG_RECORD_EP_IN;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2281      	movs	r2, #129	; 0x81
 800bfe6:	701a      	strb	r2, [r3, #0]
  data_ep->control_name_map = 0;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	805a      	strh	r2, [r3, #2]
  data_ep->control_selector_map = 0;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	809a      	strh	r2, [r3, #4]
  data_ep->private_data = node_handle;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	621a      	str	r2, [r3, #32]
  data_ep->DataReceived = 0;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	611a      	str	r2, [r3, #16]
  data_ep->GetBuffer = USB_AudioStreamingOutputGetBuffer;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	4a0b      	ldr	r2, [pc, #44]	; (800c030 <USB_AudioStreamingOutputInit+0x118>)
 800c004:	615a      	str	r2, [r3, #20]
  data_ep->GetMaxPacketLength = USB_AudioStreamingInputOutputGetMaxPacketLength;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	4a0a      	ldr	r2, [pc, #40]	; (800c034 <USB_AudioStreamingOutputInit+0x11c>)
 800c00a:	619a      	str	r2, [r3, #24]
#if USE_USB_AUDIO_CLASS_10
  data_ep->GetState = USB_AudioStreamingInputOutputGetState;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4a0a      	ldr	r2, [pc, #40]	; (800c038 <USB_AudioStreamingOutputInit+0x120>)
 800c010:	61da      	str	r2, [r3, #28]
  data_ep->control_cbk.MaxFrequency = USB_AUDIO_CONFIG_RECORD_FREQENCIES[0];
  data_ep->control_cbk.MinFrequency = USB_AUDIO_CONFIG_RECORD_FREQENCIES[USB_AUDIO_CONFIG_RECORD_FREQ_COUNT-1];
  data_ep->control_cbk.ResFrequency = 1; 
#endif /* USE_AUDIO_USB_RECORD_MULTI_FREQUENCIES */
#endif /* USE_USB_AUDIO_CLASS_10 */
  return 0;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	10624dd3 	.word	0x10624dd3
 800c020:	0800c03d 	.word	0x0800c03d
 800c024:	0800c059 	.word	0x0800c059
 800c028:	0800c0b9 	.word	0x0800c0b9
 800c02c:	0800c0d9 	.word	0x0800c0d9
 800c030:	0800c105 	.word	0x0800c105
 800c034:	0800c2b9 	.word	0x0800c2b9
 800c038:	0800c2d1 	.word	0x0800c2d1

0800c03c <USB_AudioStreamingInputOutputDeInit>:
  *         De-Initializes the AUDIO usb input node
  * @param  node_handle(IN): the node handle, node must be allocated
  * @retval  0 for no error
  */
 static int8_t  USB_AudioStreamingInputOutputDeInit(uint32_t node_handle)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  ((AUDIO_USBInputOutputNode_t *)node_handle)->node.state = AUDIO_NODE_OFF;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	701a      	strb	r2, [r3, #0]
  return 0;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <USB_AudioStreamingInputOutputStart>:
  *                             Then when threshold is reached an event is raised to the session and buffer read is unlocked 
  * @param  node_handle(IN):        the node handle, node must be already initialized
  * @retval 0 if no error
  */
static int8_t  USB_AudioStreamingInputOutputStart( AUDIO_CircularBuffer_t* buffer, uint16_t threshold ,uint32_t node_handle)
{
 800c058:	b480      	push	{r7}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	460b      	mov	r3, r1
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	817b      	strh	r3, [r7, #10]
  AUDIO_USBInputOutputNode_t * io_node;

  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	617b      	str	r3, [r7, #20]
  if((io_node->node.state == AUDIO_NODE_INITIALIZED ) ||(io_node->node.state == AUDIO_NODE_STOPPED))
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d003      	beq.n	800c07a <USB_AudioStreamingInputOutputStart+0x22>
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	2b03      	cmp	r3, #3
 800c078:	d117      	bne.n	800c0aa <USB_AudioStreamingInputOutputStart+0x52>
  {
     io_node->node.state = AUDIO_NODE_STARTED;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	2202      	movs	r2, #2
 800c07e:	701a      	strb	r2, [r3, #0]
     io_node->buf = buffer;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	619a      	str	r2, [r3, #24]
     io_node->buf->rd_ptr = io_node->buf->wr_ptr=0;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	2200      	movs	r2, #0
 800c08c:	80da      	strh	r2, [r3, #6]
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	6992      	ldr	r2, [r2, #24]
 800c092:	88db      	ldrh	r3, [r3, #6]
 800c094:	8093      	strh	r3, [r2, #4]
     io_node->flags = 0;
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	2200      	movs	r2, #0
 800c09a:	751a      	strb	r2, [r3, #20]
     if(io_node->node.type == AUDIO_INPUT)
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	7a1b      	ldrb	r3, [r3, #8]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d102      	bne.n	800c0aa <USB_AudioStreamingInputOutputStart+0x52>
     {
       io_node->specific.input.threshold = threshold;
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	897a      	ldrh	r2, [r7, #10]
 800c0a8:	861a      	strh	r2, [r3, #48]	; 0x30
         io_node->specific.output.packet_44_counter = 0;
       }
#endif /* USB_AUDIO_CONFIG_RECORD_USE_FREQ_44_1_K */
     }
  }
  return 0;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	371c      	adds	r7, #28
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <USB_AudioStreamingInputOutputStop>:
  *         Stops Usb input or output node
  * @param  node_handle: the node handle, node must be initialized
  * @retval  0 for no error
  */
static int8_t  USB_AudioStreamingInputOutputStop( uint32_t node_handle)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  AUDIO_USBInputOutputNode_t * io_node;
  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	60fb      	str	r3, [r7, #12]
  io_node->node.state = AUDIO_NODE_STOPPED;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2203      	movs	r2, #3
 800c0c8:	701a      	strb	r2, [r3, #0]
  return 0;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <USB_AudioStreamingInputOutputRestart>:
  *         Called when the node restart is required, for example after frequency change
  * @param  node_handle(IN): 
  * @retval  0 for no error
  */
static int8_t  USB_AudioStreamingInputOutputRestart( uint32_t node_handle)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  AUDIO_USBInputOutputNode_t * io_node;
  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	60fb      	str	r3, [r7, #12]
  if(io_node->node.state == AUDIO_NODE_STARTED)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d104      	bne.n	800c0f6 <USB_AudioStreamingInputOutputRestart+0x1e>
  {
    io_node->flags = AUDIO_IO_RESTART_REQUIRED;   /* this flag to stop node when next time USB Audio class calls the node via callback*/
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2240      	movs	r2, #64	; 0x40
 800c0f0:	751a      	strb	r2, [r3, #20]
    return 0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	e000      	b.n	800c0f8 <USB_AudioStreamingInputOutputRestart+0x20>
  }
  return 0;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3714      	adds	r7, #20
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <USB_AudioStreamingOutputGetBuffer>:
  * @param  node_handle(IN):        the output node handle, node must be initialized and started
  * @param  packet_length(OUT):      max data length to send         
  * @retval  0 if no error     
  */
static uint8_t* USB_AudioStreamingOutputGetBuffer(uint32_t node_handle,uint16_t* packet_length)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
   uint8_t* packet_data;
#if USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO 
   int8_t sample_add_remove;
#endif /* USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO */

   output_node = (AUDIO_USBInputOutputNode_t *)node_handle;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	617b      	str	r3, [r7, #20]

   if(output_node->node.state == AUDIO_NODE_STARTED)
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b02      	cmp	r3, #2
 800c118:	f040 80c7 	bne.w	800c2aa <USB_AudioStreamingOutputGetBuffer+0x1a6>
   {
     if(output_node->flags&AUDIO_IO_RESTART_REQUIRED)
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	7d1b      	ldrb	r3, [r3, #20]
 800c120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c124:	2b00      	cmp	r3, #0
 800c126:	d009      	beq.n	800c13c <USB_AudioStreamingOutputGetBuffer+0x38>
     {
     /* a restart is required then just reinitialize buffer  and use the alt buffer as no samples are ready*/
       output_node->flags = 0;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	2200      	movs	r2, #0
 800c12c:	751a      	strb	r2, [r3, #20]
       output_node->buf->rd_ptr = 0;
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	699b      	ldr	r3, [r3, #24]
 800c132:	2200      	movs	r2, #0
 800c134:	809a      	strh	r2, [r3, #4]
      if(output_node->node.audio_description->frequency == USB_AUDIO_CONFIG_FREQ_44_1_K)
      {
        output_node->specific.output.packet_44_counter = 0;
      }
#endif /* USB_AUDIO_CONFIG_RECORD_USE_FREQ_44_1_K */
       return output_node->specific.output.alt_buff;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c13a:	e0b9      	b.n	800c2b0 <USB_AudioStreamingOutputGetBuffer+0x1ac>
     }
#if USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO 
      output_node->node.session_handle->SessionCallback(AUDIO_PACKET_PLAYED, (AUDIO_Node_t*)output_node,
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	697a      	ldr	r2, [r7, #20]
 800c144:	68d2      	ldr	r2, [r2, #12]
 800c146:	6979      	ldr	r1, [r7, #20]
 800c148:	2003      	movs	r0, #3
 800c14a:	4798      	blx	r3
    else
    {
      *packet_length = output_node->packet_length;
    }
#else /* USB_AUDIO_CONFIG_RECORD_USE_FREQ_44_1_K */
    *packet_length = output_node->packet_length;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	8bda      	ldrh	r2, [r3, #30]
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	801a      	strh	r2, [r3, #0]
#endif /* USB_AUDIO_CONFIG_RECORD_USE_FREQ_44_1_K */
    
     buf = output_node->buf;
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	699b      	ldr	r3, [r3, #24]
 800c158:	613b      	str	r3, [r7, #16]
      /* @TODO add underrun detection */
     if(!(output_node->flags&AUDIO_IO_BEGIN_OF_STREAM))
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	7d1b      	ldrb	r3, [r3, #20]
 800c15e:	f003 0301 	and.w	r3, r3, #1
 800c162:	2b00      	cmp	r3, #0
 800c164:	d119      	bne.n	800c19a <USB_AudioStreamingOutputGetBuffer+0x96>
     { 
     if(buf->wr_ptr < (buf->size>>1)) /* first threshold is a half of buffer */
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	88da      	ldrh	r2, [r3, #6]
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	891b      	ldrh	r3, [r3, #8]
 800c16e:	085b      	lsrs	r3, r3, #1
 800c170:	b29b      	uxth	r3, r3
 800c172:	429a      	cmp	r2, r3
 800c174:	d202      	bcs.n	800c17c <USB_AudioStreamingOutputGetBuffer+0x78>
      {
        /* buffer is not ready  */
        return output_node->specific.output.alt_buff;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17a:	e099      	b.n	800c2b0 <USB_AudioStreamingOutputGetBuffer+0x1ac>
      }
       output_node->node.session_handle->SessionCallback(AUDIO_BEGIN_OF_STREAM, (AUDIO_Node_t*)output_node,
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	697a      	ldr	r2, [r7, #20]
 800c184:	68d2      	ldr	r2, [r2, #12]
 800c186:	6979      	ldr	r1, [r7, #20]
 800c188:	2001      	movs	r0, #1
 800c18a:	4798      	blx	r3
                                                        output_node->node.session_handle);
       output_node->flags |= AUDIO_IO_BEGIN_OF_STREAM;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	7d1b      	ldrb	r3, [r3, #20]
 800c190:	f043 0301 	orr.w	r3, r3, #1
 800c194:	b2da      	uxtb	r2, r3
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	751a      	strb	r2, [r3, #20]
     }
       /* Check for underrun */
      buffer_data_count = AUDIO_BUFFER_FILLED_SIZE(buf);       
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	88da      	ldrh	r2, [r3, #6]
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	889b      	ldrh	r3, [r3, #4]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d306      	bcc.n	800c1b4 <USB_AudioStreamingOutputGetBuffer+0xb0>
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	88da      	ldrh	r2, [r3, #6]
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	889b      	ldrh	r3, [r3, #4]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	e009      	b.n	800c1c8 <USB_AudioStreamingOutputGetBuffer+0xc4>
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	88da      	ldrh	r2, [r3, #6]
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	891b      	ldrh	r3, [r3, #8]
 800c1bc:	4413      	add	r3, r2
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	889b      	ldrh	r3, [r3, #4]
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	81fb      	strh	r3, [r7, #14]
      if(buffer_data_count < *packet_length)
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	89fa      	ldrh	r2, [r7, #14]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d20a      	bcs.n	800c1ea <USB_AudioStreamingOutputGetBuffer+0xe6>
      {
       output_node->node.session_handle->SessionCallback(AUDIO_UNDERRUN, (AUDIO_Node_t*)output_node,
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	68d2      	ldr	r2, [r2, #12]
 800c1de:	6979      	ldr	r1, [r7, #20]
 800c1e0:	2005      	movs	r0, #5
 800c1e2:	4798      	blx	r3
                                                        output_node->node.session_handle);
        return output_node->specific.output.alt_buff;
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e8:	e062      	b.n	800c2b0 <USB_AudioStreamingOutputGetBuffer+0x1ac>
      }
      else
      {
#if USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO
      sample_add_remove = USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt(output_node->node.session_handle);
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	68db      	ldr	r3, [r3, #12]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 ff18 	bl	800d024 <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	737b      	strb	r3, [r7, #13]
#if  USE_AUDIO_RECORDING_USB_NO_REMOVE
      *packet_length += sample_add_remove;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	881a      	ldrh	r2, [r3, #0]
 800c1fc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c200:	b29b      	uxth	r3, r3
 800c202:	4413      	add	r3, r2
 800c204:	b29a      	uxth	r2, r3
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	801a      	strh	r2, [r3, #0]
      if(*packet_length > output_node->max_packet_length)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	881a      	ldrh	r2, [r3, #0]
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	8b9b      	ldrh	r3, [r3, #28]
 800c212:	429a      	cmp	r2, r3
 800c214:	d903      	bls.n	800c21e <USB_AudioStreamingOutputGetBuffer+0x11a>
      {
        *packet_length = output_node->max_packet_length;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	8b9a      	ldrh	r2, [r3, #28]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	801a      	strh	r2, [r3, #0]
      }
      USB_AudioRecordingSynchronizationNotificationSamplesRead(output_node->node.session_handle, *packet_length);
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	68da      	ldr	r2, [r3, #12]
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	881b      	ldrh	r3, [r3, #0]
 800c226:	4619      	mov	r1, r3
 800c228:	4610      	mov	r0, r2
 800c22a:	f000 ff13 	bl	800d054 <USB_AudioRecordingSynchronizationNotificationSamplesRead>
        }
        USB_AudioRecordingSynchronizationNotificationSamplesRead(output_node->node.session_handle, *packet_length+sample_add_remove);
#endif /*USE_AUDIO_RECORDING_USB_NO_REMOVE*/
#endif /* USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO */
         /* increment read pointer */
        packet_data = buf->data + buf->rd_ptr;
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	693a      	ldr	r2, [r7, #16]
 800c234:	8892      	ldrh	r2, [r2, #4]
 800c236:	4413      	add	r3, r2
 800c238:	60bb      	str	r3, [r7, #8]
        buf->rd_ptr += *packet_length;
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	889a      	ldrh	r2, [r3, #4]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	881b      	ldrh	r3, [r3, #0]
 800c242:	4413      	add	r3, r2
 800c244:	b29a      	uxth	r2, r3
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	809a      	strh	r2, [r3, #4]
        
        /* manage the packet not aligned */
        if(buf->rd_ptr > buf->size)
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	889a      	ldrh	r2, [r3, #4]
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	891b      	ldrh	r3, [r3, #8]
 800c252:	429a      	cmp	r2, r3
 800c254:	d91e      	bls.n	800c294 <USB_AudioStreamingOutputGetBuffer+0x190>
        {
          buf->rd_ptr -= buf->size;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	889a      	ldrh	r2, [r3, #4]
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	891b      	ldrh	r3, [r3, #8]
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	b29a      	uxth	r2, r3
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	809a      	strh	r2, [r3, #4]
          memcpy(buf->data+buf->size, buf->data, buf->rd_ptr);
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	693a      	ldr	r2, [r7, #16]
 800c26c:	8912      	ldrh	r2, [r2, #8]
 800c26e:	1898      	adds	r0, r3, r2
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	6819      	ldr	r1, [r3, #0]
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	889b      	ldrh	r3, [r3, #4]
 800c278:	461a      	mov	r2, r3
 800c27a:	f001 fc5f 	bl	800db3c <memcpy>
          if(buf->rd_ptr+buf->size >=USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE)
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	889b      	ldrh	r3, [r3, #4]
 800c282:	461a      	mov	r2, r3
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	891b      	ldrh	r3, [r3, #8]
 800c288:	4413      	add	r3, r2
 800c28a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c28e:	db01      	blt.n	800c294 <USB_AudioStreamingOutputGetBuffer+0x190>
          {
            Error_Handler();
 800c290:	f7f4 fa30 	bl	80006f4 <Error_Handler>
          }
         }
          
        if(buf->rd_ptr == buf->size)
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	889a      	ldrh	r2, [r3, #4]
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	891b      	ldrh	r3, [r3, #8]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d102      	bne.n	800c2a6 <USB_AudioStreamingOutputGetBuffer+0x1a2>
        {
          buf->rd_ptr = 0;
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	809a      	strh	r2, [r3, #4]
        }
      }
     return (packet_data);
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	e002      	b.n	800c2b0 <USB_AudioStreamingOutputGetBuffer+0x1ac>
   }
   else
   {
     /*Should not happen */
     Error_Handler();
 800c2aa:	f7f4 fa23 	bl	80006f4 <Error_Handler>
     return 0; /* return statement not reachable */
 800c2ae:	2300      	movs	r3, #0
   }
 
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3718      	adds	r7, #24
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USB_AudioStreamingInputOutputGetMaxPacketLength>:
  *         return max packet length  it is called by the USB Audio Class
  * @param  node_handle(IN): the input node handle, node must be initialized
  * @retval  max packet length
*/
static uint16_t  USB_AudioStreamingInputOutputGetMaxPacketLength(uint32_t node_handle)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  
  return ((AUDIO_USBInputOutputNode_t *)node_handle)->max_packet_length;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	8b9b      	ldrh	r3, [r3, #28]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <USB_AudioStreamingInputOutputGetState>:
  *         return data ep   state   
  * @param  node_handle: the input node handle, node must be initialized
  * @retval  0
*/
static int8_t  USB_AudioStreamingInputOutputGetState(uint32_t node_handle)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  return 0;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	370c      	adds	r7, #12
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr
	...

0800c2e8 <USB_AudioStreamingFeatureUnitInit>:
  * @retval  0 for no error
  */
 int8_t USB_AudioStreamingFeatureUnitInit(USBD_AUDIO_ControlTypeDef* usb_control_feature,
                                   AUDIO_USBFeatureUnitDefaults_t* audio_defaults, uint8_t unit_id,
                                   uint32_t node_handle)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b086      	sub	sp, #24
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	603b      	str	r3, [r7, #0]
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	71fb      	strb	r3, [r7, #7]
  AUDIO_USB_CF_NodeTypeDef * cf;
 
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;  
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	617b      	str	r3, [r7, #20]
  memset(cf,0,sizeof(AUDIO_USB_CF_NodeTypeDef));
 800c2fc:	2254      	movs	r2, #84	; 0x54
 800c2fe:	2100      	movs	r1, #0
 800c300:	6978      	ldr	r0, [r7, #20]
 800c302:	f001 fc29 	bl	800db58 <memset>
  cf->node.state = AUDIO_NODE_INITIALIZED;
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2201      	movs	r2, #1
 800c30a:	701a      	strb	r2, [r3, #0]
  cf->node.type = AUDIO_CONTROL;
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	2202      	movs	r2, #2
 800c310:	721a      	strb	r2, [r3, #8]
  cf->unit_id = unit_id;
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	79fa      	ldrb	r2, [r7, #7]
 800c316:	751a      	strb	r2, [r3, #20]
  
  cf->CFInit = USB_AudioStreamingFeatureUnitInit;
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	4a24      	ldr	r2, [pc, #144]	; (800c3ac <USB_AudioStreamingFeatureUnitInit+0xc4>)
 800c31c:	641a      	str	r2, [r3, #64]	; 0x40
  cf->CFDeInit = USB_AudioStreamingFeatureUnitDInit;
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	4a23      	ldr	r2, [pc, #140]	; (800c3b0 <USB_AudioStreamingFeatureUnitInit+0xc8>)
 800c322:	645a      	str	r2, [r3, #68]	; 0x44
  cf->CFStart = USB_AudioStreamingFeatureUnitStart;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	4a23      	ldr	r2, [pc, #140]	; (800c3b4 <USB_AudioStreamingFeatureUnitInit+0xcc>)
 800c328:	649a      	str	r2, [r3, #72]	; 0x48
  cf->CFStop = USB_AudioStreamingFeatureUnitStop;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	4a22      	ldr	r2, [pc, #136]	; (800c3b8 <USB_AudioStreamingFeatureUnitInit+0xd0>)
 800c32e:	64da      	str	r2, [r3, #76]	; 0x4c
  cf->CFSetMute = USB_AudioStreamingFeatureUnitSetMute;
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	4a22      	ldr	r2, [pc, #136]	; (800c3bc <USB_AudioStreamingFeatureUnitInit+0xd4>)
 800c334:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_USB_AUDIO_CLASS_10
  cf->usb_control_callbacks.GetStatus = USB_AudioStreamingFeatureUnitGetStatus;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	4a21      	ldr	r2, [pc, #132]	; (800c3c0 <USB_AudioStreamingFeatureUnitInit+0xd8>)
 800c33a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /*USE_USB_AUDIO_CLASS_10*/
  cf->usb_control_callbacks.GetMute = USB_AudioStreamingFeatureUnitGetMute;
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	4a21      	ldr	r2, [pc, #132]	; (800c3c4 <USB_AudioStreamingFeatureUnitInit+0xdc>)
 800c340:	619a      	str	r2, [r3, #24]
  cf->usb_control_callbacks.SetMute = USB_AudioStreamingFeatureUnitSetMute;
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	4a1d      	ldr	r2, [pc, #116]	; (800c3bc <USB_AudioStreamingFeatureUnitInit+0xd4>)
 800c346:	61da      	str	r2, [r3, #28]
  cf->usb_control_callbacks.GetCurVolume = USB_AudioStreamingFeatureUnitGetCurVolume;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	4a1f      	ldr	r2, [pc, #124]	; (800c3c8 <USB_AudioStreamingFeatureUnitInit+0xe0>)
 800c34c:	625a      	str	r2, [r3, #36]	; 0x24
  cf->usb_control_callbacks.SetCurVolume = USB_AudioStreamingFeatureUnitSetCurVolume;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	4a1e      	ldr	r2, [pc, #120]	; (800c3cc <USB_AudioStreamingFeatureUnitInit+0xe4>)
 800c352:	621a      	str	r2, [r3, #32]
  VOLUME_DB_256_TO_USB(cf->usb_control_callbacks.MaxVolume, audio_defaults->max_volume);
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	b29a      	uxth	r2, r3
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	851a      	strh	r2, [r3, #40]	; 0x28
  VOLUME_DB_256_TO_USB(cf->usb_control_callbacks.MinVolume, audio_defaults->min_volume);
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	b29a      	uxth	r2, r3
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	855a      	strh	r2, [r3, #42]	; 0x2a
  cf->usb_control_callbacks.ResVolume = audio_defaults->res_volume;
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	859a      	strh	r2, [r3, #44]	; 0x2c
  cf->node.audio_description=audio_defaults->audio_description;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	68da      	ldr	r2, [r3, #12]
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	605a      	str	r2, [r3, #4]
  
  /* fill structure used by USB Audio Class module */
  usb_control_feature->id = unit_id;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	79fa      	ldrb	r2, [r7, #7]
 800c37e:	701a      	strb	r2, [r3, #0]
  usb_control_feature->control_req_map = 0;  
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	805a      	strh	r2, [r3, #2]
  usb_control_feature->control_selector_map = USBD_AUDIO_FU_MUTE_CONTROL|USBD_AUDIO_FU_VOLUME_CONTROL;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2203      	movs	r2, #3
 800c38a:	809a      	strh	r2, [r3, #4]
  usb_control_feature->type = USBD_AUDIO_CS_AC_SUBTYPE_FEATURE_UNIT;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2206      	movs	r2, #6
 800c390:	705a      	strb	r2, [r3, #1]
  usb_control_feature->Callbacks.feature_control = &cf->usb_control_callbacks;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f103 0218 	add.w	r2, r3, #24
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	609a      	str	r2, [r3, #8]
  usb_control_feature->private_data = node_handle;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	683a      	ldr	r2, [r7, #0]
 800c3a0:	60da      	str	r2, [r3, #12]
  return 0;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3718      	adds	r7, #24
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	0800c2e9 	.word	0x0800c2e9
 800c3b0:	0800c3d1 	.word	0x0800c3d1
 800c3b4:	0800c3ed 	.word	0x0800c3ed
 800c3b8:	0800c431 	.word	0x0800c431
 800c3bc:	0800c477 	.word	0x0800c477
 800c3c0:	0800c53b 	.word	0x0800c53b
 800c3c4:	0800c451 	.word	0x0800c451
 800c3c8:	0800c4bb 	.word	0x0800c4bb
 800c3cc:	0800c4e3 	.word	0x0800c4e3

0800c3d0 <USB_AudioStreamingFeatureUnitDInit>:
  *         De-Initialize control feature unit node
  * @param  node_handle: the node handle, node must be Initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitDInit(uint32_t node_handle)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  ((AUDIO_USB_CF_NodeTypeDef*)node_handle)->node.state = AUDIO_NODE_OFF;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	701a      	strb	r2, [r3, #0]
  return 0;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <USB_AudioStreamingFeatureUnitStart>:
  * @param  commands(IN): list of callback to execute controls like setvolume and mute. this function depends on codec and microphone.
  * @param  node_handle(IN): the node handle, node must be allocated
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitStart(AUDIO_USBFeatureUnitCommands_t* commands, uint32_t node_handle)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  AUDIO_USB_CF_NodeTypeDef *cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	60fb      	str	r3, [r7, #12]
  cf->control_cbks = *commands;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	3334      	adds	r3, #52	; 0x34
 800c400:	ca07      	ldmia	r2, {r0, r1, r2}
 800c402:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  cf->node.state = AUDIO_NODE_STARTED;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2202      	movs	r2, #2
 800c40a:	701a      	strb	r2, [r3, #0]
  
  if(cf->control_cbks.SetCurrentVolume)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c410:	2b00      	cmp	r3, #0
 800c412:	d008      	beq.n	800c426 <USB_AudioStreamingFeatureUnitStart+0x3a>
  {
    cf->control_cbks.SetCurrentVolume(0, 
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                      cf->node.audio_description->audio_volume_db_256,
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	6852      	ldr	r2, [r2, #4]
    cf->control_cbks.SetCurrentVolume(0, 
 800c41c:	68d1      	ldr	r1, [r2, #12]
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c422:	2000      	movs	r0, #0
 800c424:	4798      	blx	r3
                                      cf->control_cbks.private_data);
  }
  return 0;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <USB_AudioStreamingFeatureUnitStop>:
  *         stop control feature node
  * @param  node_handle: the node handle, node must be started
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitStop( uint32_t node_handle)
{
 800c430:	b480      	push	{r7}
 800c432:	b085      	sub	sp, #20
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  /* @TODO develop feature */
  AUDIO_USB_CF_NodeTypeDef * cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	60fb      	str	r3, [r7, #12]
  cf->node.state = AUDIO_NODE_STOPPED;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2203      	movs	r2, #3
 800c440:	701a      	strb	r2, [r3, #0]
  return 0;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3714      	adds	r7, #20
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <USB_AudioStreamingFeatureUnitGetMute>:
  * @param  mute: returned mute value
  * @param  node_handle: the Feature node handle, node must be initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitGetMute(uint16_t channel, uint8_t* mute, uint32_t node_handle)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
 800c45c:	81fb      	strh	r3, [r7, #14]
  /**@TODO add channel management  */
  *mute = ((AUDIO_USB_CF_NodeTypeDef*)node_handle)->node.audio_description->audio_mute; 
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	7c1a      	ldrb	r2, [r3, #16]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	701a      	strb	r2, [r3, #0]
  return 0; 
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr

0800c476 <USB_AudioStreamingFeatureUnitSetMute>:
  * @param  mute:  mute value
  * @param  node_handle: the Feature node handle, node must be initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitSetMute(uint16_t channel, uint8_t mute, uint32_t node_handle)
{
 800c476:	b580      	push	{r7, lr}
 800c478:	b084      	sub	sp, #16
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	4603      	mov	r3, r0
 800c47e:	603a      	str	r2, [r7, #0]
 800c480:	80fb      	strh	r3, [r7, #6]
 800c482:	460b      	mov	r3, r1
 800c484:	717b      	strb	r3, [r7, #5]
  AUDIO_USB_CF_NodeTypeDef * cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	60fb      	str	r3, [r7, #12]
  /**@TODO add channel management  */
  
  cf->node.audio_description->audio_mute = mute;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	797a      	ldrb	r2, [r7, #5]
 800c490:	741a      	strb	r2, [r3, #16]
  if((cf->node.state == AUDIO_NODE_STARTED)&&(cf->control_cbks.SetMute))
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	2b02      	cmp	r3, #2
 800c498:	d10a      	bne.n	800c4b0 <USB_AudioStreamingFeatureUnitSetMute+0x3a>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d006      	beq.n	800c4b0 <USB_AudioStreamingFeatureUnitSetMute+0x3a>
  {
      cf->control_cbks.SetMute(channel, mute, cf->control_cbks.private_data);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c4aa:	7979      	ldrb	r1, [r7, #5]
 800c4ac:	88f8      	ldrh	r0, [r7, #6]
 800c4ae:	4798      	blx	r3
  }
  return 0;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <USB_AudioStreamingFeatureUnitGetCurVolume>:
  * @param  volume:             returned volume value
  * @param  node_handle:        the Feature node handle, node must be initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitGetCurVolume(uint16_t channel, uint16_t* volume, uint32_t node_handle)
{
 800c4ba:	b480      	push	{r7}
 800c4bc:	b085      	sub	sp, #20
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	60b9      	str	r1, [r7, #8]
 800c4c4:	607a      	str	r2, [r7, #4]
 800c4c6:	81fb      	strh	r3, [r7, #14]
  /**@TODO add channel management  */
  VOLUME_DB_256_TO_USB(*volume, ((AUDIO_Node_t*)node_handle)->audio_description->audio_volume_db_256);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	801a      	strh	r2, [r3, #0]
  return 0; 
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <USB_AudioStreamingFeatureUnitSetCurVolume>:
  * @param  volume:             volume value
  * @param  node_handle:        the Feature node handle, node must be initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitSetCurVolume(uint16_t channel, uint16_t volume, uint32_t node_handle)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b084      	sub	sp, #16
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	603a      	str	r2, [r7, #0]
 800c4ec:	80fb      	strh	r3, [r7, #6]
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	80bb      	strh	r3, [r7, #4]
  AUDIO_USB_CF_NodeTypeDef* cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	60fb      	str	r3, [r7, #12]
  /**@TODO add channel management  */
  
  VOLUME_USB_TO_DB_256(cf->node.audio_description->audio_volume_db_256, volume);
 800c4f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	db01      	blt.n	800c502 <USB_AudioStreamingFeatureUnitSetCurVolume+0x20>
 800c4fe:	88bb      	ldrh	r3, [r7, #4]
 800c500:	e002      	b.n	800c508 <USB_AudioStreamingFeatureUnitSetCurVolume+0x26>
 800c502:	88bb      	ldrh	r3, [r7, #4]
 800c504:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	6852      	ldr	r2, [r2, #4]
 800c50c:	60d3      	str	r3, [r2, #12]
  if((cf->node.state == AUDIO_NODE_STARTED)&&(cf->control_cbks.SetCurrentVolume))
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	2b02      	cmp	r3, #2
 800c514:	d10c      	bne.n	800c530 <USB_AudioStreamingFeatureUnitSetCurVolume+0x4e>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d008      	beq.n	800c530 <USB_AudioStreamingFeatureUnitSetCurVolume+0x4e>
  {
    cf->control_cbks.SetCurrentVolume(channel, 
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                      cf->node.audio_description->audio_volume_db_256,
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	6852      	ldr	r2, [r2, #4]
    cf->control_cbks.SetCurrentVolume(channel, 
 800c526:	68d1      	ldr	r1, [r2, #12]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c52c:	88f8      	ldrh	r0, [r7, #6]
 800c52e:	4798      	blx	r3
                                      cf->control_cbks.private_data);
  }
  return 0;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}

0800c53a <USB_AudioStreamingFeatureUnitGetStatus>:
  *         get Feature unit status
  * @param  node_handle:        the Feature node handle, node must be initialized      
  * @retval 0 for no error
  */
static int8_t  USB_AudioStreamingFeatureUnitGetStatus( uint32_t node_handle )
{
 800c53a:	b480      	push	{r7}
 800c53c:	b083      	sub	sp, #12
 800c53e:	af00      	add	r7, sp, #0
 800c540:	6078      	str	r0, [r7, #4]
  return 0;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	370c      	adds	r7, #12
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <USB_AudioStreamingInitializeDataBuffer>:
  * @retval 0 if no error
  */
  void USB_AudioStreamingInitializeDataBuffer(AUDIO_CircularBuffer_t* buf, 
                                       uint32_t buffer_size, 
                                       uint16_t packet_size, uint16_t margin)
 {
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	4611      	mov	r1, r2
 800c55c:	461a      	mov	r2, r3
 800c55e:	460b      	mov	r3, r1
 800c560:	80fb      	strh	r3, [r7, #6]
 800c562:	4613      	mov	r3, r2
 800c564:	80bb      	strh	r3, [r7, #4]
    buf->size = ((int)((buffer_size - margin )
 800c566:	88bb      	ldrh	r3, [r7, #4]
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	1ad2      	subs	r2, r2, r3
                       / packet_size)) * packet_size; 
 800c56c:	88fb      	ldrh	r3, [r7, #6]
 800c56e:	fbb2 f3f3 	udiv	r3, r2, r3
    buf->size = ((int)((buffer_size - margin )
 800c572:	b29b      	uxth	r3, r3
 800c574:	88fa      	ldrh	r2, [r7, #6]
 800c576:	fb12 f303 	smulbb	r3, r2, r3
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	811a      	strh	r2, [r3, #8]
    buf->rd_ptr = buf->wr_ptr = 0;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	80da      	strh	r2, [r3, #6]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	88da      	ldrh	r2, [r3, #6]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	809a      	strh	r2, [r3, #4]
 }
 800c58e:	bf00      	nop
 800c590:	3714      	adds	r7, #20
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
	...

0800c59c <AUDIO_RecordingSessionInit>:
  * @param  session_handle(IN): session handle
  * @retval  : 0 if no error
  */
 int8_t  AUDIO_RecordingSessionInit(USBD_AUDIO_AS_InterfaceTypeDef* as_desc,  USBD_AUDIO_ControlTypeDef* controls_desc,
                                     uint8_t* control_count, uint32_t session_handle)
{
 800c59c:	b5b0      	push	{r4, r5, r7, lr}
 800c59e:	b08a      	sub	sp, #40	; 0x28
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
 800c5a8:	603b      	str	r3, [r7, #0]
  AUDIO_USBSession_t *rec_session;
  AUDIO_USBFeatureUnitDefaults_t controller_defaults;
  
  rec_session = (AUDIO_USBSession_t*)session_handle;
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	627b      	str	r3, [r7, #36]	; 0x24
  memset(rec_session, 0, sizeof(AUDIO_USBSession_t));
 800c5ae:	2220      	movs	r2, #32
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5b4:	f001 fad0 	bl	800db58 <memset>
  rec_session->interface_num = USBD_AUDIO_CONFIG_RECORD_SA_INTERFACE;
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	741a      	strb	r2, [r3, #16]
  rec_session->alternate = 0;
 800c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	745a      	strb	r2, [r3, #17]

  rec_session->SessionDeInit = USB_AudioRecordingSessionDeInit;
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	4a55      	ldr	r2, [pc, #340]	; (800c71c <AUDIO_RecordingSessionInit+0x180>)
 800c5c8:	60da      	str	r2, [r3, #12]
#if USE_AUDIO_USB_INTERRUPT
   rec_session->ExternalControl = USB_AudioRecordingSessionExternalControl;
#endif /*USE_AUDIO_USB_INTERRUPT*/
  rec_session->session.SessionCallback = USB_AudioRecordingSessionCallback;
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	4a54      	ldr	r2, [pc, #336]	; (800c720 <AUDIO_RecordingSessionInit+0x184>)
 800c5ce:	609a      	str	r2, [r3, #8]
  
  /*set audio used option*/
  RecordingAudioDescription.resolution = USB_AUDIO_CONFIG_RECORD_RES_BYTE;
 800c5d0:	4b54      	ldr	r3, [pc, #336]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c5d2:	2203      	movs	r2, #3
 800c5d4:	745a      	strb	r2, [r3, #17]
  RecordingAudioDescription.audio_type = USBD_AUDIO_FORMAT_TYPE_PCM;
 800c5d6:	4b53      	ldr	r3, [pc, #332]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c5d8:	2201      	movs	r2, #1
 800c5da:	811a      	strh	r2, [r3, #8]
  RecordingAudioDescription.channels_count = USB_AUDIO_CONFIG_RECORD_CHANNEL_COUNT;
 800c5dc:	4b51      	ldr	r3, [pc, #324]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c5de:	2202      	movs	r2, #2
 800c5e0:	711a      	strb	r2, [r3, #4]
  RecordingAudioDescription.channels_map = USB_AUDIO_CONFIG_RECORD_CHANNEL_MAP; 
 800c5e2:	4b50      	ldr	r3, [pc, #320]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c5e4:	2203      	movs	r2, #3
 800c5e6:	80da      	strh	r2, [r3, #6]
  RecordingAudioDescription.frequency = USB_AUDIO_CONFIG_RECORD_DEF_FREQ;
 800c5e8:	4b4e      	ldr	r3, [pc, #312]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c5ea:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800c5ee:	601a      	str	r2, [r3, #0]
  RecordingAudioDescription.audio_mute = 0;
 800c5f0:	4b4c      	ldr	r3, [pc, #304]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	741a      	strb	r2, [r3, #16]
  RecordingAudioDescription.audio_volume_db_256 = DEFAULT_VOLUME_DB_256;
 800c5f6:	4b4b      	ldr	r3, [pc, #300]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	60da      	str	r2, [r3, #12]
  *control_count = 0;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	701a      	strb	r2, [r3, #0]
  
  /* create list of node */

  /* create mic node */
  AUDIO_MicInit(&RecordingAudioDescription, &rec_session->session, (uint32_t)&RecordingMicrophoneNode);
 800c602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c604:	4a48      	ldr	r2, [pc, #288]	; (800c728 <AUDIO_RecordingSessionInit+0x18c>)
 800c606:	4619      	mov	r1, r3
 800c608:	4846      	ldr	r0, [pc, #280]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c60a:	f7f3 fe65 	bl	80002d8 <AUDIO_DFSDM_MEMS_MicInit>
  rec_session->session.node_list = (AUDIO_Node_t*)&RecordingMicrophoneNode;
 800c60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c610:	4a45      	ldr	r2, [pc, #276]	; (800c728 <AUDIO_RecordingSessionInit+0x18c>)
 800c612:	601a      	str	r2, [r3, #0]

  /* create record output */
  USB_AudioStreamingOutputInit(&as_desc->data_ep,  
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	1d18      	adds	r0, r3, #4
 800c618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c61a:	4b44      	ldr	r3, [pc, #272]	; (800c72c <AUDIO_RecordingSessionInit+0x190>)
 800c61c:	4941      	ldr	r1, [pc, #260]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c61e:	f7ff fc7b 	bl	800bf18 <USB_AudioStreamingOutputInit>
                                  &RecordingAudioDescription,
                                  &rec_session->session,
                                  (uint32_t)&RecordingUSBOutputNode);
  
   /* create Feature UNIT */
  controller_defaults.audio_description = &RecordingAudioDescription;
 800c622:	4b40      	ldr	r3, [pc, #256]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c624:	623b      	str	r3, [r7, #32]
  RecordingMicrophoneNode.MicGetVolumeDefaultsValues(&controller_defaults.max_volume,
 800c626:	4b40      	ldr	r3, [pc, #256]	; (800c728 <AUDIO_RecordingSessionInit+0x18c>)
 800c628:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c62a:	4d3f      	ldr	r5, [pc, #252]	; (800c728 <AUDIO_RecordingSessionInit+0x18c>)
 800c62c:	f107 0314 	add.w	r3, r7, #20
 800c630:	f103 0208 	add.w	r2, r3, #8
 800c634:	f107 0314 	add.w	r3, r7, #20
 800c638:	1d19      	adds	r1, r3, #4
 800c63a:	f107 0014 	add.w	r0, r7, #20
 800c63e:	462b      	mov	r3, r5
 800c640:	47a0      	blx	r4
                                       &controller_defaults.min_volume,
                                       &controller_defaults.res_volume,
                                       (uint32_t)&RecordingMicrophoneNode);

  USB_AudioStreamingFeatureUnitInit(controls_desc,  &controller_defaults,
 800c642:	4b3b      	ldr	r3, [pc, #236]	; (800c730 <AUDIO_RecordingSessionInit+0x194>)
 800c644:	f107 0114 	add.w	r1, r7, #20
 800c648:	2215      	movs	r2, #21
 800c64a:	68b8      	ldr	r0, [r7, #8]
 800c64c:	f7ff fe4c 	bl	800c2e8 <USB_AudioStreamingFeatureUnitInit>
                              USB_AUDIO_CONFIG_RECORD_UNIT_FEATURE_ID,
                              (uint32_t)&RecordingFeatureUnitNode);
 (*control_count)++;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	3301      	adds	r3, #1
 800c656:	b2da      	uxtb	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	701a      	strb	r2, [r3, #0]
  RecordingMicrophoneNode.node.next = (AUDIO_Node_t*)&RecordingFeatureUnitNode;
 800c65c:	4b32      	ldr	r3, [pc, #200]	; (800c728 <AUDIO_RecordingSessionInit+0x18c>)
 800c65e:	4a34      	ldr	r2, [pc, #208]	; (800c730 <AUDIO_RecordingSessionInit+0x194>)
 800c660:	611a      	str	r2, [r3, #16]
  RecordingFeatureUnitNode.node.next = (AUDIO_Node_t*)&RecordingUSBOutputNode;
 800c662:	4b33      	ldr	r3, [pc, #204]	; (800c730 <AUDIO_RecordingSessionInit+0x194>)
 800c664:	4a31      	ldr	r2, [pc, #196]	; (800c72c <AUDIO_RecordingSessionInit+0x190>)
 800c666:	611a      	str	r2, [r3, #16]
  
    /* prepare circular buffer */
  rec_session->buffer.data = malloc(USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE);
 800c668:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c66c:	f001 fa56 	bl	800db1c <malloc>
 800c670:	4603      	mov	r3, r0
 800c672:	461a      	mov	r2, r3
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	615a      	str	r2, [r3, #20]
  if(!rec_session->buffer.data)
 800c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67a:	695b      	ldr	r3, [r3, #20]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <AUDIO_RecordingSessionInit+0xe8>
  {
    Error_Handler();
 800c680:	f7f4 f838 	bl	80006f4 <Error_Handler>
  }
  /* @TODO optimize the margin value */
  USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c686:	f103 0014 	add.w	r0, r3, #20
                                   AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) , AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800c68a:	4b26      	ldr	r3, [pc, #152]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a29      	ldr	r2, [pc, #164]	; (800c734 <AUDIO_RecordingSessionInit+0x198>)
 800c690:	fba2 2303 	umull	r2, r3, r2, r3
 800c694:	099b      	lsrs	r3, r3, #6
  USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c696:	b29a      	uxth	r2, r3
                                   AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) , AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800c698:	4b22      	ldr	r3, [pc, #136]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c69a:	791b      	ldrb	r3, [r3, #4]
  USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	fb12 f303 	smulbb	r3, r2, r3
 800c6a2:	b29a      	uxth	r2, r3
                                   AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) , AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800c6a4:	4b1f      	ldr	r3, [pc, #124]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c6a6:	7c5b      	ldrb	r3, [r3, #17]
  USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	fb12 f303 	smulbb	r3, r2, r3
 800c6ae:	b299      	uxth	r1, r3
                                   AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) , AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800c6b0:	4b1c      	ldr	r3, [pc, #112]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a1f      	ldr	r2, [pc, #124]	; (800c734 <AUDIO_RecordingSessionInit+0x198>)
 800c6b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ba:	099b      	lsrs	r3, r3, #6
  USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c6bc:	b29a      	uxth	r2, r3
                                   AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) , AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800c6be:	4b19      	ldr	r3, [pc, #100]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c6c0:	791b      	ldrb	r3, [r3, #4]
  USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	fb12 f303 	smulbb	r3, r2, r3
 800c6c8:	b29a      	uxth	r2, r3
                                   AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) , AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800c6ca:	4b16      	ldr	r3, [pc, #88]	; (800c724 <AUDIO_RecordingSessionInit+0x188>)
 800c6cc:	7c5b      	ldrb	r3, [r3, #17]
  USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	fb12 f303 	smulbb	r3, r2, r3
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	460a      	mov	r2, r1
 800c6d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c6dc:	f7ff ff38 	bl	800c550 <USB_AudioStreamingInitializeDataBuffer>
  /* set USB AUDIO class callbacks */
  as_desc->interface_num = rec_session->interface_num;
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e2:	7c1a      	ldrb	r2, [r3, #16]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	701a      	strb	r2, [r3, #0]
  as_desc->alternate = 0;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	709a      	strb	r2, [r3, #2]
  as_desc->max_alternate = AUDIO_USB_RECORDING_ALTERNATE;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	705a      	strb	r2, [r3, #1]
#if USE_AUDIO_PLAYBACK_USB_FEEDBACK
  as_desc->synch_enabled = 0;
#endif /* USE_AUDIO_PLAYBACK_USB_FEEDBACK */
  as_desc->private_data = session_handle;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	635a      	str	r2, [r3, #52]	; 0x34
  as_desc->SetAS_Alternate = USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	4a0e      	ldr	r2, [pc, #56]	; (800c738 <AUDIO_RecordingSessionInit+0x19c>)
 800c6fe:	62da      	str	r2, [r3, #44]	; 0x2c
  as_desc->GetState = USB_AudioRecordingGetState;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	4a0e      	ldr	r2, [pc, #56]	; (800c73c <AUDIO_RecordingSessionInit+0x1a0>)
 800c704:	631a      	str	r2, [r3, #48]	; 0x30
#if USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO
  as_desc->SofReceived = USB_AudioRecordingSofReceived;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	4a0d      	ldr	r2, [pc, #52]	; (800c740 <AUDIO_RecordingSessionInit+0x1a4>)
 800c70a:	629a      	str	r2, [r3, #40]	; 0x28
#else /* USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO */
  as_desc->SofReceived =  0;
#endif /* USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO */
  rec_session->session.state = AUDIO_SESSION_INITIALIZED;
 800c70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70e:	2201      	movs	r2, #1
 800c710:	711a      	strb	r2, [r3, #4]
  return 0;
 800c712:	2300      	movs	r3, #0
}
 800c714:	4618      	mov	r0, r3
 800c716:	3728      	adds	r7, #40	; 0x28
 800c718:	46bd      	mov	sp, r7
 800c71a:	bdb0      	pop	{r4, r5, r7, pc}
 800c71c:	0800c81d 	.word	0x0800c81d
 800c720:	0800c88d 	.word	0x0800c88d
 800c724:	200002c4 	.word	0x200002c4
 800c728:	2000032c 	.word	0x2000032c
 800c72c:	20000290 	.word	0x20000290
 800c730:	200002d8 	.word	0x200002d8
 800c734:	10624dd3 	.word	0x10624dd3
 800c738:	0800ca25 	.word	0x0800ca25
 800c73c:	0800ca6f 	.word	0x0800ca6f
 800c740:	0800ca85 	.word	0x0800ca85

0800c744 <USB_AudioRecordingSessionStart>:
  *         Start the Recording session
  * @param  rec_session: recording session should be already initialized and not in error state
  * @retval 0 if no error
  */
static  int8_t  USB_AudioRecordingSessionStart( AUDIO_USBSession_t* rec_session)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  if(( rec_session->session.state == AUDIO_SESSION_INITIALIZED)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	791b      	ldrb	r3, [r3, #4]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d003      	beq.n	800c75c <USB_AudioRecordingSessionStart+0x18>
       ||(rec_session->session.state == AUDIO_SESSION_STOPPED))
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	791b      	ldrb	r3, [r3, #4]
 800c758:	2b03      	cmp	r3, #3
 800c75a:	d12b      	bne.n	800c7b4 <USB_AudioRecordingSessionStart+0x70>
  {
    AUDIO_USBFeatureUnitCommands_t commands;
    /* start feature control node */
    commands.private_data = (uint32_t)&RecordingMicrophoneNode;
 800c75c:	4b18      	ldr	r3, [pc, #96]	; (800c7c0 <USB_AudioRecordingSessionStart+0x7c>)
 800c75e:	617b      	str	r3, [r7, #20]
    commands.SetCurrentVolume = RecordingMicrophoneNode.MicSetVolume;
 800c760:	4b17      	ldr	r3, [pc, #92]	; (800c7c0 <USB_AudioRecordingSessionStart+0x7c>)
 800c762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c764:	613b      	str	r3, [r7, #16]
    commands.SetMute = RecordingMicrophoneNode.MicMute;
 800c766:	4b16      	ldr	r3, [pc, #88]	; (800c7c0 <USB_AudioRecordingSessionStart+0x7c>)
 800c768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76a:	60fb      	str	r3, [r7, #12]
    rec_session->buffer.rd_ptr = rec_session->buffer.wr_ptr = 0;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	835a      	strh	r2, [r3, #26]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	8b5a      	ldrh	r2, [r3, #26]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	831a      	strh	r2, [r3, #24]
#if USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO
    RecordingSynchronizationParams.status = 0;
 800c77a:	4b12      	ldr	r3, [pc, #72]	; (800c7c4 <USB_AudioRecordingSessionStart+0x80>)
 800c77c:	2200      	movs	r2, #0
 800c77e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
#endif /* USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO */

    /* start the mic */
    RecordingMicrophoneNode.MicStart(&rec_session->buffer, (uint32_t)&RecordingMicrophoneNode);
 800c782:	4b0f      	ldr	r3, [pc, #60]	; (800c7c0 <USB_AudioRecordingSessionStart+0x7c>)
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	3214      	adds	r2, #20
 800c78a:	490d      	ldr	r1, [pc, #52]	; (800c7c0 <USB_AudioRecordingSessionStart+0x7c>)
 800c78c:	4610      	mov	r0, r2
 800c78e:	4798      	blx	r3
    /* start the feature */
    RecordingFeatureUnitNode.CFStart(&commands, (uint32_t)&RecordingFeatureUnitNode);
 800c790:	4b0d      	ldr	r3, [pc, #52]	; (800c7c8 <USB_AudioRecordingSessionStart+0x84>)
 800c792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c794:	490c      	ldr	r1, [pc, #48]	; (800c7c8 <USB_AudioRecordingSessionStart+0x84>)
 800c796:	f107 020c 	add.w	r2, r7, #12
 800c79a:	4610      	mov	r0, r2
 800c79c:	4798      	blx	r3
    /* start output node */
    RecordingUSBOutputNode.IOStart(&rec_session->buffer, 0, (uint32_t)&RecordingUSBOutputNode);
 800c79e:	4b0b      	ldr	r3, [pc, #44]	; (800c7cc <USB_AudioRecordingSessionStart+0x88>)
 800c7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	f102 0014 	add.w	r0, r2, #20
 800c7a8:	4a08      	ldr	r2, [pc, #32]	; (800c7cc <USB_AudioRecordingSessionStart+0x88>)
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	4798      	blx	r3
    rec_session->session.state = AUDIO_SESSION_STARTED; 
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	711a      	strb	r2, [r3, #4]
  }
  return 0;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3718      	adds	r7, #24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	2000032c 	.word	0x2000032c
 800c7c4:	20000678 	.word	0x20000678
 800c7c8:	200002d8 	.word	0x200002d8
 800c7cc:	20000290 	.word	0x20000290

0800c7d0 <USB_AudioRecordingSessionStop>:
  *         stop the recording session
  * @param  rec_session: recording session
  * @retval  : 0 if no error
  */
static int8_t  USB_AudioRecordingSessionStop(AUDIO_USBSession_t *rec_session)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  
  if( rec_session->session.state == AUDIO_SESSION_STARTED)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	791b      	ldrb	r3, [r3, #4]
 800c7dc:	2b02      	cmp	r3, #2
 800c7de:	d111      	bne.n	800c804 <USB_AudioRecordingSessionStop+0x34>
  {
    RecordingUSBOutputNode.IOStop((uint32_t)&RecordingUSBOutputNode);
 800c7e0:	4b0b      	ldr	r3, [pc, #44]	; (800c810 <USB_AudioRecordingSessionStop+0x40>)
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	4a0a      	ldr	r2, [pc, #40]	; (800c810 <USB_AudioRecordingSessionStop+0x40>)
 800c7e6:	4610      	mov	r0, r2
 800c7e8:	4798      	blx	r3
    RecordingFeatureUnitNode.CFStop((uint32_t)&RecordingFeatureUnitNode);
 800c7ea:	4b0a      	ldr	r3, [pc, #40]	; (800c814 <USB_AudioRecordingSessionStop+0x44>)
 800c7ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7ee:	4a09      	ldr	r2, [pc, #36]	; (800c814 <USB_AudioRecordingSessionStop+0x44>)
 800c7f0:	4610      	mov	r0, r2
 800c7f2:	4798      	blx	r3
    RecordingMicrophoneNode.MicStop((uint32_t)&RecordingMicrophoneNode);
 800c7f4:	4b08      	ldr	r3, [pc, #32]	; (800c818 <USB_AudioRecordingSessionStop+0x48>)
 800c7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f8:	4a07      	ldr	r2, [pc, #28]	; (800c818 <USB_AudioRecordingSessionStop+0x48>)
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	4798      	blx	r3
    rec_session->session.state = AUDIO_SESSION_STOPPED;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2203      	movs	r2, #3
 800c802:	711a      	strb	r2, [r3, #4]
  }

  return 0;
 800c804:	2300      	movs	r3, #0
}
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20000290 	.word	0x20000290
 800c814:	200002d8 	.word	0x200002d8
 800c818:	2000032c 	.word	0x2000032c

0800c81c <USB_AudioRecordingSessionDeInit>:
  *         De-Initialize the recording session
  * @param  session_handle: session handle
  * @retval 0 if no error
  */
static int8_t  USB_AudioRecordingSessionDeInit(uint32_t session_handle)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  AUDIO_USBSession_t *rec_session;
  
  rec_session = (AUDIO_USBSession_t*)session_handle;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	60fb      	str	r3, [r7, #12]
  
  if( rec_session->session.state != AUDIO_SESSION_OFF)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	791b      	ldrb	r3, [r3, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d021      	beq.n	800c874 <USB_AudioRecordingSessionDeInit+0x58>
  {
    if( rec_session->session.state == AUDIO_SESSION_STARTED)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	791b      	ldrb	r3, [r3, #4]
 800c834:	2b02      	cmp	r3, #2
 800c836:	d102      	bne.n	800c83e <USB_AudioRecordingSessionDeInit+0x22>
    {
      USB_AudioRecordingSessionStop( rec_session);
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f7ff ffc9 	bl	800c7d0 <USB_AudioRecordingSessionStop>
    }
    RecordingMicrophoneNode.MicDeInit((uint32_t)&RecordingMicrophoneNode);
 800c83e:	4b10      	ldr	r3, [pc, #64]	; (800c880 <USB_AudioRecordingSessionDeInit+0x64>)
 800c840:	69db      	ldr	r3, [r3, #28]
 800c842:	4a0f      	ldr	r2, [pc, #60]	; (800c880 <USB_AudioRecordingSessionDeInit+0x64>)
 800c844:	4610      	mov	r0, r2
 800c846:	4798      	blx	r3
    RecordingUSBOutputNode.IODeInit((uint32_t)&RecordingUSBOutputNode);
 800c848:	4b0e      	ldr	r3, [pc, #56]	; (800c884 <USB_AudioRecordingSessionDeInit+0x68>)
 800c84a:	6a1b      	ldr	r3, [r3, #32]
 800c84c:	4a0d      	ldr	r2, [pc, #52]	; (800c884 <USB_AudioRecordingSessionDeInit+0x68>)
 800c84e:	4610      	mov	r0, r2
 800c850:	4798      	blx	r3
    RecordingFeatureUnitNode.CFDeInit((uint32_t)&RecordingFeatureUnitNode);
 800c852:	4b0d      	ldr	r3, [pc, #52]	; (800c888 <USB_AudioRecordingSessionDeInit+0x6c>)
 800c854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c856:	4a0c      	ldr	r2, [pc, #48]	; (800c888 <USB_AudioRecordingSessionDeInit+0x6c>)
 800c858:	4610      	mov	r0, r2
 800c85a:	4798      	blx	r3
    
    if( rec_session->buffer.data)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	695b      	ldr	r3, [r3, #20]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d004      	beq.n	800c86e <USB_AudioRecordingSessionDeInit+0x52>
    {
      free( rec_session->buffer.data);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	4618      	mov	r0, r3
 800c86a:	f001 f95f 	bl	800db2c <free>
    }
    rec_session->session.state = AUDIO_SESSION_OFF;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	711a      	strb	r2, [r3, #4]
  }

  return 0;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	2000032c 	.word	0x2000032c
 800c884:	20000290 	.word	0x20000290
 800c888:	200002d8 	.word	0x200002d8

0800c88c <USB_AudioRecordingSessionCallback>:
static int underrun_count = 0;
static int overrun_count = 0;
static int8_t  USB_AudioRecordingSessionCallback(AUDIO_SessionEvent_t  event, 
                                               AUDIO_Node_t* node, 
                                               struct    AUDIO_Session* session_handle)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b086      	sub	sp, #24
 800c890:	af00      	add	r7, sp, #0
 800c892:	4603      	mov	r3, r0
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	73fb      	strb	r3, [r7, #15]
   AUDIO_USBSession_t *rec_session;
  
  rec_session = (AUDIO_USBSession_t*)session_handle;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	617b      	str	r3, [r7, #20]
  
  switch(event)
 800c89e:	7bfb      	ldrb	r3, [r7, #15]
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	2b07      	cmp	r3, #7
 800c8a4:	f200 80a7 	bhi.w	800c9f6 <USB_AudioRecordingSessionCallback+0x16a>
 800c8a8:	a201      	add	r2, pc, #4	; (adr r2, 800c8b0 <USB_AudioRecordingSessionCallback+0x24>)
 800c8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ae:	bf00      	nop
 800c8b0:	0800c9e5 	.word	0x0800c9e5
 800c8b4:	0800c993 	.word	0x0800c993
 800c8b8:	0800c9db 	.word	0x0800c9db
 800c8bc:	0800c94d 	.word	0x0800c94d
 800c8c0:	0800c94d 	.word	0x0800c94d
 800c8c4:	0800c9f7 	.word	0x0800c9f7
 800c8c8:	0800c9f7 	.word	0x0800c9f7
 800c8cc:	0800c8d1 	.word	0x0800c8d1
  {
     case AUDIO_FREQUENCY_CHANGED: 
    {
      /* recompute the buffer size */
      RecordingMicrophoneNode.MicChangeFrequency((uint32_t)&RecordingMicrophoneNode);
 800c8d0:	4b4d      	ldr	r3, [pc, #308]	; (800ca08 <USB_AudioRecordingSessionCallback+0x17c>)
 800c8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d4:	4a4c      	ldr	r2, [pc, #304]	; (800ca08 <USB_AudioRecordingSessionCallback+0x17c>)
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	4798      	blx	r3
#if USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO
       USB_AudioRecordingSynchroInit(&rec_session->buffer, RecordingUSBOutputNode.packet_length);
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	3314      	adds	r3, #20
 800c8de:	4a4b      	ldr	r2, [pc, #300]	; (800ca0c <USB_AudioRecordingSessionCallback+0x180>)
 800c8e0:	8bd2      	ldrh	r2, [r2, #30]
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 f979 	bl	800cbdc <USB_AudioRecordingSynchroInit>
#endif /* USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO */
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	f103 0014 	add.w	r0, r3, #20
                                AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) ,
 800c8f0:	4b47      	ldr	r3, [pc, #284]	; (800ca10 <USB_AudioRecordingSessionCallback+0x184>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a47      	ldr	r2, [pc, #284]	; (800ca14 <USB_AudioRecordingSessionCallback+0x188>)
 800c8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8fa:	099b      	lsrs	r3, r3, #6
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c8fc:	b29a      	uxth	r2, r3
                                AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) ,
 800c8fe:	4b44      	ldr	r3, [pc, #272]	; (800ca10 <USB_AudioRecordingSessionCallback+0x184>)
 800c900:	791b      	ldrb	r3, [r3, #4]
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c902:	b29b      	uxth	r3, r3
 800c904:	fb12 f303 	smulbb	r3, r2, r3
 800c908:	b29a      	uxth	r2, r3
                                AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) ,
 800c90a:	4b41      	ldr	r3, [pc, #260]	; (800ca10 <USB_AudioRecordingSessionCallback+0x184>)
 800c90c:	7c5b      	ldrb	r3, [r3, #17]
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c90e:	b29b      	uxth	r3, r3
 800c910:	fb12 f303 	smulbb	r3, r2, r3
 800c914:	b299      	uxth	r1, r3
                                AUDIO_MS_MAX_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800c916:	4b3e      	ldr	r3, [pc, #248]	; (800ca10 <USB_AudioRecordingSessionCallback+0x184>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800c91e:	4a3d      	ldr	r2, [pc, #244]	; (800ca14 <USB_AudioRecordingSessionCallback+0x188>)
 800c920:	fba2 2303 	umull	r2, r3, r2, r3
 800c924:	099b      	lsrs	r3, r3, #6
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c926:	b29a      	uxth	r2, r3
                                AUDIO_MS_MAX_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800c928:	4b39      	ldr	r3, [pc, #228]	; (800ca10 <USB_AudioRecordingSessionCallback+0x184>)
 800c92a:	791b      	ldrb	r3, [r3, #4]
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	fb12 f303 	smulbb	r3, r2, r3
 800c932:	b29a      	uxth	r2, r3
                                AUDIO_MS_MAX_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800c934:	4b36      	ldr	r3, [pc, #216]	; (800ca10 <USB_AudioRecordingSessionCallback+0x184>)
 800c936:	7c5b      	ldrb	r3, [r3, #17]
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800c938:	b29b      	uxth	r3, r3
 800c93a:	fb12 f303 	smulbb	r3, r2, r3
 800c93e:	b29b      	uxth	r3, r3
 800c940:	460a      	mov	r2, r1
 800c942:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c946:	f7ff fe03 	bl	800c550 <USB_AudioStreamingInitializeDataBuffer>
       break;
 800c94a:	e057      	b.n	800c9fc <USB_AudioRecordingSessionCallback+0x170>
    }
    case AUDIO_UNDERRUN :
    case AUDIO_OVERRUN :
    {
      if(event == AUDIO_OVERRUN)
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
 800c94e:	2b04      	cmp	r3, #4
 800c950:	d105      	bne.n	800c95e <USB_AudioRecordingSessionCallback+0xd2>
      {
        overrun_count++;
 800c952:	4b31      	ldr	r3, [pc, #196]	; (800ca18 <USB_AudioRecordingSessionCallback+0x18c>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	3301      	adds	r3, #1
 800c958:	4a2f      	ldr	r2, [pc, #188]	; (800ca18 <USB_AudioRecordingSessionCallback+0x18c>)
 800c95a:	6013      	str	r3, [r2, #0]
 800c95c:	e004      	b.n	800c968 <USB_AudioRecordingSessionCallback+0xdc>
      }
      else
      {
        underrun_count++;
 800c95e:	4b2f      	ldr	r3, [pc, #188]	; (800ca1c <USB_AudioRecordingSessionCallback+0x190>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3301      	adds	r3, #1
 800c964:	4a2d      	ldr	r2, [pc, #180]	; (800ca1c <USB_AudioRecordingSessionCallback+0x190>)
 800c966:	6013      	str	r3, [r2, #0]
      }
          rec_session->buffer.rd_ptr = rec_session->buffer.wr_ptr = 0;
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	2200      	movs	r2, #0
 800c96c:	835a      	strh	r2, [r3, #26]
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	8b5a      	ldrh	r2, [r3, #26]
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	831a      	strh	r2, [r3, #24]
#if USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO
      USB_AudioRecordingSynchroInit(&rec_session->buffer, RecordingUSBOutputNode.packet_length);
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	3314      	adds	r3, #20
 800c97a:	4a24      	ldr	r2, [pc, #144]	; (800ca0c <USB_AudioRecordingSessionCallback+0x180>)
 800c97c:	8bd2      	ldrh	r2, [r2, #30]
 800c97e:	4611      	mov	r1, r2
 800c980:	4618      	mov	r0, r3
 800c982:	f000 f92b 	bl	800cbdc <USB_AudioRecordingSynchroInit>
      RecordingUSBOutputNode.IORestart((uint32_t)&RecordingUSBOutputNode);
 800c986:	4b21      	ldr	r3, [pc, #132]	; (800ca0c <USB_AudioRecordingSessionCallback+0x180>)
 800c988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c98a:	4a20      	ldr	r2, [pc, #128]	; (800ca0c <USB_AudioRecordingSessionCallback+0x180>)
 800c98c:	4610      	mov	r0, r2
 800c98e:	4798      	blx	r3
#endif /* USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO */
    }
    break;
 800c990:	e034      	b.n	800c9fc <USB_AudioRecordingSessionCallback+0x170>
#if USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO
  case AUDIO_PACKET_RECEIVED :
    if(++RecordingSynchronizationParams.write_count_without_read == 4)
 800c992:	4b23      	ldr	r3, [pc, #140]	; (800ca20 <USB_AudioRecordingSessionCallback+0x194>)
 800c994:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	3301      	adds	r3, #1
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	b25a      	sxtb	r2, r3
 800c9a0:	4b1f      	ldr	r3, [pc, #124]	; (800ca20 <USB_AudioRecordingSessionCallback+0x194>)
 800c9a2:	f883 2020 	strb.w	r2, [r3, #32]
 800c9a6:	4b1e      	ldr	r3, [pc, #120]	; (800ca20 <USB_AudioRecordingSessionCallback+0x194>)
 800c9a8:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800c9ac:	2b04      	cmp	r3, #4
 800c9ae:	d124      	bne.n	800c9fa <USB_AudioRecordingSessionCallback+0x16e>
    {
        /* empty the buffer */
        rec_session->buffer.rd_ptr = rec_session->buffer.wr_ptr = 0;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	835a      	strh	r2, [r3, #26]
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	8b5a      	ldrh	r2, [r3, #26]
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	831a      	strh	r2, [r3, #24]
        RecordingSynchronizationParams.status = 0;
 800c9be:	4b18      	ldr	r3, [pc, #96]	; (800ca20 <USB_AudioRecordingSessionCallback+0x194>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        RecordingUSBOutputNode.IORestart((uint32_t)&RecordingUSBOutputNode);
 800c9c6:	4b11      	ldr	r3, [pc, #68]	; (800ca0c <USB_AudioRecordingSessionCallback+0x180>)
 800c9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ca:	4a10      	ldr	r2, [pc, #64]	; (800ca0c <USB_AudioRecordingSessionCallback+0x180>)
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	4798      	blx	r3
        RecordingSynchronizationParams.write_count_without_read = 0;
 800c9d0:	4b13      	ldr	r3, [pc, #76]	; (800ca20 <USB_AudioRecordingSessionCallback+0x194>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f883 2020 	strb.w	r2, [r3, #32]
    }
    break;
 800c9d8:	e00f      	b.n	800c9fa <USB_AudioRecordingSessionCallback+0x16e>
  case AUDIO_PACKET_PLAYED:
    RecordingSynchronizationParams.write_count_without_read = 0;
 800c9da:	4b11      	ldr	r3, [pc, #68]	; (800ca20 <USB_AudioRecordingSessionCallback+0x194>)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f883 2020 	strb.w	r2, [r3, #32]
    break;
 800c9e2:	e00b      	b.n	800c9fc <USB_AudioRecordingSessionCallback+0x170>
  case AUDIO_BEGIN_OF_STREAM:
    USB_AudioRecordingSynchroInit(&rec_session->buffer, RecordingUSBOutputNode.packet_length);
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	3314      	adds	r3, #20
 800c9e8:	4a08      	ldr	r2, [pc, #32]	; (800ca0c <USB_AudioRecordingSessionCallback+0x180>)
 800c9ea:	8bd2      	ldrh	r2, [r2, #30]
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f000 f8f4 	bl	800cbdc <USB_AudioRecordingSynchroInit>

    break;
 800c9f4:	e002      	b.n	800c9fc <USB_AudioRecordingSessionCallback+0x170>
#endif /* USE_AUDIO_RECORDING_USB_IMPLICIT_SYNCHRO */
  default : 
    break;
 800c9f6:	bf00      	nop
 800c9f8:	e000      	b.n	800c9fc <USB_AudioRecordingSessionCallback+0x170>
    break;
 800c9fa:	bf00      	nop
  }
  return 0;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3718      	adds	r7, #24
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	2000032c 	.word	0x2000032c
 800ca0c:	20000290 	.word	0x20000290
 800ca10:	200002c4 	.word	0x200002c4
 800ca14:	10624dd3 	.word	0x10624dd3
 800ca18:	200006ac 	.word	0x200006ac
 800ca1c:	200006a8 	.word	0x200006a8
 800ca20:	20000678 	.word	0x20000678

0800ca24 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting>:
  * @param  alternate:                  
  * @param  session_handle: session
  * @retval  : 0 if no error
  */
static int8_t  USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting( uint8_t alternate, uint32_t session_handle )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	6039      	str	r1, [r7, #0]
 800ca2e:	71fb      	strb	r3, [r7, #7]
  AUDIO_USBSession_t *rec_session;
  
  rec_session = (AUDIO_USBSession_t*)session_handle;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	60fb      	str	r3, [r7, #12]
  if(alternate  ==  0)
 800ca34:	79fb      	ldrb	r3, [r7, #7]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10a      	bne.n	800ca50 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0x2c>
  {
    if(rec_session->alternate != 0)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	7c5b      	ldrb	r3, [r3, #17]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d010      	beq.n	800ca64 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0x40>
    {
      USB_AudioRecordingSessionStop(rec_session);
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f7ff fec4 	bl	800c7d0 <USB_AudioRecordingSessionStop>
      rec_session->alternate = 0;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	745a      	strb	r2, [r3, #17]
 800ca4e:	e009      	b.n	800ca64 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0x40>
    }
  }
  else
  {
    if(rec_session->alternate  ==  0)
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	7c5b      	ldrb	r3, [r3, #17]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d105      	bne.n	800ca64 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0x40>
    {
      /* @ADD how to define threshold */
      
      USB_AudioRecordingSessionStart(rec_session);
 800ca58:	68f8      	ldr	r0, [r7, #12]
 800ca5a:	f7ff fe73 	bl	800c744 <USB_AudioRecordingSessionStart>
      rec_session->alternate = alternate;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	79fa      	ldrb	r2, [r7, #7]
 800ca62:	745a      	strb	r2, [r3, #17]
    }
  }
  return 0;
 800ca64:	2300      	movs	r3, #0
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <USB_AudioRecordingGetState>:
  *         recording SA interface status
  * @param  session_handle: session
  * @retval 0 if no error
  */
static int8_t  USB_AudioRecordingGetState(uint32_t session_handle)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  return 0;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	370c      	adds	r7, #12
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <USB_AudioRecordingSofReceived>:
  *         In addition, it computes the difference between read sample from microphone count  and written sample to USB count 
  * @param  session_handle: session handle
  * @retval None 
  */
 static void  USB_AudioRecordingSofReceived(uint32_t session_handle )
 {
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
    AUDIO_USBSession_t *rec_session;
    uint16_t read_bytes, audio_buffer_filled_size;
    
  rec_session = (AUDIO_USBSession_t*)session_handle;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	60fb      	str	r3, [r7, #12]
  if(( rec_session->session.state == AUDIO_SESSION_STARTED)&&(  RecordingSynchronizationParams.status & AUDIO_SYNC_STARTED))
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	791b      	ldrb	r3, [r3, #4]
 800ca94:	2b02      	cmp	r3, #2
 800ca96:	f040 8099 	bne.w	800cbcc <USB_AudioRecordingSofReceived+0x148>
 800ca9a:	4b4e      	ldr	r3, [pc, #312]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800ca9c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800caa0:	f003 0301 	and.w	r3, r3, #1
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f000 8091 	beq.w	800cbcc <USB_AudioRecordingSofReceived+0x148>
  {
   if(RecordingSynchronizationParams.status&AUDIO_SYNCHRO_MIC_COUNTER_STARTED)
 800caaa:	4b4a      	ldr	r3, [pc, #296]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800caac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800cab0:	f003 0308 	and.w	r3, r3, #8
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d07b      	beq.n	800cbb0 <USB_AudioRecordingSofReceived+0x12c>
   {

      read_bytes = RecordingMicrophoneNode.MicGetReadCount((uint32_t)&RecordingMicrophoneNode);
 800cab8:	4b47      	ldr	r3, [pc, #284]	; (800cbd8 <USB_AudioRecordingSofReceived+0x154>)
 800caba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cabc:	4a46      	ldr	r2, [pc, #280]	; (800cbd8 <USB_AudioRecordingSofReceived+0x154>)
 800cabe:	4610      	mov	r0, r2
 800cac0:	4798      	blx	r3
 800cac2:	4603      	mov	r3, r0
 800cac4:	817b      	strh	r3, [r7, #10]
      RecordingSynchronizationParams.written_in_current_second += read_bytes;
 800cac6:	4b43      	ldr	r3, [pc, #268]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cac8:	695a      	ldr	r2, [r3, #20]
 800caca:	897b      	ldrh	r3, [r7, #10]
 800cacc:	4413      	add	r3, r2
 800cace:	4a41      	ldr	r2, [pc, #260]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cad0:	6153      	str	r3, [r2, #20]
       if(++RecordingSynchronizationParams.sof_counter == USB_SOF_COUNT_PER_SECOND)
 800cad2:	4b40      	ldr	r3, [pc, #256]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cad4:	8b1b      	ldrh	r3, [r3, #24]
 800cad6:	3301      	adds	r3, #1
 800cad8:	b29a      	uxth	r2, r3
 800cada:	4b3e      	ldr	r3, [pc, #248]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cadc:	831a      	strh	r2, [r3, #24]
 800cade:	4b3d      	ldr	r3, [pc, #244]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cae0:	8b1b      	ldrh	r3, [r3, #24]
 800cae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cae6:	d10e      	bne.n	800cb06 <USB_AudioRecordingSofReceived+0x82>
      {
        RecordingSynchronizationParams.mic_estimated_freq = RecordingSynchronizationParams.written_in_current_second/RecordingSynchronizationParams.sample_size;/* the new estimated frequency */
 800cae8:	4b3a      	ldr	r3, [pc, #232]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800caea:	695b      	ldr	r3, [r3, #20]
 800caec:	4a39      	ldr	r2, [pc, #228]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800caee:	f992 202f 	ldrsb.w	r2, [r2, #47]	; 0x2f
 800caf2:	fbb3 f3f2 	udiv	r3, r3, r2
 800caf6:	4a37      	ldr	r2, [pc, #220]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800caf8:	6113      	str	r3, [r2, #16]
        RecordingSynchronizationParams.sof_counter = 0;
 800cafa:	4b36      	ldr	r3, [pc, #216]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	831a      	strh	r2, [r3, #24]
        RecordingSynchronizationParams.written_in_current_second = 0;
 800cb00:	4b34      	ldr	r3, [pc, #208]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	615a      	str	r2, [r3, #20]
      }
      
      RecordingSynchronizationParams.mic_usb_diff += read_bytes;
 800cb06:	4b33      	ldr	r3, [pc, #204]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb08:	69da      	ldr	r2, [r3, #28]
 800cb0a:	897b      	ldrh	r3, [r7, #10]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	4a31      	ldr	r2, [pc, #196]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb10:	61d3      	str	r3, [r2, #28]
      if(RecordingSynchronizationParams.mic_estimated_freq)
 800cb12:	4b30      	ldr	r3, [pc, #192]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d01c      	beq.n	800cb54 <USB_AudioRecordingSofReceived+0xd0>
      {
        audio_buffer_filled_size = AUDIO_BUFFER_FILLED_SIZE(&rec_session->buffer);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	8b5a      	ldrh	r2, [r3, #26]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	8b1b      	ldrh	r3, [r3, #24]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d306      	bcc.n	800cb34 <USB_AudioRecordingSofReceived+0xb0>
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	8b5a      	ldrh	r2, [r3, #26]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	8b1b      	ldrh	r3, [r3, #24]
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	e009      	b.n	800cb48 <USB_AudioRecordingSofReceived+0xc4>
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	8b5a      	ldrh	r2, [r3, #26]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	8b9b      	ldrh	r3, [r3, #28]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	8b1b      	ldrh	r3, [r3, #24]
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	813b      	strh	r3, [r7, #8]
        USB_AudioRecordingSynchroUpdate(audio_buffer_filled_size);
 800cb4a:	893b      	ldrh	r3, [r7, #8]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f000 f8a5 	bl	800cc9c <USB_AudioRecordingSynchroUpdate>
    {
      RecordingMicrophoneNode.MicStartReadCount((uint32_t)&RecordingMicrophoneNode);
      RecordingSynchronizationParams.status |= AUDIO_SYNCHRO_MIC_COUNTER_STARTED;
    }
  }
 }
 800cb52:	e03b      	b.n	800cbcc <USB_AudioRecordingSofReceived+0x148>
        if(RecordingSynchronizationParams.mic_usb_diff >= RecordingSynchronizationParams.packet_size*2)
 800cb54:	4b1f      	ldr	r3, [pc, #124]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb56:	69da      	ldr	r2, [r3, #28]
 800cb58:	4b1e      	ldr	r3, [pc, #120]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb5a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cb5c:	005b      	lsls	r3, r3, #1
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	db06      	blt.n	800cb70 <USB_AudioRecordingSofReceived+0xec>
          RecordingSynchronizationParams.samples = RecordingSynchronizationParams.sample_size;
 800cb62:	4b1c      	ldr	r3, [pc, #112]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb64:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800cb68:	461a      	mov	r2, r3
 800cb6a:	4b1a      	ldr	r3, [pc, #104]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb6c:	60da      	str	r2, [r3, #12]
 }
 800cb6e:	e02d      	b.n	800cbcc <USB_AudioRecordingSofReceived+0x148>
          if(RecordingSynchronizationParams.mic_usb_diff + 2*RecordingSynchronizationParams.packet_size <= 0)
 800cb70:	4b18      	ldr	r3, [pc, #96]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb72:	69da      	ldr	r2, [r3, #28]
 800cb74:	4b17      	ldr	r3, [pc, #92]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb76:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cb78:	005b      	lsls	r3, r3, #1
 800cb7a:	4413      	add	r3, r2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	dc06      	bgt.n	800cb8e <USB_AudioRecordingSofReceived+0x10a>
            RecordingSynchronizationParams.samples = -RecordingSynchronizationParams.sample_size;
 800cb80:	4b14      	ldr	r3, [pc, #80]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb82:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800cb86:	425b      	negs	r3, r3
 800cb88:	4a12      	ldr	r2, [pc, #72]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb8a:	60d3      	str	r3, [r2, #12]
 }
 800cb8c:	e01e      	b.n	800cbcc <USB_AudioRecordingSofReceived+0x148>
          if((RecordingSynchronizationParams.mic_usb_diff <= RecordingSynchronizationParams.packet_size)&&
 800cb8e:	4b11      	ldr	r3, [pc, #68]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb90:	69db      	ldr	r3, [r3, #28]
 800cb92:	4a10      	ldr	r2, [pc, #64]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb94:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800cb96:	4293      	cmp	r3, r2
 800cb98:	dc18      	bgt.n	800cbcc <USB_AudioRecordingSofReceived+0x148>
             (RecordingSynchronizationParams.mic_usb_diff + RecordingSynchronizationParams.packet_size >= 0))
 800cb9a:	4b0e      	ldr	r3, [pc, #56]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cb9c:	69db      	ldr	r3, [r3, #28]
 800cb9e:	4a0d      	ldr	r2, [pc, #52]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cba0:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800cba2:	4413      	add	r3, r2
          if((RecordingSynchronizationParams.mic_usb_diff <= RecordingSynchronizationParams.packet_size)&&
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	db11      	blt.n	800cbcc <USB_AudioRecordingSofReceived+0x148>
            RecordingSynchronizationParams.samples = 0;
 800cba8:	4b0a      	ldr	r3, [pc, #40]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cbaa:	2200      	movs	r2, #0
 800cbac:	60da      	str	r2, [r3, #12]
 }
 800cbae:	e00d      	b.n	800cbcc <USB_AudioRecordingSofReceived+0x148>
      RecordingMicrophoneNode.MicStartReadCount((uint32_t)&RecordingMicrophoneNode);
 800cbb0:	4b09      	ldr	r3, [pc, #36]	; (800cbd8 <USB_AudioRecordingSofReceived+0x154>)
 800cbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb4:	4a08      	ldr	r2, [pc, #32]	; (800cbd8 <USB_AudioRecordingSofReceived+0x154>)
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	4798      	blx	r3
      RecordingSynchronizationParams.status |= AUDIO_SYNCHRO_MIC_COUNTER_STARTED;
 800cbba:	4b06      	ldr	r3, [pc, #24]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cbbc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800cbc0:	f043 0308 	orr.w	r3, r3, #8
 800cbc4:	b2da      	uxtb	r2, r3
 800cbc6:	4b03      	ldr	r3, [pc, #12]	; (800cbd4 <USB_AudioRecordingSofReceived+0x150>)
 800cbc8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 }
 800cbcc:	bf00      	nop
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	20000678 	.word	0x20000678
 800cbd8:	2000032c 	.word	0x2000032c

0800cbdc <USB_AudioRecordingSynchroInit>:
  * @param  buf(IN): data buffer
  * @param  packet_length(IN): packet length
  * @retval None
  */
static void USB_AudioRecordingSynchroInit(AUDIO_CircularBuffer_t *buf, uint32_t packet_length)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  RecordingSynchronizationParams.packet_size = packet_length;
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	4b2a      	ldr	r3, [pc, #168]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cbec:	845a      	strh	r2, [r3, #34]	; 0x22
  RecordingSynchronizationParams.sample_size = AUDIO_SAMPLE_LENGTH(&RecordingAudioDescription);
 800cbee:	4b2a      	ldr	r3, [pc, #168]	; (800cc98 <USB_AudioRecordingSynchroInit+0xbc>)
 800cbf0:	791a      	ldrb	r2, [r3, #4]
 800cbf2:	4b29      	ldr	r3, [pc, #164]	; (800cc98 <USB_AudioRecordingSynchroInit+0xbc>)
 800cbf4:	7c5b      	ldrb	r3, [r3, #17]
 800cbf6:	fb12 f303 	smulbb	r3, r2, r3
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	b25a      	sxtb	r2, r3
 800cbfe:	4b25      	ldr	r3, [pc, #148]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc00:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  RecordingSynchronizationParams.buffer_fill_max_th = buf->size*3/4;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	891b      	ldrh	r3, [r3, #8]
 800cc08:	461a      	mov	r2, r3
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	da00      	bge.n	800cc16 <USB_AudioRecordingSynchroInit+0x3a>
 800cc14:	3303      	adds	r3, #3
 800cc16:	109b      	asrs	r3, r3, #2
 800cc18:	b29a      	uxth	r2, r3
 800cc1a:	4b1e      	ldr	r3, [pc, #120]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc1c:	851a      	strh	r2, [r3, #40]	; 0x28
  RecordingSynchronizationParams.buffer_fill_min_th = buf->size/4;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	891b      	ldrh	r3, [r3, #8]
 800cc22:	089b      	lsrs	r3, r3, #2
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	4b1b      	ldr	r3, [pc, #108]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc28:	855a      	strh	r2, [r3, #42]	; 0x2a
  RecordingSynchronizationParams.buffer_fill_moy = buf->size>>1;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	891b      	ldrh	r3, [r3, #8]
 800cc2e:	085b      	lsrs	r3, r3, #1
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	4b18      	ldr	r3, [pc, #96]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc34:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef USE_USB_HS
  RecordingSynchronizationParams.sample_per_s_th = packet_length<<2;
#else 
  RecordingSynchronizationParams.sample_per_s_th = packet_length>>1;
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	085b      	lsrs	r3, r3, #1
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	4b15      	ldr	r3, [pc, #84]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc3e:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* USE_USB_HS */
  RecordingSynchronizationParams.current_frequency = RecordingAudioDescription.frequency;
 800cc40:	4b15      	ldr	r3, [pc, #84]	; (800cc98 <USB_AudioRecordingSynchroInit+0xbc>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a13      	ldr	r2, [pc, #76]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc46:	6013      	str	r3, [r2, #0]
  RecordingSynchronizationParams.mic_estimated_freq = 0;
 800cc48:	4b12      	ldr	r3, [pc, #72]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	611a      	str	r2, [r3, #16]
  RecordingSynchronizationParams.write_count_without_read = 0;
 800cc4e:	4b11      	ldr	r3, [pc, #68]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2020 	strb.w	r2, [r3, #32]
  RecordingSynchronizationParams.mic_usb_diff = 0;
 800cc56:	4b0f      	ldr	r3, [pc, #60]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	61da      	str	r2, [r3, #28]
  RecordingSynchronizationParams.samples = 0;
 800cc5c:	4b0d      	ldr	r3, [pc, #52]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc5e:	2200      	movs	r2, #0
 800cc60:	60da      	str	r2, [r3, #12]
  RecordingSynchronizationParams.sof_counter = 0;
 800cc62:	4b0c      	ldr	r3, [pc, #48]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	831a      	strh	r2, [r3, #24]
  RecordingSynchronizationParams.written_in_current_second = 0;
 800cc68:	4b0a      	ldr	r3, [pc, #40]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	615a      	str	r2, [r3, #20]
  RecordingSynchronizationParams.status|= AUDIO_SYNC_NEEDED;
 800cc6e:	4b09      	ldr	r3, [pc, #36]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc70:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800cc74:	f043 0302 	orr.w	r3, r3, #2
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	4b06      	ldr	r3, [pc, #24]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc7c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  RecordingSynchronizationParams.status = AUDIO_SYNC_STARTED;
 800cc80:	4b04      	ldr	r3, [pc, #16]	; (800cc94 <USB_AudioRecordingSynchroInit+0xb8>)
 800cc82:	2201      	movs	r2, #1
 800cc84:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 800cc88:	bf00      	nop
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr
 800cc94:	20000678 	.word	0x20000678
 800cc98:	200002c4 	.word	0x200002c4

0800cc9c <USB_AudioRecordingSynchroUpdate>:
  *         update synchronization parameters, when needed. This call is done within a SOF interrupt handler.
  * @param  audio_buffer_filled_size: buffer filled size
  * @retval None
  */
static void  USB_AudioRecordingSynchroUpdate(int audio_buffer_filled_size)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b085      	sub	sp, #20
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
    uint8_t update_synchro = 0;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73fb      	strb	r3, [r7, #15]
 
   if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON)== 0)
 800cca8:	4b9f      	ldr	r3, [pc, #636]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ccaa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ccae:	f003 0310 	and.w	r3, r3, #16
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f040 80ea 	bne.w	800ce8c <USB_AudioRecordingSynchroUpdate+0x1f0>
   {
     /* NO SOON OVERRUN OR UNDERRUN DETECTED*/
     if((audio_buffer_filled_size<RecordingSynchronizationParams.buffer_fill_max_th) && (audio_buffer_filled_size>RecordingSynchronizationParams.buffer_fill_min_th))
 800ccb8:	4b9b      	ldr	r3, [pc, #620]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ccba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	f280 80c9 	bge.w	800ce58 <USB_AudioRecordingSynchroUpdate+0x1bc>
 800ccc6:	4b98      	ldr	r3, [pc, #608]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ccc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccca:	461a      	mov	r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	f340 80c2 	ble.w	800ce58 <USB_AudioRecordingSynchroUpdate+0x1bc>
     {
       /* In this block no risk of buffer overflow or underflow*/
       if((RecordingSynchronizationParams.mic_usb_diff < RecordingSynchronizationParams.sample_per_s_th)
 800ccd4:	4b94      	ldr	r3, [pc, #592]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ccd6:	69da      	ldr	r2, [r3, #28]
 800ccd8:	4b93      	ldr	r3, [pc, #588]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ccda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	da30      	bge.n	800cd42 <USB_AudioRecordingSynchroUpdate+0xa6>
          &&(RecordingSynchronizationParams.mic_usb_diff > (-RecordingSynchronizationParams.sample_per_s_th)))
 800cce0:	4b91      	ldr	r3, [pc, #580]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cce2:	69da      	ldr	r2, [r3, #28]
 800cce4:	4b90      	ldr	r3, [pc, #576]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce8:	425b      	negs	r3, r3
 800ccea:	429a      	cmp	r2, r3
 800ccec:	dd29      	ble.n	800cd42 <USB_AudioRecordingSynchroUpdate+0xa6>
       {
         /* the sample rate drift is less than limits */
          if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_DRIFT_DETECTED) == 0)
 800ccee:	4b8e      	ldr	r3, [pc, #568]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ccf0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ccf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d109      	bne.n	800cd10 <USB_AudioRecordingSynchroUpdate+0x74>
          {
           if( RecordingSynchronizationParams.mic_estimated_freq != RecordingSynchronizationParams.current_frequency)
 800ccfc:	4b8a      	ldr	r3, [pc, #552]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ccfe:	691a      	ldr	r2, [r3, #16]
 800cd00:	4b89      	ldr	r3, [pc, #548]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	f000 80a5 	beq.w	800ce54 <USB_AudioRecordingSynchroUpdate+0x1b8>
           {
             update_synchro = 1;/* frequency value is changed than compute the new frequency */
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	73fb      	strb	r3, [r7, #15]
          if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_DRIFT_DETECTED) == 0)
 800cd0e:	e0a1      	b.n	800ce54 <USB_AudioRecordingSynchroUpdate+0x1b8>
           }
          }
          else
          {
            /* in last ms a drift was detected then check if this drift is eliminated */
            if(((RecordingSynchronizationParams.mic_usb_diff<=0 )
 800cd10:	4b85      	ldr	r3, [pc, #532]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd12:	69db      	ldr	r3, [r3, #28]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	dc05      	bgt.n	800cd24 <USB_AudioRecordingSynchroUpdate+0x88>
                 &&( RecordingSynchronizationParams.mic_estimated_freq < RecordingSynchronizationParams.current_frequency))||
 800cd18:	4b83      	ldr	r3, [pc, #524]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd1a:	691a      	ldr	r2, [r3, #16]
 800cd1c:	4b82      	ldr	r3, [pc, #520]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d30b      	bcc.n	800cd3c <USB_AudioRecordingSynchroUpdate+0xa0>
               ( (RecordingSynchronizationParams.mic_usb_diff>=0 )
 800cd24:	4b80      	ldr	r3, [pc, #512]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd26:	69db      	ldr	r3, [r3, #28]
                 &&( RecordingSynchronizationParams.mic_estimated_freq < RecordingSynchronizationParams.current_frequency))||
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f2c0 8093 	blt.w	800ce54 <USB_AudioRecordingSynchroUpdate+0x1b8>
                  &&( RecordingSynchronizationParams.mic_estimated_freq > RecordingSynchronizationParams.current_frequency)))
 800cd2e:	4b7e      	ldr	r3, [pc, #504]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd30:	691a      	ldr	r2, [r3, #16]
 800cd32:	4b7d      	ldr	r3, [pc, #500]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	f240 808c 	bls.w	800ce54 <USB_AudioRecordingSynchroUpdate+0x1b8>
            {
               update_synchro = 1;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	73fb      	strb	r3, [r7, #15]
          if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_DRIFT_DETECTED) == 0)
 800cd40:	e088      	b.n	800ce54 <USB_AudioRecordingSynchroUpdate+0x1b8>
            }
          }
       }
       else
       {
        if(((RecordingSynchronizationParams.mic_usb_diff>0) && ( RecordingSynchronizationParams.mic_estimated_freq > RecordingSynchronizationParams.current_frequency))||
 800cd42:	4b79      	ldr	r3, [pc, #484]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd44:	69db      	ldr	r3, [r3, #28]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	dd05      	ble.n	800cd56 <USB_AudioRecordingSynchroUpdate+0xba>
 800cd4a:	4b77      	ldr	r3, [pc, #476]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd4c:	691a      	ldr	r2, [r3, #16]
 800cd4e:	4b76      	ldr	r3, [pc, #472]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d809      	bhi.n	800cd6a <USB_AudioRecordingSynchroUpdate+0xce>
           ((RecordingSynchronizationParams.mic_usb_diff<0) && ( RecordingSynchronizationParams.mic_estimated_freq < RecordingSynchronizationParams.current_frequency)))
 800cd56:	4b74      	ldr	r3, [pc, #464]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd58:	69db      	ldr	r3, [r3, #28]
        if(((RecordingSynchronizationParams.mic_usb_diff>0) && ( RecordingSynchronizationParams.mic_estimated_freq > RecordingSynchronizationParams.current_frequency))||
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	da08      	bge.n	800cd70 <USB_AudioRecordingSynchroUpdate+0xd4>
           ((RecordingSynchronizationParams.mic_usb_diff<0) && ( RecordingSynchronizationParams.mic_estimated_freq < RecordingSynchronizationParams.current_frequency)))
 800cd5e:	4b72      	ldr	r3, [pc, #456]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd60:	691a      	ldr	r2, [r3, #16]
 800cd62:	4b71      	ldr	r3, [pc, #452]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d202      	bcs.n	800cd70 <USB_AudioRecordingSynchroUpdate+0xd4>
        {
           update_synchro = 1;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	73fb      	strb	r3, [r7, #15]
 800cd6e:	e072      	b.n	800ce56 <USB_AudioRecordingSynchroUpdate+0x1ba>
        }
        else
        {
          if(RecordingSynchronizationParams.mic_usb_diff > 0)
 800cd70:	4b6d      	ldr	r3, [pc, #436]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd72:	69db      	ldr	r3, [r3, #28]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	dd2a      	ble.n	800cdce <USB_AudioRecordingSynchroUpdate+0x132>
          {
            RecordingSynchronizationParams.current_frequency++;
 800cd78:	4b6b      	ldr	r3, [pc, #428]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	4a6a      	ldr	r2, [pc, #424]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd80:	6013      	str	r3, [r2, #0]
            RecordingSynchronizationParams.sample_step += (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)? (float)RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND:(float)-RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 800cd82:	4b69      	ldr	r3, [pc, #420]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd84:	ed93 7a01 	vldr	s14, [r3, #4]
 800cd88:	4b68      	ldr	r3, [pc, #416]	; (800cf2c <USB_AudioRecordingSynchroUpdate+0x290>)
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	4b66      	ldr	r3, [pc, #408]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d20b      	bcs.n	800cdac <USB_AudioRecordingSynchroUpdate+0x110>
 800cd94:	4b64      	ldr	r3, [pc, #400]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cd96:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800cd9a:	ee07 3a90 	vmov	s15, r3
 800cd9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cda2:	ed9f 6a63 	vldr	s12, [pc, #396]	; 800cf30 <USB_AudioRecordingSynchroUpdate+0x294>
 800cda6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800cdaa:	e00b      	b.n	800cdc4 <USB_AudioRecordingSynchroUpdate+0x128>
 800cdac:	4b5e      	ldr	r3, [pc, #376]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cdae:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800cdb2:	425b      	negs	r3, r3
 800cdb4:	ee07 3a90 	vmov	s15, r3
 800cdb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cdbc:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 800cf30 <USB_AudioRecordingSynchroUpdate+0x294>
 800cdc0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800cdc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cdc8:	4b57      	ldr	r3, [pc, #348]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cdca:	edc3 7a01 	vstr	s15, [r3, #4]
          }
           if(RecordingSynchronizationParams.mic_usb_diff < 0)
 800cdce:	4b56      	ldr	r3, [pc, #344]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cdd0:	69db      	ldr	r3, [r3, #28]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	da2a      	bge.n	800ce2c <USB_AudioRecordingSynchroUpdate+0x190>
          {
            RecordingSynchronizationParams.current_frequency--;
 800cdd6:	4b54      	ldr	r3, [pc, #336]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	4a52      	ldr	r2, [pc, #328]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cdde:	6013      	str	r3, [r2, #0]
            RecordingSynchronizationParams.sample_step += (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)? (float)-RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND:(float)RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 800cde0:	4b51      	ldr	r3, [pc, #324]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cde2:	ed93 7a01 	vldr	s14, [r3, #4]
 800cde6:	4b51      	ldr	r3, [pc, #324]	; (800cf2c <USB_AudioRecordingSynchroUpdate+0x290>)
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	4b4f      	ldr	r3, [pc, #316]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d20c      	bcs.n	800ce0c <USB_AudioRecordingSynchroUpdate+0x170>
 800cdf2:	4b4d      	ldr	r3, [pc, #308]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cdf4:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800cdf8:	425b      	negs	r3, r3
 800cdfa:	ee07 3a90 	vmov	s15, r3
 800cdfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ce02:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 800cf30 <USB_AudioRecordingSynchroUpdate+0x294>
 800ce06:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800ce0a:	e00a      	b.n	800ce22 <USB_AudioRecordingSynchroUpdate+0x186>
 800ce0c:	4b46      	ldr	r3, [pc, #280]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce0e:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800ce12:	ee07 3a90 	vmov	s15, r3
 800ce16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ce1a:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800cf30 <USB_AudioRecordingSynchroUpdate+0x294>
 800ce1e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800ce22:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce26:	4b40      	ldr	r3, [pc, #256]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce28:	edc3 7a01 	vstr	s15, [r3, #4]
          }
          RecordingSynchronizationParams.sample_frac_sum = RecordingSynchronizationParams.sample_size;
 800ce2c:	4b3e      	ldr	r3, [pc, #248]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce2e:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800ce32:	ee07 3a90 	vmov	s15, r3
 800ce36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce3a:	4b3b      	ldr	r3, [pc, #236]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce3c:	edc3 7a02 	vstr	s15, [r3, #8]
          RecordingSynchronizationParams.status|= AUDIO_SYNCHRO_DRIFT_DETECTED;
 800ce40:	4b39      	ldr	r3, [pc, #228]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce42:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ce46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	4b36      	ldr	r3, [pc, #216]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce4e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
       if((RecordingSynchronizationParams.mic_usb_diff < RecordingSynchronizationParams.sample_per_s_th)
 800ce52:	e03a      	b.n	800ceca <USB_AudioRecordingSynchroUpdate+0x22e>
          if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_DRIFT_DETECTED) == 0)
 800ce54:	bf00      	nop
       if((RecordingSynchronizationParams.mic_usb_diff < RecordingSynchronizationParams.sample_per_s_th)
 800ce56:	e038      	b.n	800ceca <USB_AudioRecordingSynchroUpdate+0x22e>
        }
       }
     }
     else
     {
       RecordingSynchronizationParams.samples = (audio_buffer_filled_size>=RecordingSynchronizationParams.buffer_fill_max_th)? RecordingSynchronizationParams.sample_size:-RecordingSynchronizationParams.sample_size;
 800ce58:	4b33      	ldr	r3, [pc, #204]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4293      	cmp	r3, r2
 800ce62:	db03      	blt.n	800ce6c <USB_AudioRecordingSynchroUpdate+0x1d0>
 800ce64:	4b30      	ldr	r3, [pc, #192]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce66:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800ce6a:	e003      	b.n	800ce74 <USB_AudioRecordingSynchroUpdate+0x1d8>
 800ce6c:	4b2e      	ldr	r3, [pc, #184]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce6e:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800ce72:	425b      	negs	r3, r3
 800ce74:	4a2c      	ldr	r2, [pc, #176]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce76:	60d3      	str	r3, [r2, #12]
       RecordingSynchronizationParams.status|= AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON;
 800ce78:	4b2b      	ldr	r3, [pc, #172]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce7a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ce7e:	f043 0310 	orr.w	r3, r3, #16
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	4b28      	ldr	r3, [pc, #160]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce86:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800ce8a:	e01e      	b.n	800ceca <USB_AudioRecordingSynchroUpdate+0x22e>
     }
   }
   else
   {
     if(((RecordingSynchronizationParams.samples>0)&&(audio_buffer_filled_size>=RecordingSynchronizationParams.buffer_fill_moy))||
 800ce8c:	4b26      	ldr	r3, [pc, #152]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	dd05      	ble.n	800cea0 <USB_AudioRecordingSynchroUpdate+0x204>
 800ce94:	4b24      	ldr	r3, [pc, #144]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ce96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ce98:	461a      	mov	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	da09      	bge.n	800ceb4 <USB_AudioRecordingSynchroUpdate+0x218>
        ((RecordingSynchronizationParams.samples<0)&&(audio_buffer_filled_size<=RecordingSynchronizationParams.buffer_fill_moy)))
 800cea0:	4b21      	ldr	r3, [pc, #132]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cea2:	68db      	ldr	r3, [r3, #12]
     if(((RecordingSynchronizationParams.samples>0)&&(audio_buffer_filled_size>=RecordingSynchronizationParams.buffer_fill_moy))||
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	da10      	bge.n	800ceca <USB_AudioRecordingSynchroUpdate+0x22e>
        ((RecordingSynchronizationParams.samples<0)&&(audio_buffer_filled_size<=RecordingSynchronizationParams.buffer_fill_moy)))
 800cea8:	4b1f      	ldr	r3, [pc, #124]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ceaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ceac:	461a      	mov	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	dc0a      	bgt.n	800ceca <USB_AudioRecordingSynchroUpdate+0x22e>
     {
       update_synchro = 1;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	73fb      	strb	r3, [r7, #15]
       RecordingSynchronizationParams.status &= ~AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON;
 800ceb8:	4b1b      	ldr	r3, [pc, #108]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ceba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800cebe:	f023 0310 	bic.w	r3, r3, #16
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	4b18      	ldr	r3, [pc, #96]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cec6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
     }
   }
   
   if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON) == 0)
 800ceca:	4b17      	ldr	r3, [pc, #92]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cecc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800ced0:	f003 0310 	and.w	r3, r3, #16
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f040 8099 	bne.w	800d00c <USB_AudioRecordingSynchroUpdate+0x370>
   {
     if(update_synchro)
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d050      	beq.n	800cf82 <USB_AudioRecordingSynchroUpdate+0x2e6>
     {
       RecordingSynchronizationParams.current_frequency = RecordingSynchronizationParams.mic_estimated_freq;
 800cee0:	4b11      	ldr	r3, [pc, #68]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	4a10      	ldr	r2, [pc, #64]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cee6:	6013      	str	r3, [r2, #0]
       if(RecordingAudioDescription.frequency > RecordingSynchronizationParams.current_frequency)
 800cee8:	4b10      	ldr	r3, [pc, #64]	; (800cf2c <USB_AudioRecordingSynchroUpdate+0x290>)
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	4b0e      	ldr	r3, [pc, #56]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d91f      	bls.n	800cf34 <USB_AudioRecordingSynchroUpdate+0x298>
       {
         RecordingSynchronizationParams.sample_step = (float)((RecordingAudioDescription.frequency - RecordingSynchronizationParams.current_frequency))*RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 800cef4:	4b0d      	ldr	r3, [pc, #52]	; (800cf2c <USB_AudioRecordingSynchroUpdate+0x290>)
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	4b0b      	ldr	r3, [pc, #44]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	ee07 3a90 	vmov	s15, r3
 800cf02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cf06:	4b08      	ldr	r3, [pc, #32]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cf08:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800cf0c:	ee07 3a90 	vmov	s15, r3
 800cf10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf18:	eddf 6a05 	vldr	s13, [pc, #20]	; 800cf30 <USB_AudioRecordingSynchroUpdate+0x294>
 800cf1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cf20:	4b01      	ldr	r3, [pc, #4]	; (800cf28 <USB_AudioRecordingSynchroUpdate+0x28c>)
 800cf22:	edc3 7a01 	vstr	s15, [r3, #4]
 800cf26:	e01e      	b.n	800cf66 <USB_AudioRecordingSynchroUpdate+0x2ca>
 800cf28:	20000678 	.word	0x20000678
 800cf2c:	200002c4 	.word	0x200002c4
 800cf30:	447a0000 	.word	0x447a0000
       }
       else
       {
         RecordingSynchronizationParams.sample_step = (float)((RecordingSynchronizationParams.current_frequency- RecordingAudioDescription.frequency))*RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 800cf34:	4b38      	ldr	r3, [pc, #224]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	4b38      	ldr	r3, [pc, #224]	; (800d01c <USB_AudioRecordingSynchroUpdate+0x380>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	ee07 3a90 	vmov	s15, r3
 800cf42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cf46:	4b34      	ldr	r3, [pc, #208]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cf48:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800cf4c:	ee07 3a90 	vmov	s15, r3
 800cf50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cf54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf58:	eddf 6a31 	vldr	s13, [pc, #196]	; 800d020 <USB_AudioRecordingSynchroUpdate+0x384>
 800cf5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cf60:	4b2d      	ldr	r3, [pc, #180]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cf62:	edc3 7a01 	vstr	s15, [r3, #4]
       }
       RecordingSynchronizationParams.status = (AUDIO_SYNC_NEEDED|AUDIO_SYNC_STARTED|AUDIO_SYNCHRO_MIC_COUNTER_STARTED);
 800cf66:	4b2c      	ldr	r3, [pc, #176]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cf68:	220b      	movs	r2, #11
 800cf6a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
       RecordingSynchronizationParams.sample_frac_sum = 0;
 800cf6e:	4b2a      	ldr	r3, [pc, #168]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cf70:	f04f 0200 	mov.w	r2, #0
 800cf74:	609a      	str	r2, [r3, #8]
       RecordingSynchronizationParams.samples = 0;
 800cf76:	4b28      	ldr	r3, [pc, #160]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cf78:	2200      	movs	r2, #0
 800cf7a:	60da      	str	r2, [r3, #12]
       RecordingSynchronizationParams.mic_usb_diff = 0;
 800cf7c:	4b26      	ldr	r3, [pc, #152]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	61da      	str	r2, [r3, #28]
    }
    
    if(RecordingSynchronizationParams.sample_step)
 800cf82:	4b25      	ldr	r3, [pc, #148]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cf84:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf88:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf90:	d03c      	beq.n	800d00c <USB_AudioRecordingSynchroUpdate+0x370>
    {
       RecordingSynchronizationParams.sample_frac_sum+=RecordingSynchronizationParams.sample_step;
 800cf92:	4b21      	ldr	r3, [pc, #132]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cf94:	ed93 7a02 	vldr	s14, [r3, #8]
 800cf98:	4b1f      	ldr	r3, [pc, #124]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cf9a:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfa2:	4b1d      	ldr	r3, [pc, #116]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cfa4:	edc3 7a02 	vstr	s15, [r3, #8]
       if(RecordingSynchronizationParams.sample_frac_sum>RecordingSynchronizationParams.sample_size)
 800cfa8:	4b1b      	ldr	r3, [pc, #108]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cfaa:	ed93 7a02 	vldr	s14, [r3, #8]
 800cfae:	4b1a      	ldr	r3, [pc, #104]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cfb0:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800cfb4:	ee07 3a90 	vmov	s15, r3
 800cfb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cfbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cfc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc4:	dd1f      	ble.n	800d006 <USB_AudioRecordingSynchroUpdate+0x36a>
       {
         RecordingSynchronizationParams.samples = (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)?RecordingSynchronizationParams.sample_size:-RecordingSynchronizationParams.sample_size;
 800cfc6:	4b15      	ldr	r3, [pc, #84]	; (800d01c <USB_AudioRecordingSynchroUpdate+0x380>)
 800cfc8:	681a      	ldr	r2, [r3, #0]
 800cfca:	4b13      	ldr	r3, [pc, #76]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d203      	bcs.n	800cfda <USB_AudioRecordingSynchroUpdate+0x33e>
 800cfd2:	4b11      	ldr	r3, [pc, #68]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cfd4:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800cfd8:	e003      	b.n	800cfe2 <USB_AudioRecordingSynchroUpdate+0x346>
 800cfda:	4b0f      	ldr	r3, [pc, #60]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cfdc:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800cfe0:	425b      	negs	r3, r3
 800cfe2:	4a0d      	ldr	r2, [pc, #52]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cfe4:	60d3      	str	r3, [r2, #12]
         RecordingSynchronizationParams.sample_frac_sum -= RecordingSynchronizationParams.sample_size;
 800cfe6:	4b0c      	ldr	r3, [pc, #48]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cfe8:	ed93 7a02 	vldr	s14, [r3, #8]
 800cfec:	4b0a      	ldr	r3, [pc, #40]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800cfee:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 800cff2:	ee07 3a90 	vmov	s15, r3
 800cff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cffe:	4b06      	ldr	r3, [pc, #24]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800d000:	edc3 7a02 	vstr	s15, [r3, #8]
       {
         RecordingSynchronizationParams.samples = 0;
       }
     }
   }
}
 800d004:	e002      	b.n	800d00c <USB_AudioRecordingSynchroUpdate+0x370>
         RecordingSynchronizationParams.samples = 0;
 800d006:	4b04      	ldr	r3, [pc, #16]	; (800d018 <USB_AudioRecordingSynchroUpdate+0x37c>)
 800d008:	2200      	movs	r2, #0
 800d00a:	60da      	str	r2, [r3, #12]
}
 800d00c:	bf00      	nop
 800d00e:	3714      	adds	r7, #20
 800d010:	46bd      	mov	sp, r7
 800d012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d016:	4770      	bx	lr
 800d018:	20000678 	.word	0x20000678
 800d01c:	200002c4 	.word	0x200002c4
 800d020:	447a0000 	.word	0x447a0000

0800d024 <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt>:
  *         get sample count to add or remove in next main circular buffer read call
  * @param  session_handle(IN): session handler
  * @retval sample to add(positive value) or remove (negative value)
  */
int8_t  USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt(struct  AUDIO_Session* session_handle)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
   if(RecordingSynchronizationParams.status&AUDIO_SYNC_STARTED)
 800d02c:	4b08      	ldr	r3, [pc, #32]	; (800d050 <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt+0x2c>)
 800d02e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d032:	f003 0301 	and.w	r3, r3, #1
 800d036:	2b00      	cmp	r3, #0
 800d038:	d003      	beq.n	800d042 <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt+0x1e>
   {
     return RecordingSynchronizationParams.samples;
 800d03a:	4b05      	ldr	r3, [pc, #20]	; (800d050 <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt+0x2c>)
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	b25b      	sxtb	r3, r3
 800d040:	e000      	b.n	800d044 <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt+0x20>
   }
   return 0;
 800d042:	2300      	movs	r3, #0
}
 800d044:	4618      	mov	r0, r3
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr
 800d050:	20000678 	.word	0x20000678

0800d054 <USB_AudioRecordingSynchronizationNotificationSamplesRead>:
  *         set last packet written bytes
  * @param  session_handle: session handles
  * @retval bytes : written or read
  */
 int8_t  USB_AudioRecordingSynchronizationNotificationSamplesRead(struct AUDIO_Session* session_handle, uint16_t bytes)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	460b      	mov	r3, r1
 800d05e:	807b      	strh	r3, [r7, #2]
   if(RecordingSynchronizationParams.status&AUDIO_SYNC_STARTED)
 800d060:	4b09      	ldr	r3, [pc, #36]	; (800d088 <USB_AudioRecordingSynchronizationNotificationSamplesRead+0x34>)
 800d062:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d066:	f003 0301 	and.w	r3, r3, #1
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d005      	beq.n	800d07a <USB_AudioRecordingSynchronizationNotificationSamplesRead+0x26>
   {
     RecordingSynchronizationParams.mic_usb_diff -= bytes;
 800d06e:	4b06      	ldr	r3, [pc, #24]	; (800d088 <USB_AudioRecordingSynchronizationNotificationSamplesRead+0x34>)
 800d070:	69da      	ldr	r2, [r3, #28]
 800d072:	887b      	ldrh	r3, [r7, #2]
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	4a04      	ldr	r2, [pc, #16]	; (800d088 <USB_AudioRecordingSynchronizationNotificationSamplesRead+0x34>)
 800d078:	61d3      	str	r3, [r2, #28]
   }
   return 0;
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr
 800d088:	20000678 	.word	0x20000678

0800d08c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d090:	2200      	movs	r2, #0
 800d092:	4913      	ldr	r1, [pc, #76]	; (800d0e0 <MX_USB_DEVICE_Init+0x54>)
 800d094:	4813      	ldr	r0, [pc, #76]	; (800d0e4 <MX_USB_DEVICE_Init+0x58>)
 800d096:	f7fd fdd5 	bl	800ac44 <USBD_Init>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d001      	beq.n	800d0a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d0a0:	f7f3 fb28 	bl	80006f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800d0a4:	4910      	ldr	r1, [pc, #64]	; (800d0e8 <MX_USB_DEVICE_Init+0x5c>)
 800d0a6:	480f      	ldr	r0, [pc, #60]	; (800d0e4 <MX_USB_DEVICE_Init+0x58>)
 800d0a8:	f7fd fdfc 	bl	800aca4 <USBD_RegisterClass>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d0b2:	f7f3 fb1f 	bl	80006f4 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &audio_class_interface) != USBD_OK)
 800d0b6:	490d      	ldr	r1, [pc, #52]	; (800d0ec <MX_USB_DEVICE_Init+0x60>)
 800d0b8:	480a      	ldr	r0, [pc, #40]	; (800d0e4 <MX_USB_DEVICE_Init+0x58>)
 800d0ba:	f7fd fda7 	bl	800ac0c <USBD_AUDIO_RegisterInterface>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d001      	beq.n	800d0c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d0c4:	f7f3 fb16 	bl	80006f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d0c8:	4806      	ldr	r0, [pc, #24]	; (800d0e4 <MX_USB_DEVICE_Init+0x58>)
 800d0ca:	f7fd fe12 	bl	800acf2 <USBD_Start>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d001      	beq.n	800d0d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d0d4:	f7f3 fb0e 	bl	80006f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800d0d8:	f7f9 f9e8 	bl	80064ac <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d0dc:	bf00      	nop
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	200000dc 	.word	0x200000dc
 800d0e4:	20000d5c 	.word	0x20000d5c
 800d0e8:	20000014 	.word	0x20000014
 800d0ec:	200000c8 	.word	0x200000c8

0800d0f0 <USB_AUDIO_GetConfigDescriptor>:
  *         return configuration descriptor
  * @param  desc                             
  * @retval the configuration descriptor size
  */
uint16_t USB_AUDIO_GetConfigDescriptor(uint8_t **desc)
{ 
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  if(desc)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <USB_AUDIO_GetConfigDescriptor+0x14>
  {
    *desc = USBD_AUDIO_ConfigDescriptor;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4a04      	ldr	r2, [pc, #16]	; (800d114 <USB_AUDIO_GetConfigDescriptor+0x24>)
 800d102:	601a      	str	r2, [r3, #0]
  }
  return (CONFIG_DESCRIPTOR_SIZE);
 800d104:	236e      	movs	r3, #110	; 0x6e
}
 800d106:	4618      	mov	r0, r3
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	20000058 	.word	0x20000058

0800d118 <AUDIO_USB_Init>:
  * @param  usb_audio_class_function(OUT): description and callback about the audio function , like list of endpoints, see structure definition for more information
  * @param  private_data:  for future usage
  * @retval status
  */
static int8_t  AUDIO_USB_Init(USBD_AUDIO_FunctionDescriptionfTypeDef* usb_audio_class_function , uint32_t private_data)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b086      	sub	sp, #24
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  int interface_offset=0, total_control_count=0;
 800d122:	2300      	movs	r3, #0
 800d124:	617b      	str	r3, [r7, #20]
 800d126:	2300      	movs	r3, #0
 800d128:	613b      	str	r3, [r7, #16]
  uint8_t control_count = 0;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73fb      	strb	r3, [r7, #15]
  interface_offset++;
  total_control_count += control_count;
#endif /* USE_USB_AUDIO_PLAYBACK*/
#if  USE_USB_AUDIO_RECORDING 
  /* Initializes the USB record session */
  AUDIO_RecordingSessionInit(&usb_audio_class_function->as_interfaces[interface_offset], &(usb_audio_class_function->controls[total_control_count]), &control_count, (uint32_t) &USB_AudioRecordingSession);
 800d12e:	697a      	ldr	r2, [r7, #20]
 800d130:	4613      	mov	r3, r2
 800d132:	00db      	lsls	r3, r3, #3
 800d134:	1a9b      	subs	r3, r3, r2
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	3320      	adds	r3, #32
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	4413      	add	r3, r2
 800d13e:	1d18      	adds	r0, r3, #4
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	011b      	lsls	r3, r3, #4
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	4413      	add	r3, r2
 800d148:	1d19      	adds	r1, r3, #4
 800d14a:	4b0d      	ldr	r3, [pc, #52]	; (800d180 <AUDIO_USB_Init+0x68>)
 800d14c:	f107 020f 	add.w	r2, r7, #15
 800d150:	f7ff fa24 	bl	800c59c <AUDIO_RecordingSessionInit>
  interface_offset++;
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	3301      	adds	r3, #1
 800d158:	617b      	str	r3, [r7, #20]
  total_control_count += control_count;
 800d15a:	7bfb      	ldrb	r3, [r7, #15]
 800d15c:	461a      	mov	r2, r3
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	4413      	add	r3, r2
 800d162:	613b      	str	r3, [r7, #16]
#endif /* USE_USB_AUDIO_RECORDING*/
  usb_audio_class_function->as_interfaces_count = interface_offset;
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	b2da      	uxtb	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	705a      	strb	r2, [r3, #1]
  usb_audio_class_function->control_count = total_control_count;
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	b2da      	uxtb	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	701a      	strb	r2, [r3, #0]
#if USE_AUDIO_USB_INTERRUPT
  usb_audio_class_function->interrupt_ep_num = USB_AUDIO_CONFIG_INTERRUPT_EP_IN;
#endif /* USE_AUDIO_USB_INTERRUPT */
  return 0;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	2000102c 	.word	0x2000102c

0800d184 <AUDIO_USB_DeInit>:
  * @param  private_data:  for future usage
  * @retval status 0 if no error
  */

static int8_t  AUDIO_USB_DeInit(USBD_AUDIO_FunctionDescriptionfTypeDef* audio_function, uint32_t private_data)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  int i=0;
 800d18e:	2300      	movs	r3, #0
 800d190:	60fb      	str	r3, [r7, #12]
  USB_AudioPlabackSession.SessionDeInit( (uint32_t) &USB_AudioPlabackSession);
  audio_function->as_interfaces[0].alternate = 0;
  i++;
#endif /* USE_USB_AUDIO_PLAYBACK*/
#if  USE_USB_AUDIO_RECORDING
  USB_AudioRecordingSession.SessionDeInit((uint32_t) &USB_AudioRecordingSession);
 800d192:	4b0a      	ldr	r3, [pc, #40]	; (800d1bc <AUDIO_USB_DeInit+0x38>)
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	4a09      	ldr	r2, [pc, #36]	; (800d1bc <AUDIO_USB_DeInit+0x38>)
 800d198:	4610      	mov	r0, r2
 800d19a:	4798      	blx	r3
  audio_function->as_interfaces[i].alternate = 0;
 800d19c:	6879      	ldr	r1, [r7, #4]
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	00db      	lsls	r3, r3, #3
 800d1a4:	1a9b      	subs	r3, r3, r2
 800d1a6:	00db      	lsls	r3, r3, #3
 800d1a8:	440b      	add	r3, r1
 800d1aa:	3326      	adds	r3, #38	; 0x26
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	701a      	strb	r2, [r3, #0]
#endif /* USE_USB_AUDIO_RECORDING*/
  
  return 0;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	2000102c 	.word	0x2000102c

0800d1c0 <AUDIO_USB_GetState>:
  *         This function returns the USB Audio state
  * @param  private_data:  for future usage
  * @retval status
  */
static int8_t  AUDIO_USB_GetState(uint32_t private_data)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  return 0;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <AUDIO_USB_GetConfigDesc>:
  * @param  psize:  configuration descriptor length
  * @param  private_data:  for future usage
  * @retval status
  */
static int8_t  AUDIO_USB_GetConfigDesc (uint8_t ** pdata, uint16_t * psize, uint32_t private_data)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b084      	sub	sp, #16
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	60f8      	str	r0, [r7, #12]
 800d1de:	60b9      	str	r1, [r7, #8]
 800d1e0:	607a      	str	r2, [r7, #4]
   *psize =  USB_AUDIO_GetConfigDescriptor(pdata);
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	f7ff ff84 	bl	800d0f0 <USB_AUDIO_GetConfigDescriptor>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	801a      	strh	r2, [r3, #0]
    return 0;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
	...

0800d1fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	4603      	mov	r3, r0
 800d204:	6039      	str	r1, [r7, #0]
 800d206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	2212      	movs	r2, #18
 800d20c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d20e:	4b03      	ldr	r3, [pc, #12]	; (800d21c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d210:	4618      	mov	r0, r3
 800d212:	370c      	adds	r7, #12
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr
 800d21c:	200000f8 	.word	0x200000f8

0800d220 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	4603      	mov	r3, r0
 800d228:	6039      	str	r1, [r7, #0]
 800d22a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2204      	movs	r2, #4
 800d230:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d232:	4b03      	ldr	r3, [pc, #12]	; (800d240 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d234:	4618      	mov	r0, r3
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	2000010c 	.word	0x2000010c

0800d244 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	6039      	str	r1, [r7, #0]
 800d24e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d105      	bne.n	800d262 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	4907      	ldr	r1, [pc, #28]	; (800d278 <USBD_FS_ProductStrDescriptor+0x34>)
 800d25a:	4808      	ldr	r0, [pc, #32]	; (800d27c <USBD_FS_ProductStrDescriptor+0x38>)
 800d25c:	f7fe fd7b 	bl	800bd56 <USBD_GetString>
 800d260:	e004      	b.n	800d26c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d262:	683a      	ldr	r2, [r7, #0]
 800d264:	4904      	ldr	r1, [pc, #16]	; (800d278 <USBD_FS_ProductStrDescriptor+0x34>)
 800d266:	4805      	ldr	r0, [pc, #20]	; (800d27c <USBD_FS_ProductStrDescriptor+0x38>)
 800d268:	f7fe fd75 	bl	800bd56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d26c:	4b02      	ldr	r3, [pc, #8]	; (800d278 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	2000104c 	.word	0x2000104c
 800d27c:	0800dd10 	.word	0x0800dd10

0800d280 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	4603      	mov	r3, r0
 800d288:	6039      	str	r1, [r7, #0]
 800d28a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d28c:	683a      	ldr	r2, [r7, #0]
 800d28e:	4904      	ldr	r1, [pc, #16]	; (800d2a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d290:	4804      	ldr	r0, [pc, #16]	; (800d2a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d292:	f7fe fd60 	bl	800bd56 <USBD_GetString>
  return USBD_StrDesc;
 800d296:	4b02      	ldr	r3, [pc, #8]	; (800d2a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	2000104c 	.word	0x2000104c
 800d2a4:	0800dd24 	.word	0x0800dd24

0800d2a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	6039      	str	r1, [r7, #0]
 800d2b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	221a      	movs	r2, #26
 800d2b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d2ba:	f000 f843 	bl	800d344 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d2be:	4b02      	ldr	r3, [pc, #8]	; (800d2c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3708      	adds	r7, #8
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	20000110 	.word	0x20000110

0800d2cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	6039      	str	r1, [r7, #0]
 800d2d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d2d8:	79fb      	ldrb	r3, [r7, #7]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d105      	bne.n	800d2ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	4907      	ldr	r1, [pc, #28]	; (800d300 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2e2:	4808      	ldr	r0, [pc, #32]	; (800d304 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2e4:	f7fe fd37 	bl	800bd56 <USBD_GetString>
 800d2e8:	e004      	b.n	800d2f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2ea:	683a      	ldr	r2, [r7, #0]
 800d2ec:	4904      	ldr	r1, [pc, #16]	; (800d300 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2ee:	4805      	ldr	r0, [pc, #20]	; (800d304 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2f0:	f7fe fd31 	bl	800bd56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2f4:	4b02      	ldr	r3, [pc, #8]	; (800d300 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	2000104c 	.word	0x2000104c
 800d304:	0800dd38 	.word	0x0800dd38

0800d308 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	4603      	mov	r3, r0
 800d310:	6039      	str	r1, [r7, #0]
 800d312:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d314:	79fb      	ldrb	r3, [r7, #7]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d105      	bne.n	800d326 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d31a:	683a      	ldr	r2, [r7, #0]
 800d31c:	4907      	ldr	r1, [pc, #28]	; (800d33c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d31e:	4808      	ldr	r0, [pc, #32]	; (800d340 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d320:	f7fe fd19 	bl	800bd56 <USBD_GetString>
 800d324:	e004      	b.n	800d330 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d326:	683a      	ldr	r2, [r7, #0]
 800d328:	4904      	ldr	r1, [pc, #16]	; (800d33c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d32a:	4805      	ldr	r0, [pc, #20]	; (800d340 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d32c:	f7fe fd13 	bl	800bd56 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d330:	4b02      	ldr	r3, [pc, #8]	; (800d33c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d332:	4618      	mov	r0, r3
 800d334:	3708      	adds	r7, #8
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	2000104c 	.word	0x2000104c
 800d340:	0800dd48 	.word	0x0800dd48

0800d344 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d34a:	4b0f      	ldr	r3, [pc, #60]	; (800d388 <Get_SerialNum+0x44>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d350:	4b0e      	ldr	r3, [pc, #56]	; (800d38c <Get_SerialNum+0x48>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d356:	4b0e      	ldr	r3, [pc, #56]	; (800d390 <Get_SerialNum+0x4c>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d35c:	68fa      	ldr	r2, [r7, #12]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4413      	add	r3, r2
 800d362:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d009      	beq.n	800d37e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d36a:	2208      	movs	r2, #8
 800d36c:	4909      	ldr	r1, [pc, #36]	; (800d394 <Get_SerialNum+0x50>)
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f000 f814 	bl	800d39c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d374:	2204      	movs	r2, #4
 800d376:	4908      	ldr	r1, [pc, #32]	; (800d398 <Get_SerialNum+0x54>)
 800d378:	68b8      	ldr	r0, [r7, #8]
 800d37a:	f000 f80f 	bl	800d39c <IntToUnicode>
  }
}
 800d37e:	bf00      	nop
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	1ff1e800 	.word	0x1ff1e800
 800d38c:	1ff1e804 	.word	0x1ff1e804
 800d390:	1ff1e808 	.word	0x1ff1e808
 800d394:	20000112 	.word	0x20000112
 800d398:	20000122 	.word	0x20000122

0800d39c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b087      	sub	sp, #28
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	75fb      	strb	r3, [r7, #23]
 800d3b2:	e027      	b.n	800d404 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	0f1b      	lsrs	r3, r3, #28
 800d3b8:	2b09      	cmp	r3, #9
 800d3ba:	d80b      	bhi.n	800d3d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	0f1b      	lsrs	r3, r3, #28
 800d3c0:	b2da      	uxtb	r2, r3
 800d3c2:	7dfb      	ldrb	r3, [r7, #23]
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	440b      	add	r3, r1
 800d3cc:	3230      	adds	r2, #48	; 0x30
 800d3ce:	b2d2      	uxtb	r2, r2
 800d3d0:	701a      	strb	r2, [r3, #0]
 800d3d2:	e00a      	b.n	800d3ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	0f1b      	lsrs	r3, r3, #28
 800d3d8:	b2da      	uxtb	r2, r3
 800d3da:	7dfb      	ldrb	r3, [r7, #23]
 800d3dc:	005b      	lsls	r3, r3, #1
 800d3de:	4619      	mov	r1, r3
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	440b      	add	r3, r1
 800d3e4:	3237      	adds	r2, #55	; 0x37
 800d3e6:	b2d2      	uxtb	r2, r2
 800d3e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	011b      	lsls	r3, r3, #4
 800d3ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
 800d3f2:	005b      	lsls	r3, r3, #1
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d3fe:	7dfb      	ldrb	r3, [r7, #23]
 800d400:	3301      	adds	r3, #1
 800d402:	75fb      	strb	r3, [r7, #23]
 800d404:	7dfa      	ldrb	r2, [r7, #23]
 800d406:	79fb      	ldrb	r3, [r7, #7]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d3d3      	bcc.n	800d3b4 <IntToUnicode+0x18>
  }
}
 800d40c:	bf00      	nop
 800d40e:	bf00      	nop
 800d410:	371c      	adds	r7, #28
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
	...

0800d41c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b0b8      	sub	sp, #224	; 0xe0
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d424:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d428:	2200      	movs	r2, #0
 800d42a:	601a      	str	r2, [r3, #0]
 800d42c:	605a      	str	r2, [r3, #4]
 800d42e:	609a      	str	r2, [r3, #8]
 800d430:	60da      	str	r2, [r3, #12]
 800d432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d434:	f107 0310 	add.w	r3, r7, #16
 800d438:	22bc      	movs	r2, #188	; 0xbc
 800d43a:	2100      	movs	r1, #0
 800d43c:	4618      	mov	r0, r3
 800d43e:	f000 fb8b 	bl	800db58 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a2b      	ldr	r2, [pc, #172]	; (800d4f4 <HAL_PCD_MspInit+0xd8>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d14e      	bne.n	800d4ea <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d44c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d450:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d452:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800d456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d45a:	f107 0310 	add.w	r3, r7, #16
 800d45e:	4618      	mov	r0, r3
 800d460:	f7f9 ffa4 	bl	80073ac <HAL_RCCEx_PeriphCLKConfig>
 800d464:	4603      	mov	r3, r0
 800d466:	2b00      	cmp	r3, #0
 800d468:	d001      	beq.n	800d46e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800d46a:	f7f3 f943 	bl	80006f4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d46e:	f7f9 f81d 	bl	80064ac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d472:	4b21      	ldr	r3, [pc, #132]	; (800d4f8 <HAL_PCD_MspInit+0xdc>)
 800d474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d478:	4a1f      	ldr	r2, [pc, #124]	; (800d4f8 <HAL_PCD_MspInit+0xdc>)
 800d47a:	f043 0301 	orr.w	r3, r3, #1
 800d47e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d482:	4b1d      	ldr	r3, [pc, #116]	; (800d4f8 <HAL_PCD_MspInit+0xdc>)
 800d484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d488:	f003 0301 	and.w	r3, r3, #1
 800d48c:	60fb      	str	r3, [r7, #12]
 800d48e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d490:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d494:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d498:	2302      	movs	r3, #2
 800d49a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800d4a4:	2302      	movs	r3, #2
 800d4a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d4aa:	230a      	movs	r3, #10
 800d4ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	4811      	ldr	r0, [pc, #68]	; (800d4fc <HAL_PCD_MspInit+0xe0>)
 800d4b8:	f7f7 fc06 	bl	8004cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d4bc:	4b0e      	ldr	r3, [pc, #56]	; (800d4f8 <HAL_PCD_MspInit+0xdc>)
 800d4be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d4c2:	4a0d      	ldr	r2, [pc, #52]	; (800d4f8 <HAL_PCD_MspInit+0xdc>)
 800d4c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d4c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d4cc:	4b0a      	ldr	r3, [pc, #40]	; (800d4f8 <HAL_PCD_MspInit+0xdc>)
 800d4ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d4d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4d6:	60bb      	str	r3, [r7, #8]
 800d4d8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d4da:	2200      	movs	r2, #0
 800d4dc:	2100      	movs	r1, #0
 800d4de:	2065      	movs	r0, #101	; 0x65
 800d4e0:	f7f4 fdc7 	bl	8002072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d4e4:	2065      	movs	r0, #101	; 0x65
 800d4e6:	f7f4 fdde 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d4ea:	bf00      	nop
 800d4ec:	37e0      	adds	r7, #224	; 0xe0
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	40080000 	.word	0x40080000
 800d4f8:	58024400 	.word	0x58024400
 800d4fc:	58020000 	.word	0x58020000

0800d500 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d514:	4619      	mov	r1, r3
 800d516:	4610      	mov	r0, r2
 800d518:	f7fd fc36 	bl	800ad88 <USBD_LL_SetupStage>
}
 800d51c:	bf00      	nop
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	460b      	mov	r3, r1
 800d52e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d536:	78fa      	ldrb	r2, [r7, #3]
 800d538:	6879      	ldr	r1, [r7, #4]
 800d53a:	4613      	mov	r3, r2
 800d53c:	00db      	lsls	r3, r3, #3
 800d53e:	1a9b      	subs	r3, r3, r2
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	440b      	add	r3, r1
 800d544:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	78fb      	ldrb	r3, [r7, #3]
 800d54c:	4619      	mov	r1, r3
 800d54e:	f7fd fc70 	bl	800ae32 <USBD_LL_DataOutStage>
}
 800d552:	bf00      	nop
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b082      	sub	sp, #8
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
 800d562:	460b      	mov	r3, r1
 800d564:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d56c:	78fa      	ldrb	r2, [r7, #3]
 800d56e:	6879      	ldr	r1, [r7, #4]
 800d570:	4613      	mov	r3, r2
 800d572:	00db      	lsls	r3, r3, #3
 800d574:	1a9b      	subs	r3, r3, r2
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	440b      	add	r3, r1
 800d57a:	3348      	adds	r3, #72	; 0x48
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	78fb      	ldrb	r3, [r7, #3]
 800d580:	4619      	mov	r1, r3
 800d582:	f7fd fcb9 	bl	800aef8 <USBD_LL_DataInStage>
}
 800d586:	bf00      	nop
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d58e:	b580      	push	{r7, lr}
 800d590:	b082      	sub	sp, #8
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fd fdcd 	bl	800b13c <USBD_LL_SOF>
}
 800d5a2:	bf00      	nop
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5aa:	b580      	push	{r7, lr}
 800d5ac:	b084      	sub	sp, #16
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d102      	bne.n	800d5c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	73fb      	strb	r3, [r7, #15]
 800d5c2:	e008      	b.n	800d5d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	2b02      	cmp	r3, #2
 800d5ca:	d102      	bne.n	800d5d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	73fb      	strb	r3, [r7, #15]
 800d5d0:	e001      	b.n	800d5d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d5d2:	f7f3 f88f 	bl	80006f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d5dc:	7bfa      	ldrb	r2, [r7, #15]
 800d5de:	4611      	mov	r1, r2
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fd fd6d 	bl	800b0c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fd fd19 	bl	800b024 <USBD_LL_Reset>
}
 800d5f2:	bf00      	nop
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
	...

0800d5fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fd fd68 	bl	800b0e0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	6812      	ldr	r2, [r2, #0]
 800d61e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d622:	f043 0301 	orr.w	r3, r3, #1
 800d626:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6a1b      	ldr	r3, [r3, #32]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d005      	beq.n	800d63c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d630:	4b04      	ldr	r3, [pc, #16]	; (800d644 <HAL_PCD_SuspendCallback+0x48>)
 800d632:	691b      	ldr	r3, [r3, #16]
 800d634:	4a03      	ldr	r2, [pc, #12]	; (800d644 <HAL_PCD_SuspendCallback+0x48>)
 800d636:	f043 0306 	orr.w	r3, r3, #6
 800d63a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d63c:	bf00      	nop
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	e000ed00 	.word	0xe000ed00

0800d648 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d656:	4618      	mov	r0, r3
 800d658:	f7fd fd58 	bl	800b10c <USBD_LL_Resume>
}
 800d65c:	bf00      	nop
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	460b      	mov	r3, r1
 800d66e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d676:	78fa      	ldrb	r2, [r7, #3]
 800d678:	4611      	mov	r1, r2
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fd fda6 	bl	800b1cc <USBD_LL_IsoOUTIncomplete>
}
 800d680:	bf00      	nop
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	460b      	mov	r3, r1
 800d692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d69a:	78fa      	ldrb	r2, [r7, #3]
 800d69c:	4611      	mov	r1, r2
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fd fd6e 	bl	800b180 <USBD_LL_IsoINIncomplete>
}
 800d6a4:	bf00      	nop
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fd fdac 	bl	800b218 <USBD_LL_DevConnected>
}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fd fda9 	bl	800b22e <USBD_LL_DevDisconnected>
}
 800d6dc:	bf00      	nop
 800d6de:	3708      	adds	r7, #8
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d13e      	bne.n	800d772 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d6f4:	4a21      	ldr	r2, [pc, #132]	; (800d77c <USBD_LL_Init+0x98>)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4a1f      	ldr	r2, [pc, #124]	; (800d77c <USBD_LL_Init+0x98>)
 800d700:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d704:	4b1d      	ldr	r3, [pc, #116]	; (800d77c <USBD_LL_Init+0x98>)
 800d706:	4a1e      	ldr	r2, [pc, #120]	; (800d780 <USBD_LL_Init+0x9c>)
 800d708:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d70a:	4b1c      	ldr	r3, [pc, #112]	; (800d77c <USBD_LL_Init+0x98>)
 800d70c:	2209      	movs	r2, #9
 800d70e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d710:	4b1a      	ldr	r3, [pc, #104]	; (800d77c <USBD_LL_Init+0x98>)
 800d712:	2202      	movs	r2, #2
 800d714:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d716:	4b19      	ldr	r3, [pc, #100]	; (800d77c <USBD_LL_Init+0x98>)
 800d718:	2200      	movs	r2, #0
 800d71a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d71c:	4b17      	ldr	r3, [pc, #92]	; (800d77c <USBD_LL_Init+0x98>)
 800d71e:	2202      	movs	r2, #2
 800d720:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d722:	4b16      	ldr	r3, [pc, #88]	; (800d77c <USBD_LL_Init+0x98>)
 800d724:	2200      	movs	r2, #0
 800d726:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d728:	4b14      	ldr	r3, [pc, #80]	; (800d77c <USBD_LL_Init+0x98>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d72e:	4b13      	ldr	r3, [pc, #76]	; (800d77c <USBD_LL_Init+0x98>)
 800d730:	2200      	movs	r2, #0
 800d732:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d734:	4b11      	ldr	r3, [pc, #68]	; (800d77c <USBD_LL_Init+0x98>)
 800d736:	2200      	movs	r2, #0
 800d738:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d73a:	4b10      	ldr	r3, [pc, #64]	; (800d77c <USBD_LL_Init+0x98>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d740:	4b0e      	ldr	r3, [pc, #56]	; (800d77c <USBD_LL_Init+0x98>)
 800d742:	2200      	movs	r2, #0
 800d744:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d746:	480d      	ldr	r0, [pc, #52]	; (800d77c <USBD_LL_Init+0x98>)
 800d748:	f7f7 fc6e 	bl	8005028 <HAL_PCD_Init>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d001      	beq.n	800d756 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d752:	f7f2 ffcf 	bl	80006f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d756:	2180      	movs	r1, #128	; 0x80
 800d758:	4808      	ldr	r0, [pc, #32]	; (800d77c <USBD_LL_Init+0x98>)
 800d75a:	f7f8 fe2c 	bl	80063b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d75e:	2240      	movs	r2, #64	; 0x40
 800d760:	2100      	movs	r1, #0
 800d762:	4806      	ldr	r0, [pc, #24]	; (800d77c <USBD_LL_Init+0x98>)
 800d764:	f7f8 fde0 	bl	8006328 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d768:	2280      	movs	r2, #128	; 0x80
 800d76a:	2101      	movs	r1, #1
 800d76c:	4803      	ldr	r0, [pc, #12]	; (800d77c <USBD_LL_Init+0x98>)
 800d76e:	f7f8 fddb 	bl	8006328 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d772:	2300      	movs	r3, #0
}
 800d774:	4618      	mov	r0, r3
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	2000124c 	.word	0x2000124c
 800d780:	40080000 	.word	0x40080000

0800d784 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d78c:	2300      	movs	r3, #0
 800d78e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d790:	2300      	movs	r3, #0
 800d792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7f7 fd68 	bl	8005270 <HAL_PCD_Start>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f000 f962 	bl	800da70 <USBD_Get_USB_Status>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b084      	sub	sp, #16
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	4608      	mov	r0, r1
 800d7c4:	4611      	mov	r1, r2
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	70fb      	strb	r3, [r7, #3]
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	70bb      	strb	r3, [r7, #2]
 800d7d0:	4613      	mov	r3, r2
 800d7d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d7e2:	78bb      	ldrb	r3, [r7, #2]
 800d7e4:	883a      	ldrh	r2, [r7, #0]
 800d7e6:	78f9      	ldrb	r1, [r7, #3]
 800d7e8:	f7f8 f979 	bl	8005ade <HAL_PCD_EP_Open>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f000 f93c 	bl	800da70 <USBD_Get_USB_Status>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b084      	sub	sp, #16
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
 800d80e:	460b      	mov	r3, r1
 800d810:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d812:	2300      	movs	r3, #0
 800d814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d816:	2300      	movs	r3, #0
 800d818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d820:	78fa      	ldrb	r2, [r7, #3]
 800d822:	4611      	mov	r1, r2
 800d824:	4618      	mov	r0, r3
 800d826:	f7f8 f9c2 	bl	8005bae <HAL_PCD_EP_Close>
 800d82a:	4603      	mov	r3, r0
 800d82c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
 800d830:	4618      	mov	r0, r3
 800d832:	f000 f91d 	bl	800da70 <USBD_Get_USB_Status>
 800d836:	4603      	mov	r3, r0
 800d838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d83a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3710      	adds	r7, #16
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	460b      	mov	r3, r1
 800d84e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d850:	2300      	movs	r3, #0
 800d852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d854:	2300      	movs	r3, #0
 800d856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d85e:	78fa      	ldrb	r2, [r7, #3]
 800d860:	4611      	mov	r1, r2
 800d862:	4618      	mov	r0, r3
 800d864:	f7f8 fb54 	bl	8005f10 <HAL_PCD_EP_Flush>
 800d868:	4603      	mov	r3, r0
 800d86a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d86c:	7bfb      	ldrb	r3, [r7, #15]
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 f8fe 	bl	800da70 <USBD_Get_USB_Status>
 800d874:	4603      	mov	r3, r0
 800d876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d878:	7bbb      	ldrb	r3, [r7, #14]
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b084      	sub	sp, #16
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	460b      	mov	r3, r1
 800d88c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d89c:	78fa      	ldrb	r2, [r7, #3]
 800d89e:	4611      	mov	r1, r2
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7f8 fa7b 	bl	8005d9c <HAL_PCD_EP_SetStall>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8aa:	7bfb      	ldrb	r3, [r7, #15]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 f8df 	bl	800da70 <USBD_Get_USB_Status>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3710      	adds	r7, #16
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d8da:	78fa      	ldrb	r2, [r7, #3]
 800d8dc:	4611      	mov	r1, r2
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7f8 fac0 	bl	8005e64 <HAL_PCD_EP_ClrStall>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8e8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 f8c0 	bl	800da70 <USBD_Get_USB_Status>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8fe:	b480      	push	{r7}
 800d900:	b085      	sub	sp, #20
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	460b      	mov	r3, r1
 800d908:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d910:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d916:	2b00      	cmp	r3, #0
 800d918:	da0b      	bge.n	800d932 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d91a:	78fb      	ldrb	r3, [r7, #3]
 800d91c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d920:	68f9      	ldr	r1, [r7, #12]
 800d922:	4613      	mov	r3, r2
 800d924:	00db      	lsls	r3, r3, #3
 800d926:	1a9b      	subs	r3, r3, r2
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	440b      	add	r3, r1
 800d92c:	333e      	adds	r3, #62	; 0x3e
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	e00b      	b.n	800d94a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d932:	78fb      	ldrb	r3, [r7, #3]
 800d934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d938:	68f9      	ldr	r1, [r7, #12]
 800d93a:	4613      	mov	r3, r2
 800d93c:	00db      	lsls	r3, r3, #3
 800d93e:	1a9b      	subs	r3, r3, r2
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	440b      	add	r3, r1
 800d944:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d948:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3714      	adds	r7, #20
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr

0800d956 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b084      	sub	sp, #16
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	460b      	mov	r3, r1
 800d960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d966:	2300      	movs	r3, #0
 800d968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d970:	78fa      	ldrb	r2, [r7, #3]
 800d972:	4611      	mov	r1, r2
 800d974:	4618      	mov	r0, r3
 800d976:	f7f8 f88d 	bl	8005a94 <HAL_PCD_SetAddress>
 800d97a:	4603      	mov	r3, r0
 800d97c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
 800d980:	4618      	mov	r0, r3
 800d982:	f000 f875 	bl	800da70 <USBD_Get_USB_Status>
 800d986:	4603      	mov	r3, r0
 800d988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d98a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3710      	adds	r7, #16
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	607a      	str	r2, [r7, #4]
 800d99e:	603b      	str	r3, [r7, #0]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d9b2:	7af9      	ldrb	r1, [r7, #11]
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	f7f8 f9a6 	bl	8005d08 <HAL_PCD_EP_Transmit>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9c0:	7dfb      	ldrb	r3, [r7, #23]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 f854 	bl	800da70 <USBD_Get_USB_Status>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b086      	sub	sp, #24
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	60f8      	str	r0, [r7, #12]
 800d9de:	607a      	str	r2, [r7, #4]
 800d9e0:	603b      	str	r3, [r7, #0]
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d9f4:	7af9      	ldrb	r1, [r7, #11]
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	687a      	ldr	r2, [r7, #4]
 800d9fa:	f7f8 f922 	bl	8005c42 <HAL_PCD_EP_Receive>
 800d9fe:	4603      	mov	r3, r0
 800da00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da02:	7dfb      	ldrb	r3, [r7, #23]
 800da04:	4618      	mov	r0, r3
 800da06:	f000 f833 	bl	800da70 <USBD_Get_USB_Status>
 800da0a:	4603      	mov	r3, r0
 800da0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3718      	adds	r7, #24
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	460b      	mov	r3, r1
 800da22:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da2a:	78fa      	ldrb	r2, [r7, #3]
 800da2c:	4611      	mov	r1, r2
 800da2e:	4618      	mov	r0, r3
 800da30:	f7f8 f952 	bl	8005cd8 <HAL_PCD_EP_GetRxCount>
 800da34:	4603      	mov	r3, r0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
	...

0800da40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da48:	4b03      	ldr	r3, [pc, #12]	; (800da58 <USBD_static_malloc+0x18>)
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	370c      	adds	r7, #12
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop
 800da58:	200006b0 	.word	0x200006b0

0800da5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]

}
 800da64:	bf00      	nop
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da70:	b480      	push	{r7}
 800da72:	b085      	sub	sp, #20
 800da74:	af00      	add	r7, sp, #0
 800da76:	4603      	mov	r3, r0
 800da78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da7a:	2300      	movs	r3, #0
 800da7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da7e:	79fb      	ldrb	r3, [r7, #7]
 800da80:	2b03      	cmp	r3, #3
 800da82:	d817      	bhi.n	800dab4 <USBD_Get_USB_Status+0x44>
 800da84:	a201      	add	r2, pc, #4	; (adr r2, 800da8c <USBD_Get_USB_Status+0x1c>)
 800da86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da8a:	bf00      	nop
 800da8c:	0800da9d 	.word	0x0800da9d
 800da90:	0800daa3 	.word	0x0800daa3
 800da94:	0800daa9 	.word	0x0800daa9
 800da98:	0800daaf 	.word	0x0800daaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800da9c:	2300      	movs	r3, #0
 800da9e:	73fb      	strb	r3, [r7, #15]
    break;
 800daa0:	e00b      	b.n	800daba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800daa2:	2303      	movs	r3, #3
 800daa4:	73fb      	strb	r3, [r7, #15]
    break;
 800daa6:	e008      	b.n	800daba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800daa8:	2301      	movs	r3, #1
 800daaa:	73fb      	strb	r3, [r7, #15]
    break;
 800daac:	e005      	b.n	800daba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800daae:	2303      	movs	r3, #3
 800dab0:	73fb      	strb	r3, [r7, #15]
    break;
 800dab2:	e002      	b.n	800daba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dab4:	2303      	movs	r3, #3
 800dab6:	73fb      	strb	r3, [r7, #15]
    break;
 800dab8:	bf00      	nop
  }
  return usb_status;
 800daba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3714      	adds	r7, #20
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <__errno>:
 800dac8:	4b01      	ldr	r3, [pc, #4]	; (800dad0 <__errno+0x8>)
 800daca:	6818      	ldr	r0, [r3, #0]
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	2000012c 	.word	0x2000012c

0800dad4 <__libc_init_array>:
 800dad4:	b570      	push	{r4, r5, r6, lr}
 800dad6:	4d0d      	ldr	r5, [pc, #52]	; (800db0c <__libc_init_array+0x38>)
 800dad8:	4c0d      	ldr	r4, [pc, #52]	; (800db10 <__libc_init_array+0x3c>)
 800dada:	1b64      	subs	r4, r4, r5
 800dadc:	10a4      	asrs	r4, r4, #2
 800dade:	2600      	movs	r6, #0
 800dae0:	42a6      	cmp	r6, r4
 800dae2:	d109      	bne.n	800daf8 <__libc_init_array+0x24>
 800dae4:	4d0b      	ldr	r5, [pc, #44]	; (800db14 <__libc_init_array+0x40>)
 800dae6:	4c0c      	ldr	r4, [pc, #48]	; (800db18 <__libc_init_array+0x44>)
 800dae8:	f000 f906 	bl	800dcf8 <_init>
 800daec:	1b64      	subs	r4, r4, r5
 800daee:	10a4      	asrs	r4, r4, #2
 800daf0:	2600      	movs	r6, #0
 800daf2:	42a6      	cmp	r6, r4
 800daf4:	d105      	bne.n	800db02 <__libc_init_array+0x2e>
 800daf6:	bd70      	pop	{r4, r5, r6, pc}
 800daf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dafc:	4798      	blx	r3
 800dafe:	3601      	adds	r6, #1
 800db00:	e7ee      	b.n	800dae0 <__libc_init_array+0xc>
 800db02:	f855 3b04 	ldr.w	r3, [r5], #4
 800db06:	4798      	blx	r3
 800db08:	3601      	adds	r6, #1
 800db0a:	e7f2      	b.n	800daf2 <__libc_init_array+0x1e>
 800db0c:	0800dd70 	.word	0x0800dd70
 800db10:	0800dd70 	.word	0x0800dd70
 800db14:	0800dd70 	.word	0x0800dd70
 800db18:	0800dd74 	.word	0x0800dd74

0800db1c <malloc>:
 800db1c:	4b02      	ldr	r3, [pc, #8]	; (800db28 <malloc+0xc>)
 800db1e:	4601      	mov	r1, r0
 800db20:	6818      	ldr	r0, [r3, #0]
 800db22:	f000 b871 	b.w	800dc08 <_malloc_r>
 800db26:	bf00      	nop
 800db28:	2000012c 	.word	0x2000012c

0800db2c <free>:
 800db2c:	4b02      	ldr	r3, [pc, #8]	; (800db38 <free+0xc>)
 800db2e:	4601      	mov	r1, r0
 800db30:	6818      	ldr	r0, [r3, #0]
 800db32:	f000 b819 	b.w	800db68 <_free_r>
 800db36:	bf00      	nop
 800db38:	2000012c 	.word	0x2000012c

0800db3c <memcpy>:
 800db3c:	440a      	add	r2, r1
 800db3e:	4291      	cmp	r1, r2
 800db40:	f100 33ff 	add.w	r3, r0, #4294967295
 800db44:	d100      	bne.n	800db48 <memcpy+0xc>
 800db46:	4770      	bx	lr
 800db48:	b510      	push	{r4, lr}
 800db4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db52:	4291      	cmp	r1, r2
 800db54:	d1f9      	bne.n	800db4a <memcpy+0xe>
 800db56:	bd10      	pop	{r4, pc}

0800db58 <memset>:
 800db58:	4402      	add	r2, r0
 800db5a:	4603      	mov	r3, r0
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d100      	bne.n	800db62 <memset+0xa>
 800db60:	4770      	bx	lr
 800db62:	f803 1b01 	strb.w	r1, [r3], #1
 800db66:	e7f9      	b.n	800db5c <memset+0x4>

0800db68 <_free_r>:
 800db68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db6a:	2900      	cmp	r1, #0
 800db6c:	d048      	beq.n	800dc00 <_free_r+0x98>
 800db6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db72:	9001      	str	r0, [sp, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	f1a1 0404 	sub.w	r4, r1, #4
 800db7a:	bfb8      	it	lt
 800db7c:	18e4      	addlt	r4, r4, r3
 800db7e:	f000 f8ad 	bl	800dcdc <__malloc_lock>
 800db82:	4a20      	ldr	r2, [pc, #128]	; (800dc04 <_free_r+0x9c>)
 800db84:	9801      	ldr	r0, [sp, #4]
 800db86:	6813      	ldr	r3, [r2, #0]
 800db88:	4615      	mov	r5, r2
 800db8a:	b933      	cbnz	r3, 800db9a <_free_r+0x32>
 800db8c:	6063      	str	r3, [r4, #4]
 800db8e:	6014      	str	r4, [r2, #0]
 800db90:	b003      	add	sp, #12
 800db92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db96:	f000 b8a7 	b.w	800dce8 <__malloc_unlock>
 800db9a:	42a3      	cmp	r3, r4
 800db9c:	d90b      	bls.n	800dbb6 <_free_r+0x4e>
 800db9e:	6821      	ldr	r1, [r4, #0]
 800dba0:	1862      	adds	r2, r4, r1
 800dba2:	4293      	cmp	r3, r2
 800dba4:	bf04      	itt	eq
 800dba6:	681a      	ldreq	r2, [r3, #0]
 800dba8:	685b      	ldreq	r3, [r3, #4]
 800dbaa:	6063      	str	r3, [r4, #4]
 800dbac:	bf04      	itt	eq
 800dbae:	1852      	addeq	r2, r2, r1
 800dbb0:	6022      	streq	r2, [r4, #0]
 800dbb2:	602c      	str	r4, [r5, #0]
 800dbb4:	e7ec      	b.n	800db90 <_free_r+0x28>
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	b10b      	cbz	r3, 800dbc0 <_free_r+0x58>
 800dbbc:	42a3      	cmp	r3, r4
 800dbbe:	d9fa      	bls.n	800dbb6 <_free_r+0x4e>
 800dbc0:	6811      	ldr	r1, [r2, #0]
 800dbc2:	1855      	adds	r5, r2, r1
 800dbc4:	42a5      	cmp	r5, r4
 800dbc6:	d10b      	bne.n	800dbe0 <_free_r+0x78>
 800dbc8:	6824      	ldr	r4, [r4, #0]
 800dbca:	4421      	add	r1, r4
 800dbcc:	1854      	adds	r4, r2, r1
 800dbce:	42a3      	cmp	r3, r4
 800dbd0:	6011      	str	r1, [r2, #0]
 800dbd2:	d1dd      	bne.n	800db90 <_free_r+0x28>
 800dbd4:	681c      	ldr	r4, [r3, #0]
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	6053      	str	r3, [r2, #4]
 800dbda:	4421      	add	r1, r4
 800dbdc:	6011      	str	r1, [r2, #0]
 800dbde:	e7d7      	b.n	800db90 <_free_r+0x28>
 800dbe0:	d902      	bls.n	800dbe8 <_free_r+0x80>
 800dbe2:	230c      	movs	r3, #12
 800dbe4:	6003      	str	r3, [r0, #0]
 800dbe6:	e7d3      	b.n	800db90 <_free_r+0x28>
 800dbe8:	6825      	ldr	r5, [r4, #0]
 800dbea:	1961      	adds	r1, r4, r5
 800dbec:	428b      	cmp	r3, r1
 800dbee:	bf04      	itt	eq
 800dbf0:	6819      	ldreq	r1, [r3, #0]
 800dbf2:	685b      	ldreq	r3, [r3, #4]
 800dbf4:	6063      	str	r3, [r4, #4]
 800dbf6:	bf04      	itt	eq
 800dbf8:	1949      	addeq	r1, r1, r5
 800dbfa:	6021      	streq	r1, [r4, #0]
 800dbfc:	6054      	str	r4, [r2, #4]
 800dbfe:	e7c7      	b.n	800db90 <_free_r+0x28>
 800dc00:	b003      	add	sp, #12
 800dc02:	bd30      	pop	{r4, r5, pc}
 800dc04:	20000810 	.word	0x20000810

0800dc08 <_malloc_r>:
 800dc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc0a:	1ccd      	adds	r5, r1, #3
 800dc0c:	f025 0503 	bic.w	r5, r5, #3
 800dc10:	3508      	adds	r5, #8
 800dc12:	2d0c      	cmp	r5, #12
 800dc14:	bf38      	it	cc
 800dc16:	250c      	movcc	r5, #12
 800dc18:	2d00      	cmp	r5, #0
 800dc1a:	4606      	mov	r6, r0
 800dc1c:	db01      	blt.n	800dc22 <_malloc_r+0x1a>
 800dc1e:	42a9      	cmp	r1, r5
 800dc20:	d903      	bls.n	800dc2a <_malloc_r+0x22>
 800dc22:	230c      	movs	r3, #12
 800dc24:	6033      	str	r3, [r6, #0]
 800dc26:	2000      	movs	r0, #0
 800dc28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc2a:	f000 f857 	bl	800dcdc <__malloc_lock>
 800dc2e:	4921      	ldr	r1, [pc, #132]	; (800dcb4 <_malloc_r+0xac>)
 800dc30:	680a      	ldr	r2, [r1, #0]
 800dc32:	4614      	mov	r4, r2
 800dc34:	b99c      	cbnz	r4, 800dc5e <_malloc_r+0x56>
 800dc36:	4f20      	ldr	r7, [pc, #128]	; (800dcb8 <_malloc_r+0xb0>)
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	b923      	cbnz	r3, 800dc46 <_malloc_r+0x3e>
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	4630      	mov	r0, r6
 800dc40:	f000 f83c 	bl	800dcbc <_sbrk_r>
 800dc44:	6038      	str	r0, [r7, #0]
 800dc46:	4629      	mov	r1, r5
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f000 f837 	bl	800dcbc <_sbrk_r>
 800dc4e:	1c43      	adds	r3, r0, #1
 800dc50:	d123      	bne.n	800dc9a <_malloc_r+0x92>
 800dc52:	230c      	movs	r3, #12
 800dc54:	6033      	str	r3, [r6, #0]
 800dc56:	4630      	mov	r0, r6
 800dc58:	f000 f846 	bl	800dce8 <__malloc_unlock>
 800dc5c:	e7e3      	b.n	800dc26 <_malloc_r+0x1e>
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	1b5b      	subs	r3, r3, r5
 800dc62:	d417      	bmi.n	800dc94 <_malloc_r+0x8c>
 800dc64:	2b0b      	cmp	r3, #11
 800dc66:	d903      	bls.n	800dc70 <_malloc_r+0x68>
 800dc68:	6023      	str	r3, [r4, #0]
 800dc6a:	441c      	add	r4, r3
 800dc6c:	6025      	str	r5, [r4, #0]
 800dc6e:	e004      	b.n	800dc7a <_malloc_r+0x72>
 800dc70:	6863      	ldr	r3, [r4, #4]
 800dc72:	42a2      	cmp	r2, r4
 800dc74:	bf0c      	ite	eq
 800dc76:	600b      	streq	r3, [r1, #0]
 800dc78:	6053      	strne	r3, [r2, #4]
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	f000 f834 	bl	800dce8 <__malloc_unlock>
 800dc80:	f104 000b 	add.w	r0, r4, #11
 800dc84:	1d23      	adds	r3, r4, #4
 800dc86:	f020 0007 	bic.w	r0, r0, #7
 800dc8a:	1ac2      	subs	r2, r0, r3
 800dc8c:	d0cc      	beq.n	800dc28 <_malloc_r+0x20>
 800dc8e:	1a1b      	subs	r3, r3, r0
 800dc90:	50a3      	str	r3, [r4, r2]
 800dc92:	e7c9      	b.n	800dc28 <_malloc_r+0x20>
 800dc94:	4622      	mov	r2, r4
 800dc96:	6864      	ldr	r4, [r4, #4]
 800dc98:	e7cc      	b.n	800dc34 <_malloc_r+0x2c>
 800dc9a:	1cc4      	adds	r4, r0, #3
 800dc9c:	f024 0403 	bic.w	r4, r4, #3
 800dca0:	42a0      	cmp	r0, r4
 800dca2:	d0e3      	beq.n	800dc6c <_malloc_r+0x64>
 800dca4:	1a21      	subs	r1, r4, r0
 800dca6:	4630      	mov	r0, r6
 800dca8:	f000 f808 	bl	800dcbc <_sbrk_r>
 800dcac:	3001      	adds	r0, #1
 800dcae:	d1dd      	bne.n	800dc6c <_malloc_r+0x64>
 800dcb0:	e7cf      	b.n	800dc52 <_malloc_r+0x4a>
 800dcb2:	bf00      	nop
 800dcb4:	20000810 	.word	0x20000810
 800dcb8:	20000814 	.word	0x20000814

0800dcbc <_sbrk_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d06      	ldr	r5, [pc, #24]	; (800dcd8 <_sbrk_r+0x1c>)
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	602b      	str	r3, [r5, #0]
 800dcc8:	f7f2 fd80 	bl	80007cc <_sbrk>
 800dccc:	1c43      	adds	r3, r0, #1
 800dcce:	d102      	bne.n	800dcd6 <_sbrk_r+0x1a>
 800dcd0:	682b      	ldr	r3, [r5, #0]
 800dcd2:	b103      	cbz	r3, 800dcd6 <_sbrk_r+0x1a>
 800dcd4:	6023      	str	r3, [r4, #0]
 800dcd6:	bd38      	pop	{r3, r4, r5, pc}
 800dcd8:	20001654 	.word	0x20001654

0800dcdc <__malloc_lock>:
 800dcdc:	4801      	ldr	r0, [pc, #4]	; (800dce4 <__malloc_lock+0x8>)
 800dcde:	f000 b809 	b.w	800dcf4 <__retarget_lock_acquire_recursive>
 800dce2:	bf00      	nop
 800dce4:	2000165c 	.word	0x2000165c

0800dce8 <__malloc_unlock>:
 800dce8:	4801      	ldr	r0, [pc, #4]	; (800dcf0 <__malloc_unlock+0x8>)
 800dcea:	f000 b804 	b.w	800dcf6 <__retarget_lock_release_recursive>
 800dcee:	bf00      	nop
 800dcf0:	2000165c 	.word	0x2000165c

0800dcf4 <__retarget_lock_acquire_recursive>:
 800dcf4:	4770      	bx	lr

0800dcf6 <__retarget_lock_release_recursive>:
 800dcf6:	4770      	bx	lr

0800dcf8 <_init>:
 800dcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfa:	bf00      	nop
 800dcfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcfe:	bc08      	pop	{r3}
 800dd00:	469e      	mov	lr, r3
 800dd02:	4770      	bx	lr

0800dd04 <_fini>:
 800dd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd06:	bf00      	nop
 800dd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd0a:	bc08      	pop	{r3}
 800dd0c:	469e      	mov	lr, r3
 800dd0e:	4770      	bx	lr
